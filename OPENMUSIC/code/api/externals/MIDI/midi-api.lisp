;;===========================================================================;OM API ;Multiplatform API for OpenMusic;Macintosh version (Digitool Macintosh Common Lisp - MCL);;Copyright (C) 2004 IRCAM-Centre Georges Pompidou, Paris, France.; ;This program is free software; you can redistribute it and/or;modify it under the terms of the GNU General Public License;as published by the Free Software Foundation; either version 2;of the License, or (at your option) any later version.;;See file LICENSE for further informations on licensing terms.;;This program is distributed in the hope that it will be useful,;but WITHOUT ANY WARRANTY; without even the implied warranty of;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the;GNU General Public License for more details.;;You should have received a copy of the GNU General Public License;along with this program; if not, write to the Free Software;Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.;;Authors: Jean Bresson and Augusto Agon;;===========================================================================;;===========================================================================; DocFile; MIDI functions called by OpenMusic; Use MIDISHARE ;;===========================================================================(defpackage :om-midi)(in-package :om-midi)(export '(make-midi-evt          midi-evt-date          midi-evt-type          midi-evt-chan          midi-evt-ref          midi-evt-port          midi-evt-fields          copy-midi-evt          midi-evt-<          )        :om-midi);;; Conventions: channels = 1-16(defstruct midi-evt (date) (type) (chan) (ref) (port) (fields));;; AS IS BEFORE B IF...(defun midi-evt-< (a b)  (or (< (midi-evt-date a) (midi-evt-date b)) ;;; A IS BEFORE B      (and (= (midi-evt-date a) (midi-evt-date b)) ;;; A IS = B            (not (find (midi-evt-type a) '(Note KeyOn KeyOff))))  ;;; BUT A IS NOT A NOTE MESSAGE      (and (= (midi-evt-date a) (midi-evt-date b))           (equal (midi-evt-type a) 'KeyOff) (equal (midi-evt-type a) 'KeyOn))))  ;;; SEND NOTE OFF MESSAGES FIRST; MIDI event type identifiers(export '(Note KeyOn KeyOff KeyPress CtrlChange ProgChange ChanPress PitchBend               SongPos SongSel Clock Start Continue Stop Tune ActiveSens Reset                SysEx Stream Private Process DProcess QFrame Ctrl14b NonRegParam               RegParam SeqNum Textual Copyright SeqName InstrName Lyric Marker               CuePoint ChanPrefix EndTrack Tempo SMPTEOffset TimeSign KeySign               Specific PortPrefix RcvAlarm ApplAlarm Reserved dead)        :om-midi); tip: the events are ordered as following the midishare type/number convention (note = 0, etc.)(defvar *midi-event-types*   '(Note KeyOn KeyOff KeyPress CtrlChange ProgChange ChanPress PitchBend         SongPos SongSel Clock Start Continue Stop Tune ActiveSens Reset          SysEx Stream Private Process DProcess QFrame Ctrl14b NonRegParam         RegParam SeqNum Textual Copyright SeqName InstrName Lyric Marker         CuePoint ChanPrefix EndTrack Tempo SMPTEOffset TimeSign KeySign         Specific PortPrefix RcvAlarm ApplAlarm Reserved dead));;; MIDI systems must register using pushnew(defvar *midi-systems* nil);;; Function to load a MIDIFile(defmethod load-midi-file-function (midisystem) nil)