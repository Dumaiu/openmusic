; OM File Header - Saved 2009/10/22 17:10:02
; (6.04 :patc (om-make-point 84 33) (om-make-point 308 76) (om-make-point 800 662) "non documentation" 183 0 nil "2008/10/18 1:53:38")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "file-box" (quote ((om-load-boxcomment "comment" (om-make-point 262 47) (quote "The FILE-BOX is a special loop allowing to perform operations with in/outputs to a file.") "" (om-make-point 254 62) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 203 32) (quote "FILE-BOX tutorial") "" (om-make-point 294 14) nil (om-make-color 0 0 0) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 118 58) (quote "FILE-BOX :$iterative file reader") "" (om-make-point 503 358) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 443 348) nil nil nil (list (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 322 282) (om-make-point 24 25) (quote (quote eof)) "'eof" nil) (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "OBJECT1" "OBJECT1" nil) (om-load-inputfun (quote input-funbox) "OBJECT2" "OBJECT2" nil))) (om-make-point 299 312) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 305 396) nil nil nil nil 1) (om-load-boxcomment "comment11" (om-make-point 171 78) (quote "STREAMFILE : Represents the file pointer$Connect to a pathname and double-clic to choose file type, direction, etc.") "" (om-make-point 233 109) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 118 50) (quote "Read and retrun one line or 'eof if the end of file is reached") "" (om-make-point 235 212) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 110 50) (quote "remove the last collected element ('eof)") "" (om-make-point 562 363) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 151 26) (quote "WHILE read-line != EOF") "" (om-make-point 248 550) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 526 376) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 206 213) (om-make-point 24 25) (quote (quote eof)) "'eof" nil) (om-load-boxcomment "comment" (om-make-point 92 37) (quote "EACH TIME : collect") "" (om-make-point 54 518) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 130 310) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "READ-LINE" (quote read-line) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 179 240) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "invariant" "EXPR" (quote t)))) (om-make-point 292 489) nil nil nil nil 0) (om-load-boxcomment "comment" (om-make-point 104 51) (quote "FINALLY :$retruned value (the collected list)") "" (om-make-point 564 423) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxin "input0" 0 (om-make-point 167 49) "no documentation" "FILENAME" nil nil) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 31 271) nil nil nil 0) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 166 110) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :input (if-ex box) :supersede) box) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 526 421) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 70 464) nil nil nil 0)) (quote ((11 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (10 0 2 2 nil 0) (10 1 7 0 nil 0) (11 0 10 0 nil 0) (16 0 11 0 nil 0) (8 0 11 2 nil 0) (2 0 12 0 nil 0) (14 0 16 0 nil 0) (7 0 17 0 nil 0) (2 0 18 0 nil 0))) 1 "file-box" nil) (om-load-boxcomment "comment" (om-make-point 41 26) (quote "Data") "" (om-make-point 154 239) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "append" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 249 472) (om-make-point 70 50) (load-textfile (make-pathname :directory (quote (:relative "out-files")) :device :unspecific :name "test" :type "txt") (quote textfile) "append" "text") nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 357 183) (om-make-point 53 28) "test.txt" "\"test.txt\"" nil) (om-load-boxcomment "comment" (om-make-point 179 68) (quote "If the FILE-BOX returns a pathname, it can be connected to a TEXTFILE object in order to check the result") "" (om-make-point 63 461) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 190 71) (quote "OUTFILE :$create a pathname with the input name and  the output directory specified in the Preferences") "" (om-make-point 417 215) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 365 213) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 248 182) (om-make-point 22 28) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 144 185) (om-make-point 45 27) "hello" "\"hello\"" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 10))) (om-make-point 210 223) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 118 58) (quote "FILE-BOX :$Iterative file writer") "" (om-make-point 136 350) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil) (om-load-inputfun (quote input-funbox) "aditional input" "OPLIST" nil))) (om-make-point 268 348) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 217 36) (quote "<== Click to add a StreamFile box") "" (om-make-point 468 5) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LINE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "STREAM" nil))) (om-make-point 101 322) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 587 273) (om-make-point 37 34) ": " "\": \"" nil) (om-load-boxcall (quote genfun) "FILE-WRITE-LINE" (quote file-write-line) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LINE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "STREAM" nil))) (om-make-point 415 383) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 585 326) nil nil nil "string+" 1) (om-load-boxcall (quote lispfun) "INTEGER-TO-STRING" (quote integer-to-string) (quote ((om-load-inputfun (quote input-funbox) "INT" "INT" nil))) (om-make-point 476 267) nil nil nil nil 1) (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" (quote t)))) (om-make-point 508 205) nil nil nil nil 3) (om-load-boxcomment "comment11" (om-make-point 197 86) (quote "STREAMFILE : Represents the file pointer$Connect to a pathname and double-clic to choose file type, direction, etc.") "" (om-make-point 197 170) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 32 280) (om-make-point 94 24) "FileBox tutorial" "\"FileBox tutorial\"" nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 667 262) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 88 38) (quote "FINALLY :$returned value") "" (om-make-point 461 119) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 160 72) (quote "INITDO : $An action to execute before to start the loop (e.g. write he file header)$") "" (om-make-point 177 337) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxin "input1" 1 (om-make-point 188 57) "no documentation" "PATHNAME" nil nil) (om-load-boxin "input0" 0 (om-make-point 673 193) "no documentation" "LIST" nil nil) (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 114 389) nil nil nil 0) (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 136 172) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :io (if-ex box) :supersede) box) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 423 115) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 418 459) nil nil nil 0)) (quote ((8 0 1 0 nil 0) (15 0 1 1 nil 0) (4 0 3 0 nil 0) (15 0 3 1 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (9 0 4 2 nil 0) (6 0 5 0 nil 0) (13 0 9 0 nil 0) (1 0 14 0 nil 0) (12 0 15 0 nil 0) (12 0 16 0 nil 0) (3 0 17 0 nil 0))) 1 "file-box" nil))) (quote ((9 0 3 0 nil 0) (14 0 5 0 nil 0) (6 0 9 0 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (12 0 14 0 nil 0) (9 0 14 1 nil 0))) nil 6.0301))
