; OM File Header - Saved 2009/10/22 17:10:03
; (6.04 :patc (om-make-point 100 30) (om-make-point 65 78) (om-make-point 1081 460) "non documentation" 183 0 nil "2008/10/18 1:54:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "osc" (quote ((om-load-boxcomment "comment" (om-make-point 176 79) (quote "This patch will print the the fisrt item of the data and play a midi note if an integer is the second item of the data list") "" (om-make-point 848 64) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 180 63) (quote "A maquette creating OSC Events bound to be receive by the osc-receve box of this patch") "" (om-make-point 568 342) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 175 72) (quote "Create an OSCEvent object$Push P for sending it$This object can be put into a amquette, for example") "" (om-make-point 211 352) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 127 61) (quote "Eval to send input1 $to host input2 $at port input3") "" (om-make-point 38 156) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 176 79) (quote "When something is received, all the outputs of the patch are evaluated$The input represent the received data") "" (om-make-point 638 62) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 105 51) (quote "Eval to activate/desactivate the receive loop") "" (om-make-point 568 173) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 5558 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 8700)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 87 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 5958 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 3100)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 31 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 8442 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 8300)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 83 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 7537 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 3700)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 37 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 4905 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 6800)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 68 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 3663 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 7700)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 77 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 2063 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 6600)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 66 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 159) (om-make-point 40 20) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 154 307) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 163 380) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (4 0 2 1 nil 0) (0 0 3 3 nil 0) (6 5 4 0 nil 0) (3 0 5 0 nil 0))) 6.0301 nil)) 0 989 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 8300)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))) t 26 83 1 0 (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) nil nil nil nil nil nil ""))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 8/15 31/51 3/5) (quote ((4 60) ((4 4)) 16 t)) t 6.0301 nil) (quote ((om-load-inputfun (quote input-funbox) "time rate number of offsets list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "Objs" nil))) (om-make-point 495 337) nil nil nil nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 164 290) (om-make-point 107 28) (list (list "hello" 7000)) "((\"hello\" 7000))" nil) (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" "127.0.0.1") (om-load-inputfun (quote input-funbox) "no documentation" "PORT" 3000) (om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" (list (list "hola" 33))))) (om-make-point 89 341) (om-make-point 97 56) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "hello" 7000)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 461 126) (om-make-point 55 29) 3000 "3000" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "INTEGERP" (quote integerp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 144 185) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil))) (om-make-point 205 286) nil nil nil nil 1) (om-load-boxout "output1" 1 (om-make-point 195 351) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "ROUND" (quote round) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 100))) (om-make-point 230 163) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SEND-MIDI-NOTE" (quote send-midi-note) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PORT" 0) (om-load-inputfun (quote input-funbox) "no documentation" "CHAN" 1) (om-load-inputfun (quote input-funbox) "no documentation" "PITCH" 60) (om-load-inputfun (quote input-funbox) "no documentation" "VEL" 100) (om-load-inputfun (quote input-funbox) "no documentation" "DUR" 200) (om-load-inputfun (quote input-funbox) "no documentation" "TRACK" 1))) (om-make-point 234 213) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 102) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 35 139) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 47 196) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 28 258) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 96 38) "no documentation" nil nil nil))) (quote ((5 0 0 0 nil 0) (0 0 1 0 nil 0) (4 0 1 1 nil 0) (1 0 2 0 nil 0) (5 0 3 0 nil 0) (3 0 4 2 nil 0) (9 0 5 0 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0))) 6.0301 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 556 36) nil nil "o" nil) (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PORT" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PATCH" nil))) (om-make-point 472 165) (om-make-point 91 55) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 269 129) (om-make-point 39 23) 3000 "3000" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 223 98) (om-make-point 72 26) "127.0.0.1" "\"127.0.0.1\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 101 62) (om-make-point 85 26) (list (list "hola" 7000)) "((\"hola\" 7000))" nil) (om-load-boxcall (quote genfun) "OSC-SEND" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PORT" nil))) (om-make-point 183 159) (om-make-point 120 55) nil nil nil 1))) (quote ((7 0 8 3 nil 0) (9 0 11 0 nil 0) (10 0 11 1 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (12 0 15 2 nil 0))) nil 6.0301))
