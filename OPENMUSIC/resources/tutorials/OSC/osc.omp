; OM File Header - Saved 2014/04/22 16:36:55
; (6.080101 :patc (om-make-point 100 30) (om-make-point 245 542) (om-make-point 1081 460) "non documentation" 183 0 nil "2014/04/22 16:36:55")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "osc" (quote ((om-load-boxcomment "comment" (om-make-point 105 51) (quote "right-click and start receive thread") "" (om-make-point 578 161) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 180 63) (quote "A maquette creating OSC Events bound to be receive by the osc-receve box of this patch") "" (om-make-point 583 332) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 175 72) (quote "Create an OSCEvent object$press 'p' for sending it$This object can be put into a maquette, for example") "" (om-make-point 211 345) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 123 56) (quote "Eval to send input1 $to host input2 $at port input3") "" (om-make-point 54 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 176 79) (quote "A function/patch that process incoming messages $(optional)") "" (om-make-point 610 69) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 313 38) (quote "ONLY ONE RECEIVE CONNECTION CAN BE OPEN AT A TIME FOR A GIVEN PORT NUMBER") "" (om-make-point 677 170) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 8665 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 6400)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 64 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 7669 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 7100)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 71 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 6483 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 5200)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 52 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 5466 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 6900)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 69 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 4513 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 4700)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 47 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 3051 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 7100)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 71 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 500 400))) 0 2034 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 5500)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 55 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj" (quote nil) (list (quote patch) (om-load-patch-abs1 "tempobj" (quote ((om-load-editor-box1 "OSCEVENT 2" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 85 309) (om-make-point 65 70) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 257) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 100 149) (om-make-point 61 30) "NOTE" "\"NOTE\"" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 140 193) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 100))) (om-make-point 183 140) nil nil nil nil 1) (om-load-tempboxout "tempout" (om-make-point 150 392) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxselfin "self" (om-make-point 90 50) nil))) (quote ((1 0 0 3 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (6 5 4 0 nil 0) (0 0 5 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 400 500))) 0 989 0 (om-make-color 104/255 46/85 57/85) (list (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list (list "NOTE" 8300)) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) t 26 83 1 0 (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode zoom deltapict player)) (list nil (quote t) (om-make-point 10 40) (om-make-point 370 280) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 1 (om-make-point 0 0) (quote :osc-player))) nil nil nil nil nil nil ""))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 8/15 31/51 3/5) (quote ((4 60) ((4 4)) 16 t)) t 6.080101 nil "" nil (quote (1)) (quote (1)) nil (om-make-point 200 200) (om-make-point 500 200)) (quote ((om-load-inputfun (quote input-funbox) "time rate number of offsets list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "Objs" nil))) (om-make-point 495 337) nil nil nil nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 164 290) (om-make-point 107 28) (list (list "hello" 7000)) "((\"hello\" 7000))" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 461 126) (om-make-point 55 29) 3000 "3000" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcomment "comment" (om-make-point 143 59) (quote "returns the value for messages starting with  \"note\"") nil (om-make-point 226 234) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 79 148) (om-make-point 55 30) "note" "\"note\"" nil) (om-load-boxcall (quote lispfun) "STRING-EQUAL" (quote string-equal) (quote ((om-load-inputfun (quote input-funbox) "STRING1" "STRING1" nil) (om-load-inputfun (quote input-funbox) "STRING2" "STRING2" "note"))) (om-make-point 36 186) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil))) (om-make-point 116 261) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 167 139) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 35 139) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 108 317) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 156 35) "no documentation" nil nil nil))) (quote ((5 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (4 0 3 1 nil 0) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (3 0 6 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 394 396)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 540 88) nil nil "l" "mypatch") (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PORT" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PATCH" nil))) (om-make-point 472 165) (om-make-point 91 55) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 269 129) (om-make-point 48 30) 3000 "3000" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 223 98) (om-make-point 84 30) "127.0.0.1" "\"127.0.0.1\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 104 97) (om-make-point 104 31) (list (list "hola" 7000)) "((\"hola\" 7000))" nil) (om-load-boxcall (quote genfun) "OSC-SEND" (quote osc-send) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BUNDLE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "HOST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PORT" nil))) (om-make-point 183 159) (om-make-point 120 55) nil nil nil 1))) (quote ((8 0 10 0 nil 0) (9 0 10 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (11 0 14 2 nil 0))) nil 6.080101))