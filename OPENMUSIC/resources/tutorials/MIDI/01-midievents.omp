; OM File Header - Saved 2009/10/22 17:11:47
; (6.010003 :patc (om-make-point 33 30) (om-make-point 653 214) (om-make-point 846 739) "No documentation " 183 0 nil "2009/10/22 17:11:47")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-midievents" (quote ((om-load-boxcall (quote genfun) "GM-PROGRAM1" (quote gm-program) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Instrument name" "PROGNAME" 14 (list (list "0 - Acoustic Grand Piano" 0) (list "1 - Bright Acoustic Piano" 1) (list "2 - Electric Grand Piano" 2) (list "3 - Honki Tonk Piano" 3) (list "4 - Electric Piano 1" 4) (list "5 - Electric Piano 2" 5) (list "6 - Harpsichord" 6) (list "7 - Clavinet" 7) (list "8 - Celesta" 8) (list "9 - Glockenspiel" 9) (list "10 - Music Box" 10) (list "11 - Vibraphone" 11) (list "12 - Marimba" 12) (list "13 - Xylophone" 13) (list "14 - Tubular bells" 14) (list "15 - Dulcimer" 15) (list "16 - Drawbar Organ" 16) (list "17 - Percussive Organ" 17) (list "18 - Rock Organ" 18) (list "19 - Church Organ" 19) (list "20 - Reed Organ" 20) (list "21 - Accordion" 21) (list "22 - Harmonica" 22) (list "23 - Tango Accordion" 23) (list "24 - Nylon Acoustic Guitar" 24) (list "25 - Steel Acoustic Guitar" 25) (list "26 - Jazz Electric Guitar" 26) (list "27 - Clean Electric Guitar" 27) (list "28 - Muted Electric Guitar" 28) (list "29 - Overdrive Guitar" 29) (list "30 - Distorted Guitar" 30) (list "31 - Guitar Harmonics" 31) (list "32 - Acoustic Bass" 32) (list "33 - Electric Fingered Bass" 33) (list "34 - Electric Picked Bass" 34) (list "35 - Fretless Bass" 35) (list "36 - Slap Bass 1" 36) (list "37 - Slap Bass 2" 37) (list "38 - Synth Bass 1" 38) (list "39 - Synth Bass 2" 39) (list "40 - Violin" 40) (list "41 - Viola" 41) (list "42 - Cello" 42) (list "43 - Contrabass" 43) (list "44 - Tremolo Strings" 44) (list "45 - Pizzicato Strings" 45) (list "46 - Orchestral Harp" 46) (list "47 - Timpani" 47) (list "48 - String Ensemble 1" 48) (list "49 - String Ensemble 2" 49) (list "50 - Synth Strings 1" 50) (list "51 - Synth Strings 2" 51) (list "52 - Choir Aahs" 52) (list "53 - Voice Oohs" 53) (list "54 - Synth Voice" 54) (list "55 - Orchestra Hit" 55) (list "56 - Trumpet" 56) (list "57 - Trombone" 57) (list "58 - Tuba" 58) (list "59 - Muted Trumpet" 59) (list "60 - French Horn" 60) (list "61 - Brass Section" 61) (list "62 - Synth Brass 1" 62) (list "63 - Synth Brass 2" 63) (list "64 - Soprano Sax" 64) (list "65 - Alto Sax" 65) (list "66 - Tenor Sax" 66) (list "67 - Baritone Sax" 67) (list "68 - Oboe" 68) (list "69 - English Horn" 69) (list "70 - Bassoon" 70) (list "71 - Clarinet" 71) (list "72 - Piccolo" 72) (list "73 - Flute" 73) (list "74 - Recorder" 74) (list "75 - Pan Flute" 75) (list "76 - Bottle Blow" 76) (list "77 - Shakuhachi" 77) (list "78 - Whistle" 78) (list "79 - Ocarina" 79) (list "80 - Syn Square Wave" 80) (list "81 - Syn Sawtooth Wave" 81) (list "82 - Syn Calliope" 82) (list "83 - Syn Chiff" 83) (list "84 - Syn Charang" 84) (list "85 - Syn Voice" 85) (list "86 - Syn Fifths Sawtooth w-Wave" 86) (list "87 - Syn Brass and Lead" 87) (list "88 - New Age Syn Pad" 88) (list "89 - Warm Syn Pad" 89) (list "90 - Polysynth Syn Pad" 90) (list "91 - Choir Syn Pad" 91) (list "92 - Bowed Syn Pad" 92) (list "93 - Metal Syn Pad" 93) (list "94 - Halo Syn Pad" 94) (list "95 - Sweep Syn Pad" 95) (list "96 - FX Rain" 96) (list "97 - FX Soundtrack" 97) (list "98 - FX Crystal" 98) (list "99 - FX Atmosphere" 99) (list "100 - FX Brightness" 100) (list "101 - FX Goblins" 101) (list "102 - FX Echoes" 102) (list "103 - FX Sci-fi" 103) (list "104 - Sitar" 104) (list "105 - Banjo" 105) (list "106 - Shamisen" 106) (list "107 - Koto" 107) (list "108 - Kalimba" 108) (list "109 - Bag Pipe" 109) (list "110 - Fiddle" 110) (list "111 - Shanai" 111) (list "112 - Tinkle Bell" 112) (list "113 - Agogo" 113) (list "114 - Steel Drums" 114) (list "115 - Woodblock" 115) (list "116 - Taiko Drum" 116) (list "117 - Melodic Tom" 117) (list "118 - Syn Drum" 118) (list "119 - Reverse Cymbal" 119) (list "120 - Guitar Fret Noise" 120) (list "121 - Breath Noise" 121) (list "122 - Seashore" 122) (list "123 - Bird Tweet" 123) (list "124 - Telephone Ring" 124) (list "125 - Helicopter" 125) (list "126 - Applause" 126) (list "127 - Gun Shot" 127))))) (om-make-point 61 101) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 663 128) (om-make-point 11 20) 1 "1" nil) (om-load-boxcall (quote genfun) "CONTROL-CHANGE" (quote control-change) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "control name" "CTRL" 10 (list (list "00 - Bank Select" 0) (list "01 - Modulation Wheel" 1) (list "02 - Breath Controller" 2) (list "04 - Foot Controller" 4) (list "05 - Portamento Time" 5) (list "06 - Data Entry MSB" 6) (list "07 - Channel Volume" 7) (list "08 - Balance" 8) (list "10 - Pan" 10) (list "11 - Expression Controller" 11) (list "12 - Effect Control 1" 12) (list "13 - Effect Control 2" 13) (list "16 - General Purpose Controller 1" 16) (list "17 - General Purpose Controller 2" 17) (list "18 - General Purpose Controller 3" 18) (list "19 - General Purpose Controller 4" 19) (list "32 - Bank Select Fine" 0) (list "33 - Modulation Wheel  Fine" 1) (list "34 - Breath Controller Fine" 2) (list "36 - Foot Controller Fine" 4) (list "37 - Portamento Time Fine" 5) (list "38 - Data Entry LSB" 6) (list "39 - Channel Volume Fine" 7) (list "40 - Balance Fine" 8) (list "42 - Pan Fine" 10) (list "43 - Expression Controller Fine" 11) (list "44 - Effect Control 1 Fine" 12) (list "45 - Effect Control 2 Fine" 13) (list "48 - General Purpose Controller 1 Fine" 16) (list "49 - General Purpose Controller 2 Fine" 17) (list "50 - General Purpose Controller 3 Fine" 18) (list "51 - General Purpose Controller 4 Fine" 19) (list "64 - Damper Pedal" 64) (list "65 - Portamento" 65) (list "66 - Sustenuto" 66) (list "67 - Soft Pedal" 67) (list "68 - Legato Footswitch" 68) (list "69 - Hold 2" 69) (list "70 - Sound Controller 1" 70) (list "71 - Sound Controller 2" 71) (list "72 - SoundController 3" 72) (list "73 - SoundController 4" 73) (list "74 - SoundController 5" 74) (list "75 - SoundController 6" 75) (list "76 - SoundController7" 76) (list "77 - SoundController8" 77) (list "78 - SoundController9" 78) (list "79 - SoundController10" 79) (list "84 - PortamentoControl" 84) (list "91 - Effects1Depth" 91) (list "92 - Effects2Depth" 92) (list "93 - Effects3Depth" 93) (list "94 - Effects4Depth" 94) (list "95 - Effects5Depth" 95) (list "96 - DataIncrement" 96))))) (om-make-point 365 98) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GM-PROGRAM" (quote gm-program) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Instrument name" "PROGNAME" 56 (list (list "0 - Acoustic Grand Piano" 0) (list "1 - Bright Acoustic Piano" 1) (list "2 - Electric Grand Piano" 2) (list "3 - Honki Tonk Piano" 3) (list "4 - Electric Piano 1" 4) (list "5 - Electric Piano 2" 5) (list "6 - Harpsichord" 6) (list "7 - Clavinet" 7) (list "8 - Celesta" 8) (list "9 - Glockenspiel" 9) (list "10 - Music Box" 10) (list "11 - Vibraphone" 11) (list "12 - Marimba" 12) (list "13 - Xylophone" 13) (list "14 - Tubular bells" 14) (list "15 - Dulcimer" 15) (list "16 - Drawbar Organ" 16) (list "17 - Percussive Organ" 17) (list "18 - Rock Organ" 18) (list "19 - Church Organ" 19) (list "20 - Reed Organ" 20) (list "21 - Accordion" 21) (list "22 - Harmonica" 22) (list "23 - Tango Accordion" 23) (list "24 - Nylon Acoustic Guitar" 24) (list "25 - Steel Acoustic Guitar" 25) (list "26 - Jazz Electric Guitar" 26) (list "27 - Clean Electric Guitar" 27) (list "28 - Muted Electric Guitar" 28) (list "29 - Overdrive Guitar" 29) (list "30 - Distorted Guitar" 30) (list "31 - Guitar Harmonics" 31) (list "32 - Acoustic Bass" 32) (list "33 - Electric Fingered Bass" 33) (list "34 - Electric Picked Bass" 34) (list "35 - Fretless Bass" 35) (list "36 - Slap Bass 1" 36) (list "37 - Slap Bass 2" 37) (list "38 - Synth Bass 1" 38) (list "39 - Synth Bass 2" 39) (list "40 - Violin" 40) (list "41 - Viola" 41) (list "42 - Cello" 42) (list "43 - Contrabass" 43) (list "44 - Tremolo Strings" 44) (list "45 - Pizzicato Strings" 45) (list "46 - Orchestral Harp" 46) (list "47 - Timpani" 47) (list "48 - String Ensemble 1" 48) (list "49 - String Ensemble 2" 49) (list "50 - Synth Strings 1" 50) (list "51 - Synth Strings 2" 51) (list "52 - Choir Aahs" 52) (list "53 - Voice Oohs" 53) (list "54 - Synth Voice" 54) (list "55 - Orchestra Hit" 55) (list "56 - Trumpet" 56) (list "57 - Trombone" 57) (list "58 - Tuba" 58) (list "59 - Muted Trumpet" 59) (list "60 - French Horn" 60) (list "61 - Brass Section" 61) (list "62 - Synth Brass 1" 62) (list "63 - Synth Brass 2" 63) (list "64 - Soprano Sax" 64) (list "65 - Alto Sax" 65) (list "66 - Tenor Sax" 66) (list "67 - Baritone Sax" 67) (list "68 - Oboe" 68) (list "69 - English Horn" 69) (list "70 - Bassoon" 70) (list "71 - Clarinet" 71) (list "72 - Piccolo" 72) (list "73 - Flute" 73) (list "74 - Recorder" 74) (list "75 - Pan Flute" 75) (list "76 - Bottle Blow" 76) (list "77 - Shakuhachi" 77) (list "78 - Whistle" 78) (list "79 - Ocarina" 79) (list "80 - Syn Square Wave" 80) (list "81 - Syn Sawtooth Wave" 81) (list "82 - Syn Calliope" 82) (list "83 - Syn Chiff" 83) (list "84 - Syn Charang" 84) (list "85 - Syn Voice" 85) (list "86 - Syn Fifths Sawtooth w-Wave" 86) (list "87 - Syn Brass and Lead" 87) (list "88 - New Age Syn Pad" 88) (list "89 - Warm Syn Pad" 89) (list "90 - Polysynth Syn Pad" 90) (list "91 - Choir Syn Pad" 91) (list "92 - Bowed Syn Pad" 92) (list "93 - Metal Syn Pad" 93) (list "94 - Halo Syn Pad" 94) (list "95 - Sweep Syn Pad" 95) (list "96 - FX Rain" 96) (list "97 - FX Soundtrack" 97) (list "98 - FX Crystal" 98) (list "99 - FX Atmosphere" 99) (list "100 - FX Brightness" 100) (list "101 - FX Goblins" 101) (list "102 - FX Echoes" 102) (list "103 - FX Sci-fi" 103) (list "104 - Sitar" 104) (list "105 - Banjo" 105) (list "106 - Shamisen" 106) (list "107 - Koto" 107) (list "108 - Kalimba" 108) (list "109 - Bag Pipe" 109) (list "110 - Fiddle" 110) (list "111 - Shanai" 111) (list "112 - Tinkle Bell" 112) (list "113 - Agogo" 113) (list "114 - Steel Drums" 114) (list "115 - Woodblock" 115) (list "116 - Taiko Drum" 116) (list "117 - Melodic Tom" 117) (list "118 - Syn Drum" 118) (list "119 - Reverse Cymbal" 119) (list "120 - Guitar Fret Noise" 120) (list "121 - Breath Noise" 121) (list "122 - Seashore" 122) (list "123 - Bird Tweet" 123) (list "124 - Telephone Ring" 124) (list "125 - Helicopter" 125) (list "126 - Applause" 126) (list "127 - Gun Shot" 127))))) (om-make-point 651 387) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GM-PROGRAM" (quote gm-program) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "Instrument name" "PROGNAME" 12 (list (list "0 - Acoustic Grand Piano" 0) (list "1 - Bright Acoustic Piano" 1) (list "2 - Electric Grand Piano" 2) (list "3 - Honki Tonk Piano" 3) (list "4 - Electric Piano 1" 4) (list "5 - Electric Piano 2" 5) (list "6 - Harpsichord" 6) (list "7 - Clavinet" 7) (list "8 - Celesta" 8) (list "9 - Glockenspiel" 9) (list "10 - Music Box" 10) (list "11 - Vibraphone" 11) (list "12 - Marimba" 12) (list "13 - Xylophone" 13) (list "14 - Tubular bells" 14) (list "15 - Dulcimer" 15) (list "16 - Drawbar Organ" 16) (list "17 - Percussive Organ" 17) (list "18 - Rock Organ" 18) (list "19 - Church Organ" 19) (list "20 - Reed Organ" 20) (list "21 - Accordion" 21) (list "22 - Harmonica" 22) (list "23 - Tango Accordion" 23) (list "24 - Nylon Acoustic Guitar" 24) (list "25 - Steel Acoustic Guitar" 25) (list "26 - Jazz Electric Guitar" 26) (list "27 - Clean Electric Guitar" 27) (list "28 - Muted Electric Guitar" 28) (list "29 - Overdrive Guitar" 29) (list "30 - Distorted Guitar" 30) (list "31 - Guitar Harmonics" 31) (list "32 - Acoustic Bass" 32) (list "33 - Electric Fingered Bass" 33) (list "34 - Electric Picked Bass" 34) (list "35 - Fretless Bass" 35) (list "36 - Slap Bass 1" 36) (list "37 - Slap Bass 2" 37) (list "38 - Synth Bass 1" 38) (list "39 - Synth Bass 2" 39) (list "40 - Violin" 40) (list "41 - Viola" 41) (list "42 - Cello" 42) (list "43 - Contrabass" 43) (list "44 - Tremolo Strings" 44) (list "45 - Pizzicato Strings" 45) (list "46 - Orchestral Harp" 46) (list "47 - Timpani" 47) (list "48 - String Ensemble 1" 48) (list "49 - String Ensemble 2" 49) (list "50 - Synth Strings 1" 50) (list "51 - Synth Strings 2" 51) (list "52 - Choir Aahs" 52) (list "53 - Voice Oohs" 53) (list "54 - Synth Voice" 54) (list "55 - Orchestra Hit" 55) (list "56 - Trumpet" 56) (list "57 - Trombone" 57) (list "58 - Tuba" 58) (list "59 - Muted Trumpet" 59) (list "60 - French Horn" 60) (list "61 - Brass Section" 61) (list "62 - Synth Brass 1" 62) (list "63 - Synth Brass 2" 63) (list "64 - Soprano Sax" 64) (list "65 - Alto Sax" 65) (list "66 - Tenor Sax" 66) (list "67 - Baritone Sax" 67) (list "68 - Oboe" 68) (list "69 - English Horn" 69) (list "70 - Bassoon" 70) (list "71 - Clarinet" 71) (list "72 - Piccolo" 72) (list "73 - Flute" 73) (list "74 - Recorder" 74) (list "75 - Pan Flute" 75) (list "76 - Bottle Blow" 76) (list "77 - Shakuhachi" 77) (list "78 - Whistle" 78) (list "79 - Ocarina" 79) (list "80 - Syn Square Wave" 80) (list "81 - Syn Sawtooth Wave" 81) (list "82 - Syn Calliope" 82) (list "83 - Syn Chiff" 83) (list "84 - Syn Charang" 84) (list "85 - Syn Voice" 85) (list "86 - Syn Fifths Sawtooth w-Wave" 86) (list "87 - Syn Brass and Lead" 87) (list "88 - New Age Syn Pad" 88) (list "89 - Warm Syn Pad" 89) (list "90 - Polysynth Syn Pad" 90) (list "91 - Choir Syn Pad" 91) (list "92 - Bowed Syn Pad" 92) (list "93 - Metal Syn Pad" 93) (list "94 - Halo Syn Pad" 94) (list "95 - Sweep Syn Pad" 95) (list "96 - FX Rain" 96) (list "97 - FX Soundtrack" 97) (list "98 - FX Crystal" 98) (list "99 - FX Atmosphere" 99) (list "100 - FX Brightness" 100) (list "101 - FX Goblins" 101) (list "102 - FX Echoes" 102) (list "103 - FX Sci-fi" 103) (list "104 - Sitar" 104) (list "105 - Banjo" 105) (list "106 - Shamisen" 106) (list "107 - Koto" 107) (list "108 - Kalimba" 108) (list "109 - Bag Pipe" 109) (list "110 - Fiddle" 110) (list "111 - Shanai" 111) (list "112 - Tinkle Bell" 112) (list "113 - Agogo" 113) (list "114 - Steel Drums" 114) (list "115 - Woodblock" 115) (list "116 - Taiko Drum" 116) (list "117 - Melodic Tom" 117) (list "118 - Syn Drum" 118) (list "119 - Reverse Cymbal" 119) (list "120 - Guitar Fret Noise" 120) (list "121 - Breath Noise" 121) (list "122 - Seashore" 122) (list "123 - Bird Tweet" 123) (list "124 - Telephone Ring" 124) (list "125 - Helicopter" 125) (list "126 - Applause" 126) (list "127 - Gun Shot" 127))))) (om-make-point 571 387) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 264 54) (quote "The MidiEvents are put in the maquette with other objects (double-click on \"mymaquette\" to see the result)") "" (om-make-point 132 623) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux12" (quote t) (quote nil) (om-make-point 415 598) (om-make-point 80 26) (list 100 0 3000) "(100 0 3000)" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 464 559) (om-make-point 113 37) nil nil nil 1) (om-load-boxcall (quote maqabs) "mymaquette" (om-load-maq-abs1 "mymaquette" (quote ((om-load-tempobj1 "tempobj3" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj3" :icon 913))) (setf (instance copy) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type 5 :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields (list 56) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil))) (setf (create-info copy) (quote (nil "2009/10/22 17:11:47"))) copy)) 0 3000 0 (om-make-color 26/85 26/51 194/255) nil t 33 99 1 0 (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj2" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj2" :icon 913))) (setf (instance copy) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type 5 :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields (list 12) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil))) (setf (create-info copy) (quote (nil "2009/10/22 17:11:47"))) copy)) 0 84 0 (om-make-color 26/85 26/51 194/255) nil t 33 67 1 0 (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil nil nil "") (om-load-tempobj1 "tempobj1" (quote nil) (list (quote yourobj) (let ((copy (make-instance (quote ominstance) :name "tempobj1" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6300) (6500) (6700) (6800) (6900) (7100) (7300) (7500))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((90) (90) (90) (90) (90) (90) (90) (90) (90) (90))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010003 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) (setf (doc copy) (str-with-nl "")) (setf (edition-params copy) (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil))) (setf (create-info copy) (quote (nil "2009/10/22 17:11:47"))) copy)) 0 100 10000 (om-make-color 26/85 26/51 194/255) nil t 33 33 1 0 (pairlis (quote (player show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx scale)) (list (quote :midishare) (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 nil)) nil nil nil nil nil nil ""))) (quote nil) (quote (0 10000 0 100)) (quote nil) (om-make-color 23/85 116/255 173/255) (quote ((4 60) ((4 4)) 16 t)) t 6.010003 nil "") (quote ((om-load-inputfun (quote input-funbox) "time rate number of offsets list" "time" 1000) (om-load-inputfun (quote input-funbox) "objects to put in maquette" "Objs" nil))) (om-make-point 474 624) nil nil "x" "mymaquette") (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000 6200 6300 6500 6700 6800 6900 7100 7300 7500)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 90)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 429 446) (om-make-point 75 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6300) (6500) (6700) (6800) (6900) (7100) (7300) (7500))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((90) (90) (90) (90) (90) (90) (90) (90) (90) (90))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.010003 nil ""))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 270 39) (quote "Example :$Change program of a channel while playing a maquette ") "" (om-make-point 129 433) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 256 24) (quote "Construct a MidiEvent object :") "" (om-make-point 127 363) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 654 449) (om-make-point 17 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 548 443) (om-make-point 15 24) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 147 40) (quote "A Chord-seq and two program change events -->") "" (om-make-point 253 498) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "MIDIEVENT" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote progchange) (list (list "Note" (quote (quote note))) (list "KeyOn " (quote (quote keyon))) (list "KeyOff" (quote (quote keyoff))) (list "KeyPress" (quote (quote keypress))) (list "CtrlChange" (quote (quote ctrlchange))) (list "ProgChange" (quote (quote progchange))) (list "ChanPress" (quote (quote chanpress))) (list "PitchWheel/PitchBend" (quote (quote pitchbend))) (list "SongPos" (quote (quote songpos))) (list "SongSel" (quote (quote songsel))) (list "Clock" (quote (quote clock))) (list "Start" (quote (quote start))) (list "Continue" (quote (quote continue))) (list "Stop" (quote (quote stop))) (list "Tune" (quote (quote tune))) (list "ActiveSens" (quote (quote activesens))) (list "Reset" (quote (quote reset))) (list "SysEx" (quote (quote sysex))) (list "Stream" (quote (quote stream))) (list "Private" (quote (quote private))) (list "Process" (quote (quote process))) (list "DProcess" (quote (quote dprocess))) (list "QFrame" (quote (quote qframe))) (list "Ctrl14b" (quote (quote ctrl14b))) (list "NonRegParam" (quote (quote nonregparam))) (list "RegParam" (quote (quote regparam))) (list "SeqNum" (quote (quote seqnum))) (list "Textual" (quote (quote textual))) (list "Copyright" (quote (quote copyright))) (list "SeqName" (quote (quote seqname))) (list "InstrName" (quote (quote instrname))) (list "Lyric" (quote (quote lyric))) (list "Marker" (quote (quote marker))) (list "CuePoint" (quote (quote cuepoint))) (list "ChanPrefix" (quote (quote chanprefix))) (list "EndTrack" (quote (quote endtrack))) (list "Tempo" (quote (quote tempo))) (list "SMPTEOffset" (quote (quote smpteoffset))) (list "TimeSign" (quote (quote timesign))) (list "KeySign" (quote (quote keysign))) (list "Specific" (quote (quote specific))) (list "PortPrefix" (quote (quote portprefix))) (list "RcvAlarm" (quote (quote rcvalarm))) (list "ApplAlarm" (quote (quote applalarm))) (list "Reserved" (quote (quote reserved))) (list "dead" (quote (quote dead))))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" (list 34)))) (om-make-point 526 480) (om-make-point 61 56) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type 5 :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields (list 12) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) nil nil nil nil) (om-load-editor-box1 "MIDIEVENT" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote progchange) (list (list "Note" (quote (quote note))) (list "KeyOn " (quote (quote keyon))) (list "KeyOff" (quote (quote keyoff))) (list "KeyPress" (quote (quote keypress))) (list "CtrlChange" (quote (quote ctrlchange))) (list "ProgChange" (quote (quote progchange))) (list "ChanPress" (quote (quote chanpress))) (list "PitchWheel/PitchBend" (quote (quote pitchbend))) (list "SongPos" (quote (quote songpos))) (list "SongSel" (quote (quote songsel))) (list "Clock" (quote (quote clock))) (list "Start" (quote (quote start))) (list "Continue" (quote (quote continue))) (list "Stop" (quote (quote stop))) (list "Tune" (quote (quote tune))) (list "ActiveSens" (quote (quote activesens))) (list "Reset" (quote (quote reset))) (list "SysEx" (quote (quote sysex))) (list "Stream" (quote (quote stream))) (list "Private" (quote (quote private))) (list "Process" (quote (quote process))) (list "DProcess" (quote (quote dprocess))) (list "QFrame" (quote (quote qframe))) (list "Ctrl14b" (quote (quote ctrl14b))) (list "NonRegParam" (quote (quote nonregparam))) (list "RegParam" (quote (quote regparam))) (list "SeqNum" (quote (quote seqnum))) (list "Textual" (quote (quote textual))) (list "Copyright" (quote (quote copyright))) (list "SeqName" (quote (quote seqname))) (list "InstrName" (quote (quote instrname))) (list "Lyric" (quote (quote lyric))) (list "Marker" (quote (quote marker))) (list "CuePoint" (quote (quote cuepoint))) (list "ChanPrefix" (quote (quote chanprefix))) (list "EndTrack" (quote (quote endtrack))) (list "Tempo" (quote (quote tempo))) (list "SMPTEOffset" (quote (quote smpteoffset))) (list "TimeSign" (quote (quote timesign))) (list "KeySign" (quote (quote keysign))) (list "Specific" (quote (quote specific))) (list "PortPrefix" (quote (quote portprefix))) (list "RcvAlarm" (quote (quote rcvalarm))) (list "ApplAlarm" (quote (quote applalarm))) (list "Reserved" (quote (quote reserved))) (list "dead" (quote (quote dead))))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" (list 34)))) (om-make-point 616 480) (om-make-point 60 56) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type 5 :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields (list 56) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 400 37) (quote "Set parametters (type, date, track, port, channel, values).$MidiEvent must be evaluated before sending.") "" (om-make-point 128 388) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 165 70) (quote "Try to play this note (set to channel 1) (\"P\" key) several times with sending midi events between each time") "" (om-make-point 591 229) nil (om-make-color 23/51 16/255 16/255) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "no documentation" "VEL" 80) (om-load-inputfun (quote input-funbox) "no documentation" "DUR" 1000) (om-load-inputfun (quote input-funbox) "no documentation" "CHAN" 1))) (om-make-point 622 146) (om-make-point 55 65) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil)) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 29 26) (quote "...") "" (om-make-point 506 175) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 171 71) (quote "Send a ControlChange event for a channel$(e.g. : control Change 10 = pan)") "" (om-make-point 390 237) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 466 119) (om-make-point 23 20) 0 "0" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 484 140) (om-make-point 11 20) 1 "1" nil) (om-load-boxcall (quote genfun) "CTRLCHG" (quote ctrlchg) (quote ((om-load-inputfun (quote input-funbox) "control number" "CTRLNUM" 7) (om-load-inputfun (quote input-funbox) "value" "VAL" 100) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1))) (om-make-point 417 168) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 83 68) (quote "Change PitchBend for a channel") "" (om-make-point 293 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 303 139) (om-make-point 23 20) 60 "60" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 335 139) (om-make-point 11 20) 1 "1" nil) (om-load-boxcall (quote genfun) "PITCHBEND" (quote pitchbend) (quote ((om-load-inputfun (quote input-funbox) "bend value" "VALUES" 127) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1))) (om-make-point 299 169) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 83 62) (quote "Change volume for a channel") "" (om-make-point 193 234) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 206 138) (om-make-point 23 20) 60 "60" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 235 139) (om-make-point 11 20) 1 "1" nil) (om-load-boxcall (quote genfun) "VOLUME" (quote volume) (quote ((om-load-inputfun (quote input-funbox) "value" "VOL" 100) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1))) (om-make-point 211 169) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 83 62) (quote "Change Midi program (instrument) for a channel") "" (om-make-point 90 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 131 142) (om-make-point 17 20) 1 "1" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 1) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 15))) (om-make-point 103 168) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 372 27) (quote "Send a midi event dynamicly evaluating the following boxes :") "" (om-make-point 122 61) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 215 41) (quote "Using MIDI events") "" (om-make-point 355 13) nil (om-make-color 0 0 0) (om-make-font "Geneva" 14 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (quote ((9 0 7 0 nil 0) (15 0 7 1 nil 0) (16 0 7 2 nil 0) (6 0 8 0 nil 0) (7 0 8 1 nil 0) (13 0 15 5 nil 0) (4 0 15 6 nil 0) (12 0 16 5 nil 0) (3 0 16 6 nil 0) (1 0 19 4 nil 0) (2 0 24 0 nil 0) (22 0 24 1 nil 0) (23 0 24 2 nil 0) (26 0 28 0 nil 0) (27 0 28 1 nil 0) (30 0 32 0 nil 0) (31 0 32 1 nil 0) (0 0 35 0 nil 0) (34 0 35 1 nil 0))) nil 6.010003))
