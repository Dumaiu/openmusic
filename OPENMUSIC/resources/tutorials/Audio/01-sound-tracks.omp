; OM File Header - Saved 2009/10/22 17:11:45
; (6.010003 :patc (om-make-point 55 51) (om-make-point 207 328) (om-make-point 527 413) "non documentation" 183 0 nil "2009/10/22 17:10:47")
; End File Header
; External resources 
; (list (list (quote :sound) "../../in-files/pulse3a.aiff" "../../in-files/pulse1b.aiff"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-sound-tracks" (quote ((om-load-boxcomment "comment" (om-make-point 139 58) (quote "Eval and double click to acces the mixin console interface") "" (om-make-point 294 307) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 219 136) (om-make-point 12 22) 2 "2" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 119 136) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 243 260) (om-make-point 16 26) 2 "2" nil) (om-load-boxcomment "comment" (om-make-point 150 34) (quote "<-- Number of tracks") "" (om-make-point 265 254) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 57 27) (quote "SOUND") "" (om-make-point 15 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 143 27) (quote "AUDIO-MIX-CONSOLE") "" (om-make-point 17 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "AUDIO-MIX-CONSOLE" (quote audio-mix-console) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "NBTRACKS" 2))) (om-make-point 187 288) (om-make-point 91 61) (let ((rep (make-instance (quote audio-mix-console) :nbtracks (quote 2)))) (setf (channels-ctrl rep) (list (if (find-class (quote audio-channel-ctrl) nil) (make-instance (quote audio-channel-ctrl) :track 1 :pan-ctrl 0 :vol-ctrl 100 :from-file t)) (if (find-class (quote audio-channel-ctrl) nil) (make-instance (quote audio-channel-ctrl) :track 2 :pan-ctrl 0 :vol-ctrl 100 :from-file t)))) rep) nil nil (pairlis (quote (player palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list (quote :midishare) 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 209 56) (quote "The track number can be set using the 2nd input of the sound box or inside the sound editor") "" (om-make-point 276 161) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 209 56) (quote "Sounds can be assigned an audio track in order to be controlled by a mixing console") "" (om-make-point 124 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 69 29) (quote "Tracks") "" (om-make-point 176 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SOUND1" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 2) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 179 159) (om-make-point 88 65) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "pulse3a" :type "aiff") 2))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list (quote :midishare) 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 79 159) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "pulse1b" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list (quote :midishare) 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil)) t nil nil nil))) (quote ((3 0 7 1 nil 0) (1 0 11 1 nil 0) (2 0 12 1 nil 0))) nil 6.010003))
