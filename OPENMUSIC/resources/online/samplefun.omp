; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 847 786) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "samplefun" (quote ((let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "other_examples" (quote ((let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 8))) (om-make-point 392 201) (om-make-point 143 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 169.99999 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 339.99997 350.0 360.0 370.0 379.99997 390.0 400.0 409.99997 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 609.99994 620.0 630.0 640.0 650.0 660.0 670.0 679.99994 690.0 700.0)) (quote (0.0 100.33467 202.71004 309.33627 422.79324 546.3025 684.13685 842.28846 1029.6387 1260.1585 1557.4081 1964.7603 2572.1529 3602.1053 5797.891 14101.467 -34232.223 -7696.585 -4286.256 -2927.0943 -2185.0386 -1709.8461 -1373.8229 -1119.2138 -916.0145 -747.0227 -601.59705 -472.72815 -355.53043 -246.40605 -142.54729 -41.61747 58.47295 159.74472 264.31574 374.5843 493.46512 624.73114 773.5537 947.42164 1157.8174 1423.5219 1777.7732 2285.8372 3096.3047 4637.289 8860.016 80699.09 -11385.157 -5267.559 -3380.5447 -2449.407 -1885.6536 -1501.2821 -1217.5476 -995.58967 -813.94825 -659.735 -524.6702 -403.1147 -291.00983 -185.26578 -83.38126 16.812653 117.34517 220.27318 327.85367 442.75262 568.3346 709.10486 871.4404)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 494 168) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 338 169) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 8))) (om-make-point 236 202) (om-make-point 143 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 169.99999 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 339.99997 350.0 360.0 370.0 379.99997 390.0 400.0 409.99997 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 609.99994 620.0 630.0 640.0 650.0 660.0 670.0 679.99994)) (quote (-1609.438 -1203.9728 -916.2908 -693.14716 -510.82553 -356.67487 -223.14348 -105.36041 1.192093E-4 95.31032 182.3217 262.3644 336.47238 405.46527 470.00378 530.6284 587.78687 641.8541 693.1473 741.93744 788.4574 832.9091 875.46875 916.2907 955.5113 993.25165 1029.6193 1064.7105 1098.612 1131.4019 1163.1505 1193.9221 1223.7752 1252.7627 1280.9335 1308.3324 1335.0007 1360.9762 1386.2941 1410.9867 1435.0842 1458.6148 1481.6043 1504.077 1526.0559 1547.5621 1568.6156 1589.2349 1609.4375 1629.2401 1648.6582 1667.7064 1686.3986 1704.7477 1722.7661 1740.4657 1757.8574 1774.9519 1791.759 1808.2882 1824.5487 1840.5491 1856.2975 1871.8016 1887.0692 1902.107 1916.9221 1931.5209 1945.9096)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 8))) (om-make-point 76 201) (om-make-point 143 93) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 169.99999 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 339.99997 350.0 360.0 370.0 379.99997 390.0 400.0 409.99997 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 609.99994 620.0 630.0 640.0 650.0 660.0 670.0 679.99994 690.0 700.0)) (quote (1000.0 1105.171 1221.4027 1349.8589 1491.8247 1648.7212 1822.1189 2013.7527 2225.541 2459.6033 2718.2823 3004.1663 3320.1175 3669.2976 4055.2012 4481.69 4953.0337 5473.9487 6049.6494 6685.897 7389.0576 8166.1704 9025.014 9974.182 11023.175 12182.491 13463.733 14879.727 16444.637 18174.133 20085.522 22197.934 24532.51 27112.612 29964.069 33115.415 36598.188 40447.247 44701.118 49402.37 54598.063 60340.196 66686.23 73699.67 81450.72 90016.96 99484.12 109946.946 121510.16 134289.47 148412.82 164021.5 181271.78 200336.27 221405.82 244691.24 270425.6 298866.5 330298.53 365036.28 403427.47 445856.22 492747.3 544569.94 601842.75 665139.1 735092.3 812402.57 897843.6 992270.57 1096628.4)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 178 168) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1) (om-load-inputfun (quote input-funbox) "min" "XMIN" 0.2))) (om-make-point 272 92) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-LOG" (quote om-log) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 276 39) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1))) (om-make-point 146 92) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1))) (om-make-point 390 90) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TAN" (quote tan) (quote ((om-load-inputfun (quote input-funbox) "RADIANS" "RADIANS" nil))) (om-make-point 398 42) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-E" (quote om-e) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 155 38) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 493 479) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 219 474) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 8))) (om-make-point 329 509) (om-make-point 210 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 169.99999 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 339.99997 350.0 360.0 370.0 379.99997 390.0 400.0 409.99997 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 609.99994 620.0 630.0 640.0 650.0 660.0 670.0 679.99994 690.0 700.0)) (quote (0.0 93.64761 207.2149 274.16428 364.06824 479.49744 571.9775 734.3399 810.2945 952.6999 1086.6537 1166.942 1228.0252 1183.618 1315.4513 1480.0365 1449.5368 1791.7029 1752.9373 2079.865 1997.8497 2234.3164 2339.413 2361.7793 2353.543 2378.1265 2547.239 2821.5965 2772.8892 3143.0716 2850.3885 3241.2178 2920.1844 3323.174 3311.9778 3614.8784 3280.4075 3669.469 3475.034 4123.2456 4397.231 3785.856 4427.1504 4469.6704 4299.4424 4568.8 4219.316 4681.052 4712.357 4416.1255 5435.124 4971.019 4725.4966 5064.778 5717.3555 5219.6836 5281.3423 5631.5537 6049.3584 5724.292 6270.2637 6487.5894 6014.6846 6664.537 5824.2105 6597.1065 6354.5615 6617.0615 7173.2974 6927.1397 7013.5005)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 442 337) (om-make-point 35 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERTURBATION" (quote perturbation) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 3) (om-load-inputfun (quote input-funbox) "number or tree" "PERCENT" 0.1))) (om-make-point 414 381) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1))) (om-make-point 414 438) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 135 332) (om-make-point 34 30) (quote sin) "sin" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.02))) (om-make-point 139 382) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERTURBATION" (quote perturbation) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 3) (om-load-inputfun (quote input-funbox) "number or tree" "PERCENT" 0.1))) (om-make-point 151 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 207 405) (om-make-point 35 30) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 8))) (om-make-point 55 504) (om-make-point 210 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 29.999999 40.0 50.0 59.999997 70.0 80.0 90.0 100.0 110.0 119.99999 130.0 140.0 150.0 160.0 169.99999 180.0 189.99999 200.0 210.0 220.0 230.0 239.99999 250.0 260.0 269.99997 280.0 290.0 300.0 310.0 320.0 330.0 339.99997 350.0 360.0 370.0 379.99997 390.0 400.0 409.99997 420.0 430.0 440.0 450.0 460.0 469.99997 479.99997 489.99997 500.0 510.0 520.0 530.0 539.99994 550.0 560.0 570.0 580.0 590.0 600.0 609.99994 620.0 630.0 640.0 650.0 660.0 670.0 679.99994 690.0 700.0 710.0 720.0 730.0 740.0 749.99994 759.99994 770.0 780.0 790.0 800.0 810.0 819.99994 829.99994 840.0 850.0 860.0 870.0 880.0 889.99994 900.0 910.0 920.0 930.0 939.99994 950.0 959.99994 970.0 979.99994 990.0 1000.0 1009.99994 1020.0 1030.0 1040.0 1050.0 1060.0 1070.0 1079.9999 1090.0 1100.0 1110.0 1120.0 1130.0 1140.0 1149.9999 1160.0 1170.0 1180.0 1190.0 1200.0 1210.0 1219.9999 1230.0 1240.0 1250.0 1260.0 1270.0 1280.0 1289.9999 1300.0 1310.0 1320.0 1330.0 1340.0 1350.0 1359.9999 1370.0 1380.0 1390.0 1400.0 1410.0 1420.0 1429.9999 1440.0 1449.9999 1460.0 1470.0 1480.0 1490.0 1499.9999 1510.0 1519.9999 1530.0 1540.0 1550.0 1560.0 1569.9999 1580.0 1589.9999 1600.0 1610.0 1620.0 1630.0 1639.9999 1650.0 1659.9999 1670.0 1680.0 1690.0 1700.0 1709.9999 1720.0 1729.9999 1740.0 1750.0 1760.0 1770.0001 1779.9999 1790.0 1800.0 1809.9999 1820.0 1830.0 1840.0 1849.9999 1860.0 1870.0 1879.9999 1890.0 1900.0 1910.0 1919.9999 1930.0 1940.0 1949.9999 1959.9999 1970.0 1980.0 1989.9999 2000.0 2010.0 2019.9999 2029.9999 2040.0 2050.0 2060.0 2070.0 2080.0 2089.9998 2100.0 2110.0 2120.0 2130.0 2140.0 2150.0 2159.9998 2170.0 2180.0 2190.0 2200.0 2210.0 2220.0 2229.9998 2240.0 2250.0 2260.0 2270.0 2280.0 2290.0 2299.9998 2310.0 2320.0 2330.0 2340.0 2350.0 2360.0 2369.9998 2380.0 2390.0 2400.0 2410.0 2420.0 2430.0 2439.9998 2450.0 2460.0 2470.0 2480.0 2490.0 2500.0 2509.9998 2520.0 2530.0 2540.0 2550.0 2560.0 2570.0 2579.9998 2590.0 2600.0 2610.0 2620.0 2630.0 2640.0 2649.9998 2660.0 2670.0 2680.0 2690.0 2700.0 2710.0 2719.9998 2730.0 2740.0 2750.0 2760.0 2770.0 2780.0 2789.9998 2800.0 2810.0 2820.0 2830.0 2840.0 2850.0 2859.9998 2870.0 2880.0 2890.0 2899.9998 2910.0 2920.0 2929.9998 2940.0 2950.0 2960.0 2969.9998 2980.0 2990.0 2999.9998 3010.0 3020.0 3030.0 3039.9998 3050.0 3060.0 3069.9998 3080.0 3090.0 3100.0 3109.9998 3120.0 3130.0 3139.9998 3150.0 3160.0 3170.0 3179.9998 3190.0 3200.0 3209.9998 3220.0 3230.0 3240.0 3249.9998 3260.0 3270.0 3279.9998 3290.0 3300.0 3310.0 3319.9998 3330.0 3340.0 3349.9998 3360.0 3370.0 3380.0 3389.9998 3400.0 3410.0 3419.9998 3430.0 3440.0 3450.0 3459.9998 3470.0 3480.0 3489.9998 3500.0 3510.0 3520.0 3530.0 3540.0003 3549.9998 3559.9998 3570.0 3580.0 3590.0 3600.0 3610.0003 3619.9998 3629.9998 3640.0 3650.0 3660.0 3670.0 3680.0 3689.9998 3699.9998 3710.0 3720.0 3730.0 3740.0 3750.0 3759.9998 3769.9998 3780.0 3790.0 3800.0 3810.0 3820.0 3829.9998 3839.9998 3849.9998 3860.0 3870.0 3880.0 3890.0 3899.9998 3909.9998 3919.9998 3930.0 3940.0 3950.0 3960.0 3969.9998 3979.9998 3989.9998 4000.0 4010.0 4020.0 4030.0 4039.9998 4049.9998 4059.9998 4070.0 4080.0 4090.0 4100.0 4109.9995 4120.0 4130.0 4140.0 4150.0 4160.0 4170.0 4179.9995 4190.0 4200.0 4210.0 4220.0 4230.0 4240.0 4249.9995 4260.0 4270.0 4280.0 4290.0 4300.0 4310.0 4319.9995 4330.0 4340.0 4350.0 4360.0 4370.0 4380.0 4389.9995 4400.0 4410.0 4420.0 4430.0 4440.0 4450.0 4459.9995 4470.0 4480.0 4490.0 4500.0 4510.0 4520.0 4529.9995 4540.0 4550.0 4560.0 4570.0 4580.0 4590.0 4599.9995 4610.0 4620.0 4630.0 4640.0 4650.0 4660.0 4669.9995 4680.0 4690.0 4700.0 4710.0 4720.0 4730.0 4739.9995 4750.0 4760.0 4770.0 4780.0 4790.0 4800.0 4809.9995 4820.0 4830.0 4840.0 4850.0 4860.0 4870.0 4879.9995 4890.0 4900.0 4910.0 4920.0 4930.0 4940.0 4949.9995 4960.0 4970.0 4980.0 4990.0)) (quote (0.0 0.017827772 0.042018406 0.065433055 0.073441215 0.09794159 0.11416078 0.121084325 0.1510862 0.17615289 0.18728318 0.20640184 0.19570428 0.21977838 0.31028107 0.31018373 0.27243894 0.34176758 0.4091097 0.43157935 0.39256862 0.33166873 0.41040257 0.47506177 0.49785498 0.5459018 0.5459487 0.6069002 0.6267443 0.4556421 0.64157486 0.6063882 0.52671284 0.6269713 0.67526824 0.6843352 0.5563119 0.5802337 0.74560965 0.7513204 0.78389 0.60480106 0.653683 0.6347914 0.75291586 0.70119364 0.9090466 0.77109796 0.9630297 0.9014186 0.8559548 0.8851965 0.7365954 0.7810955 1.0548567 0.8675238 0.786091 0.87693805 1.0829903 0.94747496 0.94521827 1.0799694 0.77236504 0.83467925 0.9291646 0.9863452 0.83401084 1.0044184 0.7998036 0.9742046 1.0060741 0.9890628 1.0377941 0.9747351 0.8434326 0.86533654 1.0575441 1.0656184 0.85149915 0.81196094 0.86350257 1.1602898 1.0022248 1.0414108 1.079785 1.051437 0.94800765 1.175452 0.8815437 1.0987291 1.0473347 0.85128695 0.84299917 0.85231066 0.85080797 1.0162619 0.9947056 0.82494605 0.96627796 1.0587776 0.91722197 0.90655917 1.0592382 1.0144674 0.8547179 0.72808397 0.9379679 0.9953343 0.8782033 0.9284274 0.700012 0.84649396 0.866268 0.694728 0.8291255 0.61483574 0.66331435 0.6968012 0.59439415 0.60881645 0.63864935 0.57877726 0.75643 0.50460786 0.508291 0.59129 0.58000416 0.6563169 0.48913762 0.62157447 0.5364079 0.45961723 0.56911934 0.40659723 0.5017384 0.455667 0.45211136 0.36670247 0.41364676 0.4125458 0.3780377 0.2643368 0.2910449 0.24140552 0.29783407 0.2034567 0.19240473 0.18352644 0.19525606 0.1399658 0.14369811 0.11825494 0.10259477 0.08106513 0.06962919 0.04116846 0.018686684 0.001715855 -0.015553075 -0.044089064 -0.04890488 -0.085561835 -0.100453705 -0.12528569 -0.124459125 -0.13289637 -0.20819663 -0.16789794 -0.24764632 -0.212519 -0.26127508 -0.23387589 -0.26863882 -0.3445133 -0.3719635 -0.3815596 -0.3570912 -0.4391877 -0.41335782 -0.44716033 -0.38579577 -0.3704771 -0.40090355 -0.39887992 -0.47838688 -0.6066106 -0.570864 -0.5520193 -0.6777313 -0.6193857 -0.70769674 -0.5529242 -0.5212632 -0.65068257 -0.79393995 -0.6534089 -0.6181013 -0.8517179 -0.7587958 -0.7561936 -0.61111445 -0.87281144 -0.7311337 -0.7483494 -0.8251704 -0.82940424 -0.8433747 -0.94783825 -0.91602004 -0.71879 -0.911079 -0.92072785 -0.9657085 -0.99377376 -0.8343285 -1.0106006 -0.74942744 -0.9688118 -0.9875087 -0.872281 -1.1060923 -1.0448698 -0.9245265 -0.8786698 -0.930671 -0.96341604 -1.0360296 -0.9098129 -0.92320574 -0.8964248 -0.8884999 -1.0038382 -1.0488632 -0.897485 -1.1160852 -1.0891434 -1.1435588 -0.9235594 -0.83508224 -1.1533381 -0.8809307 -0.82728237 -0.8845738 -0.99084187 -1.0331396 -1.0227343 -0.8983824 -1.1154525 -0.9356415 -0.77687967 -0.96257627 -0.87984324 -1.0828769 -1.0446539 -0.947781 -0.9124377 -0.94861854 -0.78113276 -0.8223619 -0.85443706 -1.0075878 -1.0168755 -0.89169693 -0.78425617 -0.9084708 -0.94602156 -0.72759557 -0.7711874 -0.92505396 -0.6448728 -0.8933606 -0.61186874 -0.78986937 -0.82615453 -0.6372014 -0.73015804 -0.60208017 -0.75990344 -0.7557054 -0.52950287 -0.7031899 -0.63763124 -0.65446175 -0.49307555 -0.48656875 -0.46267685 -0.6247507 -0.60791034 -0.5263008 -0.5668236 -0.41644493 -0.39489016 -0.3675891 -0.4566798 -0.34899846 -0.40746012 -0.29075125 -0.36585525 -0.28034273 -0.33201402 -0.23503457 -0.28277344 -0.23692554 -0.24778791 -0.16941467 -0.14835689 -0.19309996 -0.1667955 -0.12973716 -0.09844854 -0.08387643 -0.07020647 -0.038326815 -0.02442955 -0.0026298487 0.013796645 0.034743104 0.05723753 0.07421976 0.1116501 0.13676137 0.14121907 0.16740029 0.15167423 0.20394312 0.21276695 0.22925292 0.296194 0.2459384 0.29932544 0.2616501 0.3234937 0.3135452 0.3783491 0.39641047 0.45480347 0.3996788 0.38337582 0.40319875 0.4691162 0.48337138 0.48243758 0.53294427 0.62656224 0.63607735 0.668519 0.54678274 0.58311594 0.6755259 0.5564245 0.7782348 0.79770256 0.7594868 0.8074889 0.7294455 0.8635221 0.60303385 0.714328 0.89395434 0.7494243 0.68073547 0.68270505 0.68663204 0.9397749 0.9680423 0.7825858 0.7201177 0.8580162 1.0389776 0.83666045 0.9877422 0.8044613 0.946875 1.0523452 1.0804306 0.8832251 0.96725107 1.0294287 0.9834667 0.9638951 1.0863725 1.0983095 1.0349223 1.060871 0.87384844 1.0068748 0.8242334 0.9746652 1.1408637 1.1568112 1.1284378 0.84872574 1.0187576 0.8833066 1.0645673 1.1763703 0.9460419 1.1054692 0.8685015 0.9717954 0.7933424 1.1662943 0.86464757 1.1642405 1.0853148 1.0147605 0.9525713 0.8050527 0.79997457 0.7732777 0.93432343 0.83207745 1.0402961 0.81694365 0.82586575 0.96192337 0.8249202 0.8832633 0.9887401 0.923902 0.97950066 0.89361585 0.7995019 0.77441454 0.8765101 0.7717215 0.8048684 0.81501025 0.7662131 0.84421707 0.7806348 0.80808616 0.7376335 0.8269885 0.55138147 0.6974383 0.74394465 0.7514512 0.7115509 0.68654687 0.60282314 0.5182131 0.5598689 0.5920248 0.5124224 0.505434 0.5614887 0.54286415 0.3726471 0.43078163 0.3302614 0.36091372 0.30113694 0.30055165 0.37959895 0.32749814 0.2623319 0.22554842 0.25268474 0.24100736 0.21738184 0.2424936 0.21700728 0.17170416 0.15934202 0.13754064 0.10760204 0.09126023 0.07219895 0.04595901 0.021986317 0.0048963544 -0.014205592 -0.037698888 -0.047636267 -0.07976794 -0.09531027 -0.09951408 -0.122434534 -0.16092792 -0.17897854 -0.15888547 -0.17119566 -0.21077842 -0.2665255 -0.29966795 -0.25918806 -0.34077105 -0.3681091 -0.3064623 -0.37617704 -0.42502823 -0.39566553 -0.3502396 -0.37856883 -0.47728342 -0.42011958 -0.5759315 -0.4334855 -0.4275193)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 2 nil 0) (1 0 0 3 nil 0) (6 0 3 2 nil 0) (2 0 3 3 nil 0) (8 0 4 2 nil 0) (5 0 4 3 nil 0) (7 0 6 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (17 0 14 2 nil 0) (12 0 14 3 nil 0) (15 0 16 1 nil 0) (16 0 17 0 nil 0) (18 0 19 0 nil 0) (19 0 20 0 nil 0) (21 0 20 1 nil 0) (20 0 22 2 nil 0) (13 0 22 3 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 698 677)) (quote nil) (om-make-point 695 479) nil nil nil "other_examples"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 213 44) (quote "This other example shows the use of a  lambda function ") "" (om-make-point 417 669) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 213 44) (quote "This examples shows the use of a sine function (sin symbol) with the default values.") "" (om-make-point 142 666) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 413 565) (om-make-point 210 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70)) (quote (60000 85785 18326 68007 62762 93407 23843 71471 96290 61339 80288 12254 81692 87553 16481 8244 51643 82724 30359 82791 60498 91548 93021 59362 56164 5128 64698 6194 59191 22137 27762 24047 50575 50517 57366 85403 52934 24099 31577 80039 87392 84890 29679 90167 67432 23709 81661 69899 69057 27755 53834 34035 6575 41585 44660 38303 68839 28121 50532 47822 47892 6235 77009 51140 66616 41912 73096 56449 39802 88478 24922)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 327 525) (om-make-point 26 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 148 563) (om-make-point 210 96) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 89.99999 100.0 110.00001 120.0 130.0 140.0 150.0 160.0 170.0 179.99999 190.0 200.0 210.0 220.00002 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 359.99997 370.0 380.0 389.99997 400.0 410.00003 420.0 430.0 440.00003 450.0 460.0 469.99997 480.0 490.00003 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.00007 700.0 710.0 719.99994 730.0 740.0 749.99994 760.0 770.0 779.99994 790.0 800.0 810.0 820.00007 830.0 840.0 850.00007 860.0 870.0 880.00007 890.0 900.0 909.99994 920.0 930.0 939.99994 950.0 960.0 970.0 980.00007 990.0)) (quote (0.0 0.09983342 0.19866932 0.29552022 0.38941833 0.47942555 0.5646425 0.6442177 0.71735615 0.783327 0.841471 0.89120734 0.93203915 0.96355826 0.98544974 0.99749494 0.9995736 0.9916648 0.9738476 0.9463 0.90929735 0.8632093 0.8084963 0.7457053 0.67546326 0.59847236 0.5155017 0.4273803 0.33498865 0.23924992 0.14112072 0.04158147 -0.05837324 -0.15774472 -0.25554004 -0.35078213 -0.44251928 -0.529835 -0.6118567 -0.68776507 -0.7568014 -0.8182762 -0.87157494 -0.9161652 -0.9516015 -0.9775297 -0.9936908 -0.9999232 -0.9961648 -0.98245305 -0.95892495 -0.9258157 -0.8834558 -0.8322689 -0.77276624 -0.7055423 -0.6312689 -0.5506881 -0.46460497 -0.37387967 -0.2794187 -0.18216588 -0.08309292 0.01681028 0.11654552 0.21511626 0.31153765 0.40484625 0.49410975 0.5784363 0.6569834 0.72896606 0.7936651 0.8504342 0.898706 0.9379983 0.96791846 0.98816747 0.99854315 0.9989416 0.989359 0.96989114 0.94073225 0.9021738 0.85460115 0.79848934 0.73439944 0.6629715 0.58491934 0.5010228 0.41212025 0.3190998 0.22289104 0.12445518 0.02477581 -0.07515113 -0.17432714 -0.27176136 -0.3664802 -0.4575373)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF2") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1))) (om-make-point 215 482) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 198 449) (om-make-point 34 30) (quote sin) "sin" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 241 450) (om-make-point 35 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN1" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sin)) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.1) (om-load-inputfun (quote input-funbox) "min" "XMIN" 0) (om-load-inputfun (quote input-funbox) "max" "XMAX" 7))) (om-make-point 436 480) (om-make-point 202 55) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 463 387) (om-make-point 38 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 438 420) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 500 445) (om-make-point 35 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 545 444) (om-make-point 26 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 588 444) (om-make-point 26 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 143 32) (quote "samplefun") "" (om-make-point 312 10) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 405 330) (quote "INPUTS$fun         symbol,  function or Om-lambda-patch$step        number$$OPTIONAL INPUTS$xmin        number$xmamx   number$coeff       number$$FIRST OUTPUT$returns the list of values of fun   as sampled from xmin  to xmax  by  step. Values are multiplied by <coeff>$$SECOND OUTPUT$returns a bpf object that can be directly connected to the left input of a bpf factory$$The default values are:$<fun>     sin$<step>  0.1$<xmin>  0$<xmax>  7$<coeff>  1000$") "" (om-make-point 183 50) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 1 3 0 nil 0) (6 0 5 2 nil 0) (4 0 5 3 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (11 0 9 0 nil 0) (12 0 9 1 nil 0) (13 0 9 2 nil 0) (14 0 9 3 nil 0) (10 0 11 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 53 62)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
