;fileheader
; (5.11 :patc (om-make-point 334 670) (om-make-point 9 44) (om-make-point 595 766) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "samplefun" '((om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs1 "other_examples" '((om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 8)) (om-make-point 392 201) (om-make-point 143 93) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0) '(0.0 100.33467208545055 202.7100355086725 309.3362496096233 422.7932187381618 546.3024898437905 684.1368083416924 842.2883804630794 1029.638557050364 1260.158217550339 1557.4077246549018 1964.7596572486514 2572.1516221263187 3602.1024479679786 5797.883715482894 14101.419947171764 -34232.53273555705 -7696.602139459135 -4286.261674628055 -2927.0975146777673 -2185.039863261516 -1709.8465429045054 -1373.8230567687935 -1119.2136417341305 -916.014289673409 -747.0222972386589 -601.5966130897574 -472.72762910303624 -355.52983165117456 -246.40539397196494 -142.54654307427646 -41.61665458563456 58.47385445957998 159.74574766003406 264.3169008674271 374.5856401585967 493.466729984906 624.7330752245664 773.5560905031293 947.4246499358968 1157.8212823495817 1423.52648319437 1777.7797745088455 2285.847877366986 3096.3237806497455 4637.332054551185 8860.174895648046 80712.76296746898 -11384.870654243037 -5267.493065826788 -3380.5150062466078 -2449.389415584611 -1885.6418775197762 -1501.2733958069387 -1217.540824620564 -995.584052213892 -813.9432836897086 -659.7305715207826 -524.6662219468059 -403.11089987323237 -291.0061913847549 -185.26223068914078 -83.37771486593489 16.816277694175838 117.3489474610743 220.27720034588936 327.85800671312563 442.75741673270664 568.3399786900458 709.1111506796803 871.4479827243031) 'bpf 16))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 494 168) (om-make-point 31 25) 16 "16" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 338 169) (om-make-point 31 25) 16 "16" nil) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 8)) (om-make-point 236 202) (om-make-point 143 93) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0) '(-1609.4379124341003 -1203.9728043259358 -916.290731874155 -693.1471805599452 -510.8256237659907 -356.67494393873244 -223.14355131420984 -105.36051565782641 -1.11E-13 95.31017980432475 182.32155679395458 262.36426446749107 336.472236621213 405.46510810816454 470.00362924573574 530.6282510621706 587.7866649021192 641.853886172395 693.1471805599455 741.9373447293775 788.4573603642705 832.9091229351043 875.4687373539003 916.2907318741554 955.5114450274367 993.2517730102837 1029.6194171811585 1064.7107369924288 1098.6122886681103 1131.402111491101 1163.1508098056813 1193.922468472435 1223.775431622116 1252.7629684953686 1280.933845462065 1308.3328196501793 1335.0010667323406 1360.9765531356013 1386.294361119891 1410.9869737102624 1435.084525289323 1458.6150226995169 1481.6045409242156 1504.077396776274 1526.0563034950492 1547.5625087160126 1568.6159179138451 1589.2352051165806 1609.4379124341 1629.2405397302796 1648.6586255873813 1667.7068205580756 1686.3989535702283 1704.7480922384245 1722.766597741103 1740.4661748405038 1757.8579175523728 1774.952350911673 1791.759469228054 1808.2887711792646 1824.5492920510449 1840.549633397486 1856.297990365625 1871.8021769015902 1887.0696490323787 1902.107526396919 1916.9226121820598 1931.5214116032128 1945.9101490553123) 'bpf 16))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 8)) (om-make-point 76 201) (om-make-point 143 93) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0) '(1000.0 1105.1709180756477 1221.40275816017 1349.858807576003 1491.8246976412704 1648.7212707001281 1822.1188003905088 2013.752707470477 2225.5409284924676 2459.6031111569496 2718.2818284590453 3004.1660239464327 3320.116922736547 3669.2966676192445 4055.1999668446756 4481.689070338065 4953.032424395116 5473.947391727202 6049.647464412949 6685.894442279273 7389.056098930653 8166.169912567656 9025.013499434128 9974.182454814727 11023.17638064161 12182.493960703483 13463.738035001705 14879.73172487285 16444.64677109707 18174.145369443086 20085.536923187694 22197.951281441663 24532.530197109383 27112.63892065793 29964.10004739706 33115.45195869238 36598.23444367806 40447.30436006747 44701.18449330091 49402.44910553028 54598.15003314434 60340.28759736206 66686.33104092522 73699.79369959584 81450.86866496815 90017.13130052181 99484.31564193378 109947.17245212343 121510.41751873476 134289.7796849353 148413.15910257635 164021.9072999014 181272.24187515074 200336.80997479113 221406.41620418636 244691.93226421953 270426.40742615156 298867.40096705896 330299.55990964716 365037.46786532697 403428.793492733 445857.7700825144 492749.04109325324 544571.9101259256 601845.037872078 665141.6330443572 735095.1892419674 812405.8251675369 897847.2916504104 992274.7156050173 1096633.158428449) 'bpf 16))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 178 168) (om-make-point 31 25) 16 "16" nil) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1) (om-load-inputfun 'input-funbox "min" "XMIN" 0.2)) (om-make-point 272 92) nil nil nil nil 2) (om-load-boxcall 'genfun "OM-LOG" 'om-log '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1)) (om-make-point 276 39) nil nil "l" nil 1) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1)) (om-make-point 147 92) nil nil nil nil 2) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1)) (om-make-point 390 90) nil nil nil nil 2) (om-load-boxcall 'lispfun "TAN" 'tan '((om-load-inputfun 'input-funbox "RADIANS" "RADIANS" nil)) (om-make-point 398 42) nil nil "l" nil 1) (om-load-boxcall 'genfun "OM-E" 'om-e '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1)) (om-make-point 155 38) nil nil "l" nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 493 479) (om-make-point 31 25) 16 "16" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 219 474) (om-make-point 47 25) 16 "16" nil) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 8)) (om-make-point 329 509) (om-make-point 210 96) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0) '(0.0 92.54434384879534 205.21844868588906 281.6501943239015 376.22410762351774 499.4958811430184 648.704938867511 675.4050029169861 773.8978056123439 926.8681288079696 1006.1123957971339 1053.7511387537252 1312.869350896905 1312.6431549762247 1432.76741939181 1398.436204993047 1488.7638301565573 1533.0114163141914 1854.1306154320594 1882.6356436175033 2072.0210773349204 1972.4241478413799 2363.3206946837176 2186.6983053026697 2508.9843586627107 2438.850615525341 2771.9226556120875 2751.099318081699 2798.438750875069 2659.1669693387444 3139.57081332723 3330.185690112759 3488.1230079533984 3423.6017368242196 3205.805378678825 3700.969220234025 3598.290475976265 3993.8086696040073 3985.2227579154514 3858.0054659173015 3690.5249433415493 4395.036063725198 3870.43910594739 4183.883152257434 4378.123207126043 4911.065674128134 4175.329974135998 4796.321346957835 5263.355174629678 4620.725134072311 5016.79936892688 5327.191149885188 4901.757620539062 5669.649495221019 5582.534195338437 5671.05472855466 5303.617822720886 5449.159642195623 5667.751649781595 6397.853578977009 6255.890902235896 5638.705999196886 6613.502252164294 5692.288288925374 6759.9347967653175 6111.2020670644915 6440.727156662798 6175.496564741233 7018.135337416326 6301.61881747025 6700.8174240604285) 'bpf 16))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 456 355) (om-make-point 23 20) 0.1 "0.1" nil) (om-load-boxcall 'genfun "PERTURBATION" 'perturbation '((om-load-inputfun 'input-funbox "number or tree" "SELF" 3) (om-load-inputfun 'input-funbox "number or tree" "PERCENT" 0.1)) (om-make-point 414 381) nil nil "l" nil 1) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1)) (om-make-point 414 438) nil nil nil nil 2) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 135 352) (om-make-point 29 21) 'sin "sin" nil) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.02)) (om-make-point 139 382) nil nil nil nil 2) (om-load-boxcall 'genfun "PERTURBATION" 'perturbation '((om-load-inputfun 'input-funbox "number or tree" "SELF" 3) (om-load-inputfun 'input-funbox "number or tree" "PERCENT" 0.1)) (om-make-point 151 443) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 207 415) (om-make-point 23 20) 0.2 "0.2" nil) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 8)) (om-make-point 55 504) (om-make-point 210 96) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0 710.0 720.0 730.0 740.0 750.0 760.0 770.0 780.0 790.0 800.0 810.0 820.0 830.0 840.0 850.0 860.0 870.0 880.0 890.0 900.0 910.0 920.0 930.0 940.0 950.0 960.0 970.0 980.0 990.0 1000.0 1010.0 1020.0 1030.0 1040.0 1050.0 1060.0 1070.0 1080.0 1090.0 1100.0 1110.0 1120.0 1130.0 1140.0 1150.0 1160.0 1170.0 1180.0 1190.0 1200.0 1210.0 1220.0 1230.0 1240.0 1250.0 1260.0 1270.0 1280.0 1290.0 1300.0 1310.0 1320.0 1330.0 1340.0 1350.0 1360.0 1370.0 1380.0 1390.0 1400.0 1410.0 1420.0 1430.0 1440.0 1450.0 1460.0 1470.0 1480.0 1490.0 1500.0 1510.0 1520.0 1530.0 1540.0 1550.0 1560.0 1570.0 1580.0 1590.0 1600.0 1610.0 1620.0 1630.0 1640.0 1650.0 1660.0 1670.0 1680.0 1690.0 1700.0 1710.0 1720.0 1730.0 1740.0 1750.0 1760.0 1770.0 1780.0 1790.0 1800.0 1810.0 1820.0 1830.0 1840.0 1850.0 1860.0 1870.0 1880.0 1890.0 1900.0 1910.0 1920.0 1930.0 1940.0 1950.0 1960.0 1970.0 1980.0 1990.0 2000.0 2010.0 2020.0 2030.0 2040.0 2050.0 2060.0 2070.0 2080.0 2090.0 2100.0 2110.0 2120.0 2130.0 2140.0 2150.0 2160.0 2170.0 2180.0 2190.0 2200.0 2210.0 2220.0 2230.0 2240.0 2250.0 2260.0 2270.0 2280.0 2290.0 2300.0 2310.0 2320.0 2330.0 2340.0 2350.0 2360.0 2370.0 2380.0 2390.0 2400.0 2410.0 2420.0 2430.0 2440.0 2450.0 2460.0 2470.0 2480.0 2490.0 2500.0 2510.0 2520.0 2530.0 2540.0 2550.0 2560.0 2570.0 2580.0 2590.0 2600.0 2610.0 2620.0 2630.0 2640.0 2650.0 2660.0 2670.0 2680.0 2690.0 2700.0 2710.0 2720.0 2730.0 2740.0 2750.0 2760.0 2770.0 2780.0 2790.0 2800.0 2810.0 2820.0 2830.0 2840.0 2850.0 2860.0 2870.0 2880.0 2890.0 2900.0 2910.0 2920.0 2930.0 2940.0 2950.0 2960.0 2970.0 2980.0 2990.0 3000.0 3010.0 3020.0 3030.0 3040.0 3050.0 3060.0 3070.0 3080.0 3090.0 3100.0 3110.0 3120.0 3130.0 3140.0 3150.0 3160.0 3170.0 3180.0 3190.0 3200.0 3210.0 3220.0 3230.0 3240.0 3250.0 3260.0 3270.0 3280.0 3290.0 3300.0 3310.0 3320.0 3330.0 3340.0 3350.0 3360.0 3370.0 3380.0 3390.0 3400.0 3410.0 3420.0 3430.0 3440.0 3450.0 3460.0 3470.0 3480.0 3490.0 3500.0 3510.0 3520.0 3530.0 3540.0 3550.0 3560.0 3570.0 3580.0 3590.0 3600.0 3610.0 3620.0 3630.0 3640.0 3650.0 3660.0 3670.0 3680.0 3690.0 3700.0 3710.0 3720.0 3730.0 3740.0 3750.0 3760.0 3770.0 3780.0 3790.0 3800.0 3810.0 3820.0 3830.0 3840.0 3850.0 3860.0 3870.0 3880.0 3890.0 3900.0 3910.0 3920.0 3930.0 3940.0 3950.0 3960.0 3970.0 3980.0 3990.0 4000.0 4010.0 4020.0 4030.0 4040.0 4050.0 4060.0 4070.0 4080.0 4090.0 4100.0 4110.0 4120.0 4130.0 4140.0 4150.0 4160.0 4170.0 4180.0 4190.0 4200.0 4210.0 4220.0 4230.0 4240.0 4250.0 4260.0 4270.0 4280.0 4290.0 4300.0 4310.0 4320.0 4330.0 4340.0 4350.0 4360.0 4370.0 4380.0 4390.0 4400.0 4410.0 4420.0 4430.0 4440.0 4450.0 4460.0 4470.0 4480.0 4490.0 4500.0 4510.0 4520.0 4530.0 4540.0 4550.0 4560.0 4570.0 4580.0 4590.0 4600.0 4610.0 4620.0 4630.0 4640.0 4650.0 4660.0 4670.0 4680.0 4690.0 4700.0 4710.0 4720.0 4730.0 4740.0 4750.0 4760.0 4770.0 4780.0 4790.0 4800.0 4810.0 4820.0 4830.0 4840.0 4850.0 4860.0 4870.0 4880.0 4890.0 4900.0 4910.0 4920.0 4930.0 4940.0 4950.0 4960.0 4970.0 4980.0 4990.0 5000.0) '(0.0 0.0234000115716435 0.0427022328144985 0.0712904562788318 0.0917888300093347 0.0987463496053537 0.1240124373400761 0.1443718324562564 0.1642053818076816 0.2110121401357591 0.2258415267439643 0.2244252837964715 0.2541494216280637 0.2588001707315157 0.2478849787320637 0.2751693757841636 0.374852652344998 0.3328459247722647 0.4028219695575562 0.4330424084512028 0.3377500142327925 0.4074615383514374 0.49347077921328 0.4912769661109526 0.4902627909486034 0.4011340075489598 0.46941325775313 0.5478980035275628 0.5534487472617976 0.6158442293602028 0.5702244299970352 0.6784973269182298 0.5409982790411192 0.6872271039035188 0.633983855697587 0.699309247002191 0.6731310341106542 0.5395656473418078 0.6273894571761224 0.5953659478626646 0.6733712291613714 0.7735713405663251 0.7201748964970872 0.613394675402973 0.8016138530613937 0.6402584203782474 0.6375344919480505 0.9458365580940078 0.787901836282655 0.6897548805602524 0.9541160675870364 0.9454081521497926 0.8189651839553515 1.037688102012482 0.7305213552898226 1.0526840288123722 0.9926170461815008 1.0174047910687798 0.8653825568726906 0.8183218007748306 0.9810981975935682 0.931220799600101 1.0963661394170383 0.8121839477091534 1.0958694726724898 0.876902503249511 0.9358541394275756 0.8576754700305662 0.9428565054545368 0.8515527022798732 0.8483326979374912 1.1139060466191062 1.1420877302323724 1.0405152832810423 0.8124616864512932 1.0636144134658143 1.143120853953387 1.056384625321789 0.8146290641909246 0.8692320047307716 1.0187487904660681 0.963707931934522 0.8344126132305898 1.0841174431611809 1.0335470830231426 0.8123123873901752 0.8334202584142696 1.0514800351022044 1.004782617705772 1.07756608726177 0.956452284913956 0.8776602891373598 1.151296155110472 1.1398347974978775 1.0936909925224907 1.0359804096880667 0.886748767662158 0.7531487501662338 0.8529583975096192 1.0157611026991615 0.9634312691551016 0.9916875018774528 0.8192855404945064 0.869704111867382 0.906437349114475 0.9954431852165512 0.9189075363381728 0.7041257584841272 0.8678633241926742 0.6666853990919802 0.7123946526195064 0.8157494167457814 0.8676152583729329 0.9054280408106546 0.7938100746314114 0.7416740336191296 0.682177694003703 0.7776318626333186 0.6985727855677134 0.7617668166007174 0.650529716747576 0.6791750152687632 0.5455514270160796 0.5300616510613786 0.5645930182682534 0.700152759388782 0.6384549687959654 0.4952408977482354 0.6425343279058836 0.5901547858294242 0.4939521334622706 0.500051338358495 0.4451227543295339 0.4025566709296994 0.3761480525654437 0.3864097665796989 0.4440759443962234 0.3706554663409261 0.3682559019259347 0.3908948527883082 0.3543943196400898 0.3057663530479468 0.2505750470203655 0.2471143026302136 0.2430699434068268 0.2602067426369663 0.1772817543625546 0.172201572729017 0.2014899664491131 0.1830278307345172 0.1180434367369911 0.1271533870362121 0.1091085536684671 0.0948838136129791 0.0497335749163197 0.0423107666490337 0.0206750298727836 0.0014970945592539 -0.0189681135810663 -0.0457611528383344 -0.060488433309078 -0.0806988473894266 -0.0991350511261001 -0.1331467274609751 -0.1136923734542938 -0.1518197868538629 -0.1527088138147621 -0.2043235899156444 -0.2036964807734227 -0.1940858476692517 -0.2305088542098093 -0.265042504804073 -0.2393183420055837 -0.3506411009698421 -0.3348508653791604 -0.3075447952332262 -0.3310173618208661 -0.4059153203936112 -0.3906150640990075 -0.3820843662490322 -0.4568715802108782 -0.4287789041317916 -0.4822287506214882 -0.4942488739403026 -0.4446441179938908 -0.5829036604649962 -0.521723592721658 -0.5318332715714126 -0.6422810178724766 -0.6884196064337395 -0.5233339566767686 -0.6324768274769488 -0.6650459959866551 -0.7612217961735196 -0.76845754733736 -0.6695828674971144 -0.696753609574484 -0.6238111850939722 -0.6201834873570048 -0.8772819854887178 -0.7818930640219666 -0.8354058457506112 -0.7885977911927122 -0.7056019585803376 -0.9152689310787882 -0.8069977892070794 -0.9292979688347957 -0.9109008127459725 -0.98066690797514 -0.7118921314073732 -0.7004204517877743 -1.014878173826637 -0.9508751197889977 -0.9050976798543752 -0.9236254478286436 -0.9566137930227094 -0.7614226966880304 -0.9923334738504132 -1.1249619825173756 -0.7614189156801642 -0.915974447997133 -0.7884196674083838 -1.025699509186052 -0.8445402701893662 -0.9066827808287772 -0.804799795295433 -0.9486633081489538 -1.1369045337840245 -1.0974218118690993 -0.8925613127907218 -1.0579453906771767 -0.8406698523382768 -0.9487977946981614 -0.9650759463292604 -0.9705971966668486 -0.8680409657900684 -1.1957536417706893 -1.0960298935193657 -0.8096673953306702 -0.9913003709448406 -1.1386324561348866 -1.167274223737348 -0.9226200640966824 -1.1824809423767515 -1.1183768901489284 -1.0538091324733454 -0.9678325082607452 -0.8935334142192902 -1.106239162098824 -1.1059188322348779 -0.8414484156397583 -0.7672606753992114 -1.0949928372046265 -0.8136703939771178 -0.9865465268331098 -0.8082230453469204 -1.0889889974889932 -0.914098643983111 -1.0798231968741117 -1.0296893825915823 -1.0573092334107048 -0.8431568339218548 -0.9129353698997812 -0.8858876873639716 -0.9876913344911398 -0.9396234801537902 -0.8017243944207684 -0.882274807638837 -0.7507100254461266 -0.9110827206851988 -0.7009099809877954 -0.905675959847862 -0.762533857675293 -0.831473523017797 -0.65646350690516 -0.7565542566159542 -0.6844160777621447 -0.7949392503758222 -0.540175774457305 -0.6950690469368802 -0.5171209615263994 -0.510509454658416 -0.5264449056359386 -0.5661321708062574 -0.476474645321301 -0.599649265060627 -0.495044913632354 -0.456811038023077 -0.4131544226959921 -0.4180518907776022 -0.5338166112189714 -0.3954955797216016 -0.4607062245482924 -0.3437867086027264 -0.4405390600656528 -0.434294590523652 -0.285215714687936 -0.3352333157328707 -0.359356168094457 -0.2719065749586823 -0.2965405075109745 -0.243504173283176 -0.222070467197664 -0.244545663176797 -0.1812364533134979 -0.1744120822295798 -0.1543376754971896 -0.1325068729416482 -0.1077949612287428 -0.0832707386367622 -0.0893196747518579 -0.0535931759786452 -0.0517140293375492 -0.0244819961367877 -0.0025965898776469 0.0172419149060819 0.0345231944691183 0.0666372073277685 0.0876380459538464 0.1000504276125908 0.1325208868328737 0.1202834216377319 0.136954996039361 0.1781409604083338 0.1835812107823244 0.1944253220762462 0.2344830924510686 0.2697577757281344 0.2799067107824714 0.2408063381719083 0.2701845307094023 0.3909058006277066 0.4124491706753296 0.3461248470336905 0.3222761534000977 0.3653762682130796 0.3815079019594058 0.3863733575695557 0.5500542468210582 0.4326807374235704 0.5916917811372688 0.5564783863110664 0.4244237267978614 0.5055636873629206 0.5881685965094724 0.5922483493519738 0.659154741728093 0.5311992526273496 0.5924796088374036 0.6000250099459066 0.689469065583982 0.7583918229171308 0.73476620598921 0.6711420221738004 0.7260603137769962 0.8449285073687148 0.8462258185867197 0.723062011305667 0.8735350066726414 0.8637981385679137 0.886277118508093 0.7342558650507464 0.963771004112363 0.7371803137066062 0.7668982615516896 0.9319207325323022 0.7741063636715761 0.7452888196972334 1.0078367797754175 0.7444634545684548 0.9014872289129074 0.940597426328069 0.8740990476261938 1.0292281458131916 0.9883723329842518 0.9930530153130068 0.7994157304426492 0.8424364765621138 0.7674248065327072 0.8630294768285952 1.0583123737707028 0.961969496793663 0.9678051572328626 0.8464712303757512 1.1811206475200415 0.8473137491948226 0.8892576239775706 1.162097372335336 1.038257539449053 1.1868368567671874 1.1199807739009684 0.9955344714684534 0.9321615803955662 1.0226898374648947 1.116203212651382 0.8839212189427298 1.0278886174615307 0.998113671348802 1.0520633768643075 0.8613051103199127 0.9194812894022302 0.8539711030123976 0.9754162701172105 1.086291385087411 0.814791143222388 0.9823769637092664 0.7782156218484758 0.8666918615347744 0.76885775892702 0.8216447417096566 0.813675261724232 0.8349515668524424 0.9944885517643556 1.0307420511594458 1.0807589277091507 0.821167825348294 1.070414764202752 0.9599842240772172 0.9721465482400504 0.7469045235849254 0.8639037582701248 0.7750822560105728 0.8049202353519478 0.7489877198282026 0.8420973003854396 0.865622556211177 0.7883604704901704 0.6718818663874806 0.7090704788682048 0.8044105422540598 0.668377291536577 0.6172691100813122 0.6447100597426264 0.6231394430620985 0.723753032140734 0.5783968568139246 0.552738848519721 0.5405272695385774 0.7219228937698144 0.526355486980461 0.5601956215979534 0.5327876379002257 0.4458965893891733 0.539425982642843 0.4694966690070546 0.5245666404461068 0.5223404818094778 0.5387223247431971 0.4562490646290912 0.3493281026384889 0.4688086413186292 0.4293642363567016 0.4389746065689018 0.3774455203429491 0.2873114581219226 0.3160998842830578 0.2827858716391819 0.2792366197757606 0.24687244883186 0.2301939862550905 0.2649124294282799 0.187656917083702 0.2074918023394063 0.1944086723959091 0.1486550064644322 0.1205041268208518 0.0858115031908523 0.0899101190538378 0.068001160261054 0.0491891858213079 0.0232999251061703 0.0039392928541421 -0.0124177157134421 -0.0370573905134124 -0.0490172636884801 -0.0764833686022586 -0.1124341783725735 -0.1129790618112037 -0.1356257428112343 -0.179137132650271 -0.1796162850174745 -0.1611591083044558 -0.1992209400995941 -0.2159927150244705 -0.2160712922680239 -0.2178730977757614 -0.3158954545226086 -0.3201253811401245 -0.2937479088375362 -0.3566168981396247 -0.3093888670890208 -0.3551273377436403 -0.3616041910615153 -0.4276841950328742 -0.3691373648423688 -0.3991351642256315 -0.547133351245313 -0.5237938738460388 -0.5529491162381 -0.4655023883053418 -0.4865498387812348) 'bpf 16))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil)) '((9 0 0 2 nil 0) (1 0 0 3 nil 0) (6 0 3 2 nil 0) (2 0 3 3 nil 0) (8 0 4 2 nil 0) (5 0 4 3 nil 0) (7 0 6 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (17 0 14 2 nil 0) (12 0 14 3 nil 0) (15 0 16 1 nil 0) (16 0 17 0 nil 0) (18 0 19 0 nil 0) (19 0 20 0 nil 0) (21 0 20 1 nil 0) (20 0 22 2 nil 0) (13 0 22 3 nil 0)) 5.11 nil) 'nil (om-make-point 53 666) nil nil nil "other_examples") (om-load-boxcomment "comment" (om-make-point 213 44) '"This other example shows the use of a  lambda function " "" (om-make-point 317 599) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 213 44) '"This examples shows the use of a sine function (sin symbol) with the default values." "" (om-make-point 42 596) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 313 495) (om-make-point 210 96) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70) '(96000 75233 84314 9502 11510 38222 1242 2455 76822 53690 50751 44470 22495 55093 28458 33792 25959 44335 80750 60095 68496 92944 4604 39060 60741 88995 35798 38618 46619 22108 35981 94212 62663 52922 51877 63815 73205 62331 15381 87481 66923 54709 75231 62655 86050 62076 20743 44952 49982 61641 12900 5690 24946 98688 19918 11049 67425 87811 33482 12505 19185 70973 58300 64298 71068 29115 24245 80846 88166 18320 53940) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 227 455) (om-make-point 35 22) 8 "8" nil) (om-load-editor-box1 "BPF2" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 48 493) (om-make-point 210 96) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0 710.0 720.0 730.0 740.0 750.0 760.0 770.0 780.0 790.0 800.0 810.0 820.0 830.0 840.0 850.0 860.0 870.0 880.0 890.0 900.0 910.0 920.0 930.0 940.0 950.0 960.0 970.0 980.0 990.0 1000.0) '(0.0 0.09983342 0.19866933 0.29552021 0.38941834 0.47942554 0.56464247 0.64421769 0.71735609 0.78332691 0.84147098 0.89120736 0.93203909 0.96355819 0.98544973 0.99749499 0.9995736 0.99166481 0.97384763 0.94630009 0.90929743 0.86320937 0.8084964 0.74570521 0.67546318 0.59847214 0.51550137 0.42737988 0.33498815 0.23924933 0.14112001 0.04158066 -0.05837414 -0.15774569 -0.2555411 -0.35078323 -0.44252044 -0.52983614 -0.61185789 -0.68776616 -0.7568025 -0.81827711 -0.87157577 -0.91616594 -0.95160207 -0.97753012 -0.993691 -0.99992326 -0.99616461 -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744 -0.77276449 -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666 -0.2794155 -0.1821625 -0.0830894 0.0168139 0.1165492 0.21511999 0.31154136 0.40484992 0.49411335 0.57843976 0.6569866 0.72896904 0.79366786 0.85043662 0.8987081 0.93799998 0.96791967 0.98816823 0.99854335 0.99894134 0.98935825 0.96988981 0.94073056 0.90217183 0.85459891 0.79848711 0.7343971 0.66296923 0.58491719 0.50102086 0.41211849 0.31909836 0.22288991 0.12445442 0.02477543 -0.07515112 -0.17432678 -0.27176063 -0.36647913 -0.45753589 -0.54402111) 'bpf 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1)) (om-make-point 115 412) nil nil nil nil 2) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 78 381) (om-make-point 31 23) 'sin "sin" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 141 380) (om-make-point 37 22) 0.1 "0.1" nil) (om-load-boxcall 'genfun "SAMPLEFUN1" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sin) (om-load-inputfun 'input-funbox "step" "STEP" 0.1) (om-load-inputfun 'input-funbox "min" "XMIN" 0) (om-load-inputfun 'input-funbox "max" "XMAX" 7)) (om-make-point 336 410) (om-make-point 202 55) nil nil nil 2) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 366 325) (om-make-point 27 20) 100 "100" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 338 350) nil nil "l" nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 402 375) (om-make-point 33 22) 0.1 "0.1" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 445 374) (om-make-point 26 22) 0 "0" nil) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 488 374) (om-make-point 20 21) 7 "7" nil) (om-load-boxcomment "comment2" (om-make-point 100 27) '"samplefun" "" (om-make-point 194 10) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 373 283) '"INPUTS$fun         symbol,  function or Om-lambda-patch$step        number$$OPTIONAL INPUTS$xmin        number$xmamx   number$coeff       number$$FIRST OUTPUT$returns the list of values of fun   as sampled from xmin  to xmax  by  step. Values are multiplied by <coeff>$$SECOND OUTPUT$returns a bpf object that can be directly connected to the left input of a bpf factory$$The default values are:$<fun>     sin$<step>  0.1$<xmin>  0$<xmax>  7$<coeff>  1000$" "" (om-make-point 167 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor)))) '((9 1 3 0 nil 0) (6 0 5 2 nil 0) (4 0 5 3 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (11 0 9 0 nil 0) (12 0 9 1 nil 0) (13 0 9 2 nil 0) (14 0 9 3 nil 0) (10 0 11 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))












































