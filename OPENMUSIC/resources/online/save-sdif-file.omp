; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 808 752) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "save-sdif-file" (quote ((let ((box (om-load-boxcall (quote abstraction) "08-sdif-write-file-21" (om-load-patch-abs1 "using-File-box" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 42 28) (quote "Data") "" (om-make-point 34 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 84 24) (quote "File to create") "" (om-make-point 229 158) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 32) (quote "using the File-Box") "" (om-make-point 317 36) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 200 32) (quote "Write an SDIF File") "" (om-make-point 213 8) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "FILE-BOX1" (quote file-box) (quote nil) (om-make-point 474 127) nil nil nil (list (let ((box (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 50 170) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 85 82) nil nil nil nil 1))) (setf (filetype box) (quote text) (direction box) :io (if-ex box) :supersede) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 115 161) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 5 170) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote nil) 1 "file-box1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 173 67) (quote "A special loop with a file stream pointer.$This box allow to write Text or SDIF file") "" (om-make-point 412 199) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 40) (quote "FILE-BOX") "" (om-make-point 454 92) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 234 183) (om-make-point 85 30) "morphx.sdif" "\"morphx.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 250 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB1" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BPF-LIST" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 80 150) (om-make-point 127 106) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 76 78 80 82 84 86 88 90 92 94 96 98 100)) (quote (0 11 21 27 33 40 44 47 49 51 52 51 50 47 45 40 38 35 32 30 29 27 26 25 24 23 23 23 23 24 24 25 26 26 27 27 28 28 28 28 28 28 28 27 28 32 35 45 59 88)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99)) (quote (0 11 20 26 32 38 43 46 48 50 50 50 48 46 44 40 38 35 32 31 29 27 26 25 24 23 23 23 23 24 24 24 25 26 26 27 27 27 27 27 27 27 27 27 28 31 34 43 57 85)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 75 77 79 81 83 85 87 89 91 93 95 97 99)) (quote (0 10 20 25 31 37 42 44 46 48 49 49 47 46 43 39 38 34 32 31 30 28 26 25 24 23 23 23 23 24 23 24 25 25 26 26 27 27 27 27 27 27 27 26 27 30 33 42 55 81)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98)) (quote (0 10 19 24 30 36 40 43 45 47 48 47 46 45 42 39 37 34 32 31 30 28 27 26 25 23 23 23 23 23 23 24 24 25 25 25 26 26 26 26 26 26 26 25 26 29 32 40 52 78)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 93 95 97)) (quote (0 10 18 23 29 34 39 41 43 45 46 46 45 44 42 38 37 34 32 31 30 28 27 26 25 24 23 23 23 23 23 23 24 24 25 25 25 25 25 25 25 25 25 25 26 28 31 39 50 74)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97)) (quote (0 9 17 22 28 33 37 40 42 44 45 45 44 43 41 38 37 34 32 31 30 29 28 26 25 24 23 23 23 23 23 23 23 24 24 24 25 25 25 25 25 25 25 24 25 27 30 37 48 71)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 72 74 76 78 80 82 84 86 88 90 92 94 96)) (quote (0 9 17 21 26 32 36 38 40 42 43 43 43 42 40 38 36 34 32 31 31 29 28 27 26 24 23 23 23 23 22 22 23 23 24 24 24 24 24 24 24 24 24 24 24 27 29 36 46 67)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 89 91 93 95)) (quote (0 8 16 20 25 30 35 37 39 41 42 42 41 41 39 37 36 34 33 32 31 29 28 27 26 24 23 23 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 26 28 35 44 64)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 62 64 66 68 70 71 73 75 77 79 81 83 85 87 89 91 93 95)) (quote (0 8 15 19 24 29 33 35 37 39 41 41 40 40 38 37 36 34 33 32 31 30 29 28 26 24 23 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 22 23 25 27 33 42 60)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 13 15 17 19 21 23 25 27 29 31 33 35 36 38 40 42 44 46 48 50 52 54 56 58 59 61 63 65 67 69 71 73 75 77 79 81 82 84 86 88 90 92 94)) (quote (0 7 14 18 23 28 32 34 36 38 39 39 39 39 38 36 35 34 33 32 31 30 29 28 27 24 23 22 22 22 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 24 26 32 40 57)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 11 13 15 17 19 21 23 25 27 29 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 70 72 74 76 78 80 82 84 86 88 90 91 93)) (quote (0 7 13 17 22 27 30 33 34 36 38 38 38 38 37 36 35 34 33 32 31 30 29 28 27 25 23 22 22 22 21 21 21 21 21 21 21 21 21 21 21 21 21 21 22 23 25 30 38 53)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 9 11 13 15 17 19 21 23 25 26 28 30 32 34 36 38 40 42 43 45 47 49 51 53 55 57 59 61 62 64 66 68 70 72 74 76 78 79 81 83 85 87 89 91 93)) (quote (0 7 13 17 21 25 29 31 33 35 36 37 37 37 36 35 35 33 33 32 32 31 30 29 27 25 23 22 22 21 21 20 21 21 21 21 21 21 21 21 21 21 21 20 21 22 24 29 36 50)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 9 11 13 15 17 19 21 23 24 26 28 30 32 34 36 38 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 69 71 73 75 77 79 81 83 84 86 88 90 92)) (quote (0 6 12 16 20 24 27 30 31 33 35 35 36 36 35 35 34 33 33 32 32 31 30 29 28 25 23 22 22 21 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 22 23 28 34 46)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 35 37 39 41 43 45 47 48 50 52 54 56 58 60 62 63 65 67 69 71 73 75 76 78 80 82 84 86 88 89 91)) (quote (0 6 11 15 19 23 26 28 30 32 34 34 34 35 35 34 34 33 33 32 32 31 30 30 28 25 23 22 22 21 20 20 20 20 20 19 19 19 19 19 19 19 19 19 19 21 22 26 32 43)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 19 20 22 24 26 28 30 31 33 35 37 39 41 43 44 46 48 50 52 54 56 57 59 61 63 65 67 68 70 72 74 76 78 80 81 83 85 87 89 91)) (quote (0 5 10 14 17 21 25 27 28 31 32 33 33 34 34 34 34 33 33 33 32 32 31 30 28 25 23 22 21 21 20 19 19 19 19 19 19 19 19 19 19 19 19 18 19 20 21 25 30 39)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 39 40 42 44 46 48 50 51 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90)) (quote (0 5 9 13 16 20 23 25 27 29 31 31 32 33 33 33 33 33 33 33 33 32 31 30 29 25 24 22 21 21 19 19 19 19 18 18 18 18 18 18 18 18 18 18 18 19 20 23 27 36)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 15 16 18 20 22 24 26 27 29 31 33 35 36 38 40 42 44 46 47 49 51 53 55 57 58 60 62 64 66 67 69 71 73 75 77 78 80 82 84 86 88 89)) (quote (0 4 9 12 15 19 22 24 25 28 29 30 31 32 32 33 33 33 33 33 33 32 32 31 29 25 24 22 21 20 19 19 18 18 18 18 17 17 17 17 17 17 17 17 17 18 19 22 25 32)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 14 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 62 63 65 67 69 71 72 74 76 78 80 81 83 85 87 89)) (quote (0 4 8 11 14 17 20 22 24 26 28 29 30 31 32 32 33 33 33 33 33 33 32 31 29 26 24 22 21 20 19 18 18 18 17 17 17 17 17 17 17 17 17 17 17 17 18 20 23 29)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 14 16 18 20 22 23 25 27 29 31 32 34 36 38 40 41 43 45 47 48 50 52 54 56 57 59 61 63 65 66 68 70 72 74 75 77 79 81 83 84 86 88)) (quote (0 4 7 10 13 16 19 21 23 25 27 27 29 30 31 32 33 33 33 33 33 33 32 31 30 26 24 22 21 20 19 18 17 17 17 16 16 16 16 16 16 16 16 16 16 17 17 19 21 25)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 20 21 23 25 27 29 30 32 34 36 37 39 41 43 45 46 48 50 52 53 55 57 59 61 62 64 66 68 70 71 73 75 77 78 80 82 84 86 87)) (quote (0 3 6 9 12 15 17 19 21 23 25 26 27 29 30 31 32 33 33 33 34 33 33 32 30 26 24 22 21 20 18 17 17 17 16 16 15 15 15 15 15 15 15 15 15 16 16 18 19 22)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86)) (quote (0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 4 6 8 10 12 14 16 18 20 22 24 26 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 78 80 82 84 86 88 90 92 94 96 98 100 102)) (quote (103 101 100 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 55 53 51 49 46 45 43 40 38 36 34 31 29 26 24 22 19 17 15 13 11 8 7 5 2 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 101)) (quote (98 97 95 94 92 90 88 86 84 83 81 79 77 75 74 72 70 69 67 65 63 61 59 57 54 52 50 48 45 43 42 39 37 35 33 30 28 26 24 21 19 17 15 13 11 9 7 6 3 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100)) (quote (93 92 91 89 88 86 84 83 81 79 78 76 74 73 72 70 68 67 65 63 61 59 58 56 53 50 48 46 43 42 40 38 36 34 32 29 27 25 23 21 19 17 15 13 11 9 7 6 3 1)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100)) (quote (88 87 86 85 84 82 81 79 78 76 75 73 72 70 69 68 67 65 63 62 60 58 56 54 52 49 47 45 42 41 39 37 35 33 31 29 26 25 23 21 19 17 15 13 12 9 8 6 4 2)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99)) (quote (83 83 82 81 79 78 77 76 74 73 72 71 69 68 67 66 65 63 62 60 58 57 55 53 50 48 46 44 41 40 38 36 34 32 30 28 26 24 22 20 18 17 15 13 12 9 8 7 5 3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 76 78 80 82 84 86 88 90 92 94 96 98)) (quote (78 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 61 60 58 57 55 54 52 49 47 44 42 40 38 37 35 33 31 29 27 25 24 22 20 18 17 15 13 12 10 8 7 5 4)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 95 97)) (quote (74 73 73 72 71 70 70 69 68 67 66 65 64 63 63 62 61 59 58 57 56 54 52 51 48 45 43 41 39 37 36 33 31 30 28 26 24 23 21 19 18 16 15 13 12 10 9 8 6 4)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97)) (quote (69 68 68 68 67 67 66 65 64 64 63 62 61 61 60 60 59 58 57 55 54 53 51 50 47 44 42 40 37 36 34 32 30 29 27 25 24 22 21 19 18 16 15 13 12 10 9 8 6 5)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 80 82 84 86 88 90 92 94 96)) (quote (64 64 64 63 63 63 62 62 61 61 60 59 59 58 58 58 57 56 55 54 53 51 50 48 46 43 41 38 36 35 33 31 29 28 27 25 23 22 20 19 17 16 15 14 12 10 9 9 7 6)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 11 13 15 16 18 20 22 24 26 28 30 32 34 36 38 40 41 43 45 47 49 51 53 55 57 59 61 63 64 66 68 70 72 74 76 78 80 82 84 86 87 89 91 93 95)) (quote (59 59 59 59 59 59 59 58 58 58 57 57 56 56 56 56 55 54 53 52 51 50 49 47 45 42 39 37 35 34 32 30 28 27 26 24 22 21 20 18 17 16 15 14 12 11 10 9 8 6)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 11 12 14 16 18 20 22 24 26 28 30 32 33 35 37 39 41 43 45 47 49 51 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 92 94)) (quote (54 54 55 55 55 55 55 55 55 54 54 54 54 53 54 53 53 52 51 51 50 49 47 46 43 40 38 36 34 32 31 29 27 26 25 23 22 21 19 18 17 16 15 14 13 11 10 10 8 7)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 7 9 10 12 14 16 18 20 22 24 26 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 61 63 65 67 69 71 73 75 77 78 80 82 84 86 88 90 92 94)) (quote (49 50 50 50 51 51 51 51 51 51 52 51 51 51 51 51 51 50 50 49 48 47 46 45 42 39 37 35 33 31 30 28 26 25 24 22 21 20 19 18 17 16 15 14 13 11 10 10 9 8)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 5 6 8 10 12 14 16 18 20 22 23 25 27 29 31 33 35 37 38 40 42 44 46 48 50 52 53 55 57 59 61 63 65 67 68 70 72 74 76 78 80 82 83 85 87 89 91 93)) (quote (44 45 46 46 47 47 48 48 48 48 49 48 48 49 49 49 49 49 48 48 47 46 45 44 41 38 35 33 31 30 28 27 25 24 23 22 20 19 18 17 16 15 15 14 13 12 11 11 9 9)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 32 34 36 38 40 42 44 45 47 49 51 53 55 57 59 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 88 90 92)) (quote (39 40 41 42 43 43 44 44 45 45 46 46 46 46 47 47 47 47 46 46 45 45 44 42 40 36 34 32 30 29 27 26 24 23 22 21 20 19 18 17 16 15 14 14 13 12 11 11 10 9)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 3 4 6 8 10 12 14 15 17 19 21 23 25 27 28 30 32 34 36 38 40 41 43 45 47 49 51 52 54 56 58 60 62 64 65 67 69 71 73 75 77 78 80 82 84 86 88 89 91)) (quote (34 35 36 38 38 39 40 41 41 42 43 43 43 44 44 45 45 45 45 45 44 43 42 41 39 35 33 31 29 28 26 24 23 22 21 20 19 18 17 17 16 15 14 14 13 12 12 12 11 10)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1 2 4 6 8 10 12 13 15 17 19 21 23 24 26 28 30 32 34 35 37 39 41 43 45 46 48 50 52 54 56 58 59 61 63 65 67 69 70 72 74 76 78 80 81 83 85 87 89 91)) (quote (29 31 32 33 34 35 37 37 38 39 40 40 41 41 42 43 43 43 43 43 43 42 41 40 38 34 32 29 28 26 25 23 22 21 20 19 18 18 17 16 16 15 14 14 13 12 12 12 11 11)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 11 13 15 17 19 21 22 24 26 28 30 31 33 35 37 39 41 42 44 46 48 50 52 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90)) (quote (25 26 27 29 30 32 33 34 35 36 37 37 38 39 40 41 41 41 41 41 41 41 40 39 37 33 30 28 26 25 24 22 21 20 19 18 17 17 16 16 15 15 14 14 13 13 12 12 12 11)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 38 40 42 44 46 47 49 51 53 55 56 58 60 62 64 66 67 69 71 73 75 76 78 80 82 84 85 87 89)) (quote (20 21 23 25 26 28 29 30 31 33 34 35 35 37 38 39 39 40 40 40 40 39 38 37 35 31 29 27 25 24 22 21 20 19 19 18 17 16 16 15 15 15 14 14 13 13 13 13 13 12)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 61 63 65 67 69 70 72 74 76 78 79 81 83 85 86 88)) (quote (15 17 18 20 22 24 26 27 28 30 31 32 33 34 35 37 37 38 38 38 38 38 37 36 34 30 28 26 24 23 21 20 19 18 18 17 16 16 15 15 15 14 14 14 14 13 13 13 13 13)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 14 16 18 20 22 23 25 27 29 30 32 34 36 38 39 41 43 45 47 48 50 52 54 55 57 59 61 63 64 66 68 70 71 73 75 77 79 80 82 84 86 88)) (quote (10 12 14 16 18 20 22 23 25 26 28 29 30 32 33 35 35 36 36 37 37 37 36 35 33 29 26 24 23 22 20 19 18 17 17 16 15 15 15 15 15 14 14 14 14 13 13 14 14 14)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 76 78 80 82 84 86 88 90 92 94 96 98 100)) (quote (0 2 4 6 8 10 11 13 16 18 20 22 24 26 28 30 32 34 36 38 40 41 43 46 47 49 51 53 55 57 59 61 63 65 67 69 71 74 76 78 80 83 85 87 89 91 93 96 97 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99)) (quote (0 2 4 6 8 10 11 13 16 18 20 22 24 26 28 30 32 34 36 38 40 41 42 45 46 48 50 52 53 55 57 59 61 63 64 67 69 71 73 75 77 79 81 83 85 87 90 92 93 96)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 75 77 79 81 83 85 87 89 91 93 95 97 99)) (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 35 37 39 41 42 45 45 47 48 50 52 54 55 57 59 60 62 64 66 68 70 72 73 76 78 80 82 84 86 88 89 92)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98)) (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 35 37 39 40 42 44 45 46 47 49 50 52 53 55 57 58 59 62 63 65 67 69 70 73 75 76 78 80 82 84 85 88)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 93 95 97)) (quote (0 2 4 6 8 10 12 14 16 18 20 23 24 26 28 30 32 33 35 37 39 40 41 43 44 45 46 47 49 50 51 53 54 56 57 59 61 62 64 65 67 69 71 73 75 76 78 80 81 84)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97)) (quote (0 2 4 6 9 10 12 14 16 18 20 23 24 26 28 30 32 33 35 37 38 40 41 43 43 44 45 46 47 48 49 51 52 53 54 56 58 59 61 62 64 66 68 69 71 73 74 76 77 80)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 20 22 24 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 72 74 76 78 80 82 84 86 88 90 92 94 96)) (quote (0 2 4 6 9 10 12 14 17 19 20 23 24 26 28 30 32 33 35 37 38 39 40 42 42 43 43 44 45 46 47 49 50 51 52 54 55 57 58 59 61 63 65 66 67 69 71 73 74 76)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 89 91 93 95)) (quote (0 2 4 7 9 11 12 14 17 19 21 23 24 26 28 30 32 33 35 36 38 39 40 41 42 41 42 43 44 44 45 46 48 49 50 51 52 54 55 56 58 60 61 63 64 65 67 69 70 72)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 14 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 62 64 66 68 70 71 73 75 77 79 81 83 85 87 89 91 93 95)) (quote (0 2 4 7 9 11 12 14 17 19 21 23 24 26 28 30 32 33 35 36 38 39 39 41 41 40 41 41 42 43 43 44 45 46 47 49 50 51 52 53 55 56 58 59 60 62 63 65 66 68)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 12 13 15 17 19 21 23 25 27 29 31 33 35 36 38 40 42 44 46 48 50 52 54 56 58 59 61 63 65 67 69 71 73 75 77 79 81 82 84 86 88 90 92 94)) (quote (0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 35 36 37 38 39 40 40 39 39 40 40 41 41 42 43 44 45 46 47 48 49 50 52 53 54 56 57 58 59 61 62 64)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 10 11 13 15 17 19 21 23 25 27 29 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 70 72 74 76 78 80 82 84 86 88 90 91 93)) (quote (0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 36 37 38 38 40 39 38 38 38 39 39 39 40 41 42 42 43 44 45 46 47 48 50 51 52 53 54 56 57 58 60)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 9 11 13 15 17 19 21 23 25 26 28 30 32 34 36 38 40 42 43 45 47 49 51 53 55 57 59 61 62 64 66 68 70 72 74 76 78 79 81 83 85 87 89 91 93)) (quote (0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 36 37 38 38 39 38 37 37 37 37 37 37 38 39 39 40 41 41 42 43 44 45 47 48 49 50 51 52 53 54 55)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 8 9 11 13 15 17 19 21 23 24 26 28 30 32 34 36 38 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 69 71 73 75 77 79 81 83 84 86 88 90 92)) (quote (0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 35 36 37 37 38 38 36 35 35 35 35 35 36 36 37 37 38 39 40 40 41 42 43 44 45 46 47 48 49 50 51)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 35 37 39 41 43 45 47 48 50 52 54 56 58 60 62 63 65 67 69 71 73 75 76 78 80 82 84 86 88 89 91)) (quote (0 2 5 7 9 11 13 15 17 19 21 23 25 27 28 30 32 33 34 35 36 37 37 38 37 35 34 34 34 34 33 34 34 34 35 35 36 37 37 38 39 40 41 42 42 43 44 46 46 47)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 19 20 22 24 26 28 30 31 33 35 37 39 41 43 44 46 48 50 52 54 56 57 59 61 63 65 67 68 70 72 74 76 78 80 81 83 85 87 89 91)) (quote (0 2 5 7 9 11 13 15 17 19 21 23 25 27 28 30 32 33 34 35 36 36 37 37 36 34 33 32 32 32 32 31 32 32 32 33 33 34 35 35 36 37 38 38 39 40 40 42 42 43)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 6 7 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 39 40 42 44 46 48 50 51 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90)) (quote (0 2 5 7 9 11 14 15 17 20 22 23 25 27 28 30 32 33 34 35 36 36 36 36 35 33 32 31 30 30 30 29 30 30 30 30 30 31 32 32 33 34 34 35 35 36 37 38 38 39)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 15 16 18 20 22 24 26 27 29 31 33 35 36 38 40 42 44 46 47 49 51 53 55 57 58 60 62 64 66 67 69 71 73 75 77 78 80 82 84 86 88 89)) (quote (0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 34 35 35 36 36 36 35 32 30 29 29 28 28 27 27 27 27 28 28 28 29 29 30 30 31 31 32 32 33 34 35 35)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 14 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 62 63 65 67 69 71 72 74 76 78 80 81 83 85 87 89)) (quote (0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 34 34 35 35 35 35 34 31 29 28 27 26 26 25 25 25 25 25 25 25 26 26 27 27 27 28 28 29 29 30 31 31)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 13 14 16 18 20 22 23 25 27 29 31 32 34 36 38 40 41 43 45 47 48 50 52 54 56 57 59 61 63 65 66 68 70 72 74 75 77 79 81 83 84 86 88)) (quote (0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 33 34 35 35 35 35 33 29 28 26 25 25 24 23 23 23 22 22 22 23 23 23 23 24 24 24 25 25 25 26 27 27)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 2 4 5 7 9 11 12 14 16 18 20 21 23 25 27 29 30 32 34 36 37 39 41 43 45 46 48 50 52 53 55 57 59 61 62 64 66 68 70 71 73 75 77 78 80 82 84 86 87)) (quote (0 2 5 7 10 12 14 16 18 20 22 23 25 27 29 30 32 33 33 34 35 35 34 34 32 28 26 25 24 23 22 21 21 20 20 20 19 20 20 20 20 21 21 21 21 21 22 22 23 23)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) "x" nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 161 345) (om-make-point 121 61) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BPF-LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILE-PATH" nil))) (om-make-point 203 276) nil nil nil (list (let ((box (om-load-boxcomment "comment" (om-make-point 121 28) (quote "Declare new types") "" (om-make-point 27 115) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 127 44) (quote "Writes a Frame in an SDIF file stream") "" (om-make-point 389 556) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 55) (quote "Create an SDIF Frame with each BPF from the list") "" (om-make-point 346 428) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 40) (quote "Return the filename") "" (om-make-point 526 197) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 37) (quote "This box represents the file stream") "" (om-make-point 366 207) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 98 52) (quote "Before to start the loop:$Write file header") "" (om-make-point 27 427) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 246 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOAT" (quote float) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 231 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" (quote t)))) (om-make-point 108 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 189 480) (om-make-point 122 51) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 257 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POINT-LIST" (quote point-list) (quote ((om-load-inputfun (quote input-funbox) "3DS" "3DS" nil))) (om-make-point 209 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 212 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "XMAT") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :k0) nil nil))) (om-make-point 219 364) (om-make-point 57 50) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) nil) (setf (lcontrols array) (list)) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) nil (quote t) 0 (list (list "All open") (list "All close")))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 77 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XFRA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XMAT" "datamat"))))) (om-make-point 110 148) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1")))) (om-make-point 29 149) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF-WRITE-HEADER" (quote sdif-write-header) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "STREAM" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TYPES" nil))) (om-make-point 71 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF-WRITE-FRAME" (quote sdif-write-frame) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "STREAM" nil))) (om-make-point 303 548) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 99 371) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 331 146) nil nil nil nil 1))) (setf (filetype box) (quote sdif) (direction box) :output (if-ex box) :supersede) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 357 55) "no documentation" "FILE-PATH" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 243 85) "no documentation" "BPF-LIST" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 549 146) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 326 626) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((22 0 6 0 nil 0) (8 1 7 0 nil 0) (7 0 9 2 nil 0) (10 0 9 4 nil 0) (13 0 10 0 nil 0) (6 0 11 0 nil 0) (11 0 12 0 nil 0) (12 0 13 1 nil 0) (6 0 13 3 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (20 0 17 0 nil 0) (14 0 17 1 nil 0) (20 0 18 0 nil 0) (9 0 18 1 nil 0) (17 0 19 0 nil 0) (21 0 20 0 nil 0) (21 0 23 0 nil 0) (18 0 24 0 nil 0) (8 0 24 1 nil 0))) 1 "file-box" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 8 0 nil 0) (11 0 10 0 nil 0) (9 1 11 0 nil 0) (8 0 11 1 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 691 469)) (quote nil) (om-make-point 81 592) nil nil nil "using-File-box"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 500 47) (om-make-point 172 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list nil 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX1" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 30) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par1) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par2) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par3) nil nil))) (om-make-point 445 156) (om-make-point 180 111) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (quote :par2) (list 0 60 54 10 44 13 39 43 100)) (list (quote :par3) (list 5 7 8 2)))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 612 120) (om-make-point 61 30) (list 5 7 8 2) "(5 7 8 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 306 272) (om-make-point 138 63) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature "XFRA" :ftime 7.020552 :streamid 0 :lmatrix (list (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) nil) array)) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (quote :par2) (list 0 60 54 10 44 13 39 43 100)) (list (quote :par3) (list 5 7 8 2)))) (setf (data array) nil) array))) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :k0) nil nil))) (om-make-point 360 156) (om-make-point 72 60) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 437 123) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 374 115) (om-make-point 59 30) "XNFO" "\"XNFO\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 411 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE2" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XFRA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat"))))) (om-make-point 9 225) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE1" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XNFO") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "Info")))) (om-make-point 88 225) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XNFO" :description (list "Info") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 471 112) (om-make-point 57 30) "XMAT" "\"XMAT\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1" "par2" "par3")))) (om-make-point 166 225) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 84 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 60))) (om-make-point 312 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIF-BUFFER" (quote sdif-buffer) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TYPES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LFRAMES" nil))) (om-make-point 198 397) (om-make-point 132 58) (when (find-class (quote sdif-buffer) nil) (make-instance (quote sdif-buffer))) "x" nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 300 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 196 595) (om-make-point 130 66) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SDIF-FILE" (quote save-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "PATHNAME" nil))) (om-make-point 199 525) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 290 510) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 308 466) (om-make-point 66 30) "test.sdif" "\"test.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment8" (om-make-point 200 32) (quote "Write an SDIF File") "" (om-make-point 277 5) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment7" (om-make-point 131 27) (quote "Declare 3 new types") "" (om-make-point 10 196) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment6" (om-make-point 138 23) (quote "Create 2 SDIF Matrices") "" (om-make-point 540 269) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 138 23) (quote "Create 1 SDIF frame") "" (om-make-point 452 311) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 110 22) (quote "Repeat n times") "" (om-make-point 373 356) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 156 49) (quote "Store the SDIF frames + types declarations in a SDIF buffer") "" (om-make-point 348 404) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 127 24) (quote "Save in an SDIF file$") "" (om-make-point 339 576) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 35) (quote "(double click to open with SDIF-Edit)") "" (om-make-point 336 625) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 2 2 nil 0) (1 0 2 3 nil 0) (1 2 2 4 nil 0) (3 0 2 5 nil 0) (16 0 4 2 nil 0) (8 0 4 4 nil 0) (7 0 5 2 nil 0) (6 0 5 3 nil 0) (5 0 8 0 nil 0) (2 0 8 1 nil 0) (9 0 13 0 nil 0) (10 0 13 1 nil 0) (12 0 13 2 nil 0) (4 0 14 0 nil 0) (13 0 15 1 nil 0) (14 0 15 2 nil 0) (18 0 17 0 nil 0) (15 0 18 0 nil 0) (19 0 18 1 nil 0) (20 0 19 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 48 41)) (setf (pict-size newpict) (om-make-point 156 127)) newpict)) 6.2))
