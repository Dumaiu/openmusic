;fileheader
; (5.11 :patc (om-make-point 167 450) (om-make-point 0 44) (om-make-point 731 700) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "save-sdif-file" '((om-load-boxcall 'abstraction "08-sdif-write-file-21" (om-load-patch-abs1 "using-File-box" '((om-load-boxcomment "comment" (om-make-point 42 28) '"Data" "" (om-make-point 34 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 84 24) '"File to create" "" (om-make-point 229 158) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 200 32) '"using the File-Box" "" (om-make-point 317 36) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 200 32) '"Write an SDIF File" "" (om-make-point 213 8) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxwithed1 'box-with-win "FILE-BOX1" 'file-box 'nil (om-make-point 474 127) nil nil nil (list (om-load-seqbox "init" 'initdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 50 170) nil nil nil 0) (let ((box (om-load-boxcall 'genfun "StreamFile" 'streamfile '((om-load-inputfun 'input-funbox "pathname or string" "PATHNAME" nil)) (om-make-point 85 82) nil nil nil nil 1))) (setf (filetype box) 'text (direction box) :io (if-ex box) :supersede) box) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 115 161) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 5 170) nil nil nil 0)) 'nil 1 nil nil) (om-load-boxcomment "comment" (om-make-point 173 67) '"A special loop with a file stream pointer.$This box allow to write Text or SDIF file" "" (om-make-point 412 199) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 80 40) '"FILE-BOX" "" (om-make-point 454 92) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 234 183) (om-make-point 70 23) "morphx.sdif" "\"morphx.sdif\"" nil) (om-load-boxcall 'genfun "OUTFILE" 'outfile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 250 206) nil nil nil nil 1) (om-load-editor-box1 "BPF-LIB1" 'bpf-lib '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "BPF-LIST" (list (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10) '(0 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)))) (om-make-point 80 150) (om-make-point 127 106) (if (find-class 'bpf-lib nil) (make-instance 'bpf-lib :bpf-list (list (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 76 78 80 82 84 86 88 90 92 94 96 98 100) '(0 11 21 27 33 40 44 47 49 51 52 51 50 47 45 40 38 35 32 30 29 27 26 25 24 23 23 23 23 24 24 25 26 26 27 27 28 28 28 28 28 28 28 27 28 32 35 45 59 88) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99) '(0 11 20 26 32 38 43 46 48 50 50 50 48 46 44 40 38 35 32 31 29 27 26 25 24 23 23 23 23 24 24 24 25 26 26 27 27 27 27 27 27 27 27 27 28 31 34 43 57 85) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 75 77 79 81 83 85 87 89 91 93 95 97 99) '(0 10 20 25 31 37 42 44 46 48 49 49 47 46 43 39 38 34 32 31 30 28 26 25 24 23 23 23 23 24 23 24 25 25 26 26 27 27 27 27 27 27 27 26 27 30 33 42 55 81) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98) '(0 10 19 24 30 36 40 43 45 47 48 47 46 45 42 39 37 34 32 31 30 28 27 26 25 23 23 23 23 23 23 24 24 25 25 25 26 26 26 26 26 26 26 25 26 29 32 40 52 78) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 93 95 97) '(0 10 18 23 29 34 39 41 43 45 46 46 45 44 42 38 37 34 32 31 30 28 27 26 25 24 23 23 23 23 23 23 24 24 25 25 25 25 25 25 25 25 25 25 26 28 31 39 50 74) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97) '(0 9 17 22 28 33 37 40 42 44 45 45 44 43 41 38 37 34 32 31 30 29 28 26 25 24 23 23 23 23 23 23 23 24 24 24 25 25 25 25 25 25 25 24 25 27 30 37 48 71) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 72 74 76 78 80 82 84 86 88 90 92 94 96) '(0 9 17 21 26 32 36 38 40 42 43 43 43 42 40 38 36 34 32 31 31 29 28 27 26 24 23 23 23 23 22 22 23 23 24 24 24 24 24 24 24 24 24 24 24 27 29 36 46 67) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 89 91 93 95) '(0 8 16 20 25 30 35 37 39 41 42 42 41 41 39 37 36 34 33 32 31 29 28 27 26 24 23 23 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 23 24 26 28 35 44 64) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 62 64 66 68 70 71 73 75 77 79 81 83 85 87 89 91 93 95) '(0 8 15 19 24 29 33 35 37 39 41 41 40 40 38 37 36 34 33 32 31 30 29 28 26 24 23 22 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 22 23 25 27 33 42 60) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 13 15 17 19 21 23 25 27 29 31 33 35 36 38 40 42 44 46 48 50 52 54 56 58 59 61 63 65 67 69 71 73 75 77 79 81 82 84 86 88 90 92 94) '(0 7 14 18 23 28 32 34 36 38 39 39 39 39 38 36 35 34 33 32 31 30 29 28 27 24 23 22 22 22 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 24 26 32 40 57) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 11 13 15 17 19 21 23 25 27 29 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 70 72 74 76 78 80 82 84 86 88 90 91 93) '(0 7 13 17 22 27 30 33 34 36 38 38 38 38 37 36 35 34 33 32 31 30 29 28 27 25 23 22 22 22 21 21 21 21 21 21 21 21 21 21 21 21 21 21 22 23 25 30 38 53) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 9 11 13 15 17 19 21 23 25 26 28 30 32 34 36 38 40 42 43 45 47 49 51 53 55 57 59 61 62 64 66 68 70 72 74 76 78 79 81 83 85 87 89 91 93) '(0 7 13 17 21 25 29 31 33 35 36 37 37 37 36 35 35 33 33 32 32 31 30 29 27 25 23 22 22 21 21 20 21 21 21 21 21 21 21 21 21 21 21 20 21 22 24 29 36 50) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 9 11 13 15 17 19 21 23 24 26 28 30 32 34 36 38 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 69 71 73 75 77 79 81 83 84 86 88 90 92) '(0 6 12 16 20 24 27 30 31 33 35 35 36 36 35 35 34 33 33 32 32 31 30 29 28 25 23 22 22 21 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 22 23 28 34 46) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 35 37 39 41 43 45 47 48 50 52 54 56 58 60 62 63 65 67 69 71 73 75 76 78 80 82 84 86 88 89 91) '(0 6 11 15 19 23 26 28 30 32 34 34 34 35 35 34 34 33 33 32 32 31 30 30 28 25 23 22 22 21 20 20 20 20 20 19 19 19 19 19 19 19 19 19 19 21 22 26 32 43) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 19 20 22 24 26 28 30 31 33 35 37 39 41 43 44 46 48 50 52 54 56 57 59 61 63 65 67 68 70 72 74 76 78 80 81 83 85 87 89 91) '(0 5 10 14 17 21 25 27 28 31 32 33 33 34 34 34 34 33 33 33 32 32 31 30 28 25 23 22 21 21 20 19 19 19 19 19 19 19 19 19 19 19 19 18 19 20 21 25 30 39) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 39 40 42 44 46 48 50 51 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90) '(0 5 9 13 16 20 23 25 27 29 31 31 32 33 33 33 33 33 33 33 33 32 31 30 29 25 24 22 21 21 19 19 19 19 18 18 18 18 18 18 18 18 18 18 18 19 20 23 27 36) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 15 16 18 20 22 24 26 27 29 31 33 35 36 38 40 42 44 46 47 49 51 53 55 57 58 60 62 64 66 67 69 71 73 75 77 78 80 82 84 86 88 89) '(0 4 9 12 15 19 22 24 25 28 29 30 31 32 32 33 33 33 33 33 33 32 32 31 29 25 24 22 21 20 19 19 18 18 18 18 17 17 17 17 17 17 17 17 17 18 19 22 25 32) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 14 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 62 63 65 67 69 71 72 74 76 78 80 81 83 85 87 89) '(0 4 8 11 14 17 20 22 24 26 28 29 30 31 32 32 33 33 33 33 33 33 32 31 29 26 24 22 21 20 19 18 18 18 17 17 17 17 17 17 17 17 17 17 17 17 18 20 23 29) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 14 16 18 20 22 23 25 27 29 31 32 34 36 38 40 41 43 45 47 48 50 52 54 56 57 59 61 63 65 66 68 70 72 74 75 77 79 81 83 84 86 88) '(0 4 7 10 13 16 19 21 23 25 27 27 29 30 31 32 33 33 33 33 33 33 32 31 30 26 24 22 21 20 19 18 17 17 17 16 16 16 16 16 16 16 16 16 16 17 17 19 21 25) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 20 21 23 25 27 29 30 32 34 36 37 39 41 43 45 46 48 50 52 53 55 57 59 61 62 64 66 68 70 71 73 75 77 78 80 82 84 86 87) '(0 3 6 9 12 15 17 19 21 23 25 26 27 29 30 31 32 33 33 33 34 33 33 32 30 26 24 22 21 20 18 17 17 17 16 16 15 15 15 15 15 15 15 15 15 16 16 18 19 22) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 19 21 23 25 26 28 30 32 33 35 37 39 40 42 44 46 47 49 51 53 54 56 58 60 61 63 65 67 68 70 72 74 75 77 79 81 82 84 86) '(0 2 5 7 10 12 15 16 18 20 22 24 25 27 29 30 32 32 33 34 34 34 33 33 31 26 24 22 20 19 18 17 16 16 15 15 14 14 14 14 14 14 14 14 14 14 14 15 15 15) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 4 6 8 10 12 14 16 18 20 22 24 26 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 78 80 82 84 86 88 90 92 94 96 98 100 102) '(103 101 100 98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 55 53 51 49 46 45 43 40 38 36 34 31 29 26 24 22 19 17 15 13 11 8 7 5 2 0) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99 101) '(98 97 95 94 92 90 88 86 84 83 81 79 77 75 74 72 70 69 67 65 63 61 59 57 54 52 50 48 45 43 42 39 37 35 33 30 28 26 24 21 19 17 15 13 11 9 7 6 3 1) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100) '(93 92 91 89 88 86 84 83 81 79 78 76 74 73 72 70 68 67 65 63 61 59 58 56 53 50 48 46 43 42 40 38 36 34 32 29 27 25 23 21 19 17 15 13 11 9 7 6 3 1) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100) '(88 87 86 85 84 82 81 79 78 76 75 73 72 70 69 68 67 65 63 62 60 58 56 54 52 49 47 45 42 41 39 37 35 33 31 29 26 25 23 21 19 17 15 13 12 9 8 6 4 2) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99) '(83 83 82 81 79 78 77 76 74 73 72 71 69 68 67 66 65 63 62 60 58 57 55 53 50 48 46 44 41 40 38 36 34 32 30 28 26 24 22 20 18 17 15 13 12 9 8 7 5 3) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 76 78 80 82 84 86 88 90 92 94 96 98) '(78 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 61 60 58 57 55 54 52 49 47 44 42 40 38 37 35 33 31 29 27 25 24 22 20 18 17 15 13 12 10 8 7 5 4) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 95 97) '(74 73 73 72 71 70 70 69 68 67 66 65 64 63 63 62 61 59 58 57 56 54 52 51 48 45 43 41 39 37 36 33 31 30 28 26 24 23 21 19 18 16 15 13 12 10 9 8 6 4) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97) '(69 68 68 68 67 67 66 65 64 64 63 62 61 61 60 60 59 58 57 55 54 53 51 50 47 44 42 40 37 36 34 32 30 29 27 25 24 22 21 19 18 16 15 13 12 10 9 8 6 5) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 80 82 84 86 88 90 92 94 96) '(64 64 64 63 63 63 62 62 61 61 60 59 59 58 58 58 57 56 55 54 53 51 50 48 46 43 41 38 36 35 33 31 29 28 27 25 23 22 20 19 17 16 15 14 12 10 9 9 7 6) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 11 13 15 16 18 20 22 24 26 28 30 32 34 36 38 40 41 43 45 47 49 51 53 55 57 59 61 63 64 66 68 70 72 74 76 78 80 82 84 86 87 89 91 93 95) '(59 59 59 59 59 59 59 58 58 58 57 57 56 56 56 56 55 54 53 52 51 50 49 47 45 42 39 37 35 34 32 30 28 27 26 24 22 21 20 18 17 16 15 14 12 11 10 9 8 6) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 11 12 14 16 18 20 22 24 26 28 30 32 33 35 37 39 41 43 45 47 49 51 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 92 94) '(54 54 55 55 55 55 55 55 55 54 54 54 54 53 54 53 53 52 51 51 50 49 47 46 43 40 38 36 34 32 31 29 27 26 25 23 22 21 19 18 17 16 15 14 13 11 10 10 8 7) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 7 9 10 12 14 16 18 20 22 24 26 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 61 63 65 67 69 71 73 75 77 78 80 82 84 86 88 90 92 94) '(49 50 50 50 51 51 51 51 51 51 52 51 51 51 51 51 51 50 50 49 48 47 46 45 42 39 37 35 33 31 30 28 26 25 24 22 21 20 19 18 17 16 15 14 13 11 10 10 9 8) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 5 6 8 10 12 14 16 18 20 22 23 25 27 29 31 33 35 37 38 40 42 44 46 48 50 52 53 55 57 59 61 63 65 67 68 70 72 74 76 78 80 82 83 85 87 89 91 93) '(44 45 46 46 47 47 48 48 48 48 49 48 48 49 49 49 49 49 48 48 47 46 45 44 41 38 35 33 31 30 28 27 25 24 23 22 20 19 18 17 16 15 15 14 13 12 11 11 9 9) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 32 34 36 38 40 42 44 45 47 49 51 53 55 57 59 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 88 90 92) '(39 40 41 42 43 43 44 44 45 45 46 46 46 46 47 47 47 47 46 46 45 45 44 42 40 36 34 32 30 29 27 26 24 23 22 21 20 19 18 17 16 15 14 14 13 12 11 11 10 9) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 3 4 6 8 10 12 14 15 17 19 21 23 25 27 28 30 32 34 36 38 40 41 43 45 47 49 51 52 54 56 58 60 62 64 65 67 69 71 73 75 77 78 80 82 84 86 88 89 91) '(34 35 36 38 38 39 40 41 41 42 43 43 43 44 44 45 45 45 45 45 44 43 42 41 39 35 33 31 29 28 26 24 23 22 21 20 19 18 17 17 16 15 14 14 13 12 12 12 11 10) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(1 2 4 6 8 10 12 13 15 17 19 21 23 24 26 28 30 32 34 35 37 39 41 43 45 46 48 50 52 54 56 58 59 61 63 65 67 69 70 72 74 76 78 80 81 83 85 87 89 91) '(29 31 32 33 34 35 37 37 38 39 40 40 41 41 42 43 43 43 43 43 43 42 41 40 38 34 32 29 28 26 25 23 22 21 20 19 18 18 17 16 16 15 14 14 13 12 12 12 11 11) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 11 13 15 17 19 21 22 24 26 28 30 31 33 35 37 39 41 42 44 46 48 50 52 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90) '(25 26 27 29 30 32 33 34 35 36 37 37 38 39 40 41 41 41 41 41 41 41 40 39 37 33 30 28 26 25 24 22 21 20 19 18 17 17 16 16 15 15 14 14 13 13 12 12 12 11) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 38 40 42 44 46 47 49 51 53 55 56 58 60 62 64 66 67 69 71 73 75 76 78 80 82 84 85 87 89) '(20 21 23 25 26 28 29 30 31 33 34 35 35 37 38 39 39 40 40 40 40 39 38 37 35 31 29 27 25 24 22 21 20 19 19 18 17 16 16 15 15 15 14 14 13 13 13 13 13 12) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 61 63 65 67 69 70 72 74 76 78 79 81 83 85 86 88) '(15 17 18 20 22 24 26 27 28 30 31 32 33 34 35 37 37 38 38 38 38 38 37 36 34 30 28 26 24 23 21 20 19 18 18 17 16 16 15 15 15 14 14 14 14 13 13 13 13 13) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 14 16 18 20 22 23 25 27 29 30 32 34 36 38 39 41 43 45 47 48 50 52 54 55 57 59 61 63 64 66 68 70 71 73 75 77 79 80 82 84 86 88) '(10 12 14 16 18 20 22 23 25 26 28 29 30 32 33 35 35 36 36 37 37 37 36 35 33 29 26 24 23 22 20 19 18 17 17 16 15 15 15 15 15 14 14 14 14 13 13 14 14 14) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 76 78 80 82 84 86 88 90 92 94 96 98 100) '(0 2 4 6 8 10 11 13 16 18 20 22 24 26 28 30 32 34 36 38 40 41 43 46 47 49 51 53 55 57 59 61 63 65 67 69 71 74 76 78 80 83 85 87 89 91 93 96 97 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99) '(0 2 4 6 8 10 11 13 16 18 20 22 24 26 28 30 32 34 36 38 40 41 42 45 46 48 50 52 53 55 57 59 61 63 64 67 69 71 73 75 77 79 81 83 85 87 90 92 93 96) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 75 77 79 81 83 85 87 89 91 93 95 97 99) '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 35 37 39 41 42 45 45 47 48 50 52 54 55 57 59 60 62 64 66 68 70 72 73 76 78 80 82 84 86 88 89 92) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98) '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 35 37 39 40 42 44 45 46 47 49 50 52 53 55 57 58 59 62 63 65 67 69 70 73 75 76 78 80 82 84 85 88) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 73 75 77 79 81 83 85 87 89 91 93 95 97) '(0 2 4 6 8 10 12 14 16 18 20 23 24 26 28 30 32 33 35 37 39 40 41 43 44 45 46 47 49 50 51 53 54 56 57 59 61 62 64 65 67 69 71 73 75 76 78 80 81 84) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97) '(0 2 4 6 9 10 12 14 16 18 20 23 24 26 28 30 32 33 35 37 38 40 41 43 43 44 45 46 47 48 49 51 52 53 54 56 58 59 61 62 64 66 68 69 71 73 74 76 77 80) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 20 22 24 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 72 74 76 78 80 82 84 86 88 90 92 94 96) '(0 2 4 6 9 10 12 14 17 19 20 23 24 26 28 30 32 33 35 37 38 39 40 42 42 43 43 44 45 46 47 49 50 51 52 54 55 57 58 59 61 63 65 66 67 69 71 73 74 76) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 16 18 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 89 91 93 95) '(0 2 4 7 9 11 12 14 17 19 21 23 24 26 28 30 32 33 35 36 38 39 40 41 42 41 42 43 44 44 45 46 48 49 50 51 52 54 55 56 58 60 61 63 64 65 67 69 70 72) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 14 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 44 46 48 50 52 54 56 58 60 62 64 66 68 70 71 73 75 77 79 81 83 85 87 89 91 93 95) '(0 2 4 7 9 11 12 14 17 19 21 23 24 26 28 30 32 33 35 36 38 39 39 41 41 40 41 41 42 43 43 44 45 46 47 49 50 51 52 53 55 56 58 59 60 62 63 65 66 68) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 12 13 15 17 19 21 23 25 27 29 31 33 35 36 38 40 42 44 46 48 50 52 54 56 58 59 61 63 65 67 69 71 73 75 77 79 81 82 84 86 88 90 92 94) '(0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 35 36 37 38 39 40 40 39 39 40 40 41 41 42 43 44 45 46 47 48 49 50 52 53 54 56 57 58 59 61 62 64) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 10 11 13 15 17 19 21 23 25 27 29 30 32 34 36 38 40 42 44 46 48 50 51 53 55 57 59 61 63 65 67 69 70 72 74 76 78 80 82 84 86 88 90 91 93) '(0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 36 37 38 38 40 39 38 38 38 39 39 39 40 41 42 42 43 44 45 46 47 48 50 51 52 53 54 56 57 58 60) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 9 11 13 15 17 19 21 23 25 26 28 30 32 34 36 38 40 42 43 45 47 49 51 53 55 57 59 61 62 64 66 68 70 72 74 76 78 79 81 83 85 87 89 91 93) '(0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 36 37 38 38 39 38 37 37 37 37 37 37 38 39 39 40 41 41 42 43 44 45 47 48 49 50 51 52 53 54 55) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 8 9 11 13 15 17 19 21 23 24 26 28 30 32 34 36 38 39 41 43 45 47 49 51 53 54 56 58 60 62 64 66 68 69 71 73 75 77 79 81 83 84 86 88 90 92) '(0 2 4 7 9 11 13 15 17 19 21 23 24 27 28 30 32 33 34 35 36 37 37 38 38 36 35 35 35 35 35 36 36 37 37 38 39 40 40 41 42 43 44 45 46 47 48 49 50 51) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 19 21 22 24 26 28 30 32 34 35 37 39 41 43 45 47 48 50 52 54 56 58 60 62 63 65 67 69 71 73 75 76 78 80 82 84 86 88 89 91) '(0 2 5 7 9 11 13 15 17 19 21 23 25 27 28 30 32 33 34 35 36 37 37 38 37 35 34 34 34 34 33 34 34 34 35 35 36 37 37 38 39 40 41 42 42 43 44 46 46 47) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 19 20 22 24 26 28 30 31 33 35 37 39 41 43 44 46 48 50 52 54 56 57 59 61 63 65 67 68 70 72 74 76 78 80 81 83 85 87 89 91) '(0 2 5 7 9 11 13 15 17 19 21 23 25 27 28 30 32 33 34 35 36 36 37 37 36 34 33 32 32 32 32 31 32 32 32 33 33 34 35 35 36 37 38 38 39 40 40 42 42 43) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 6 7 9 11 13 15 17 18 20 22 24 26 28 29 31 33 35 37 39 40 42 44 46 48 50 51 53 55 57 59 61 62 64 66 68 70 72 73 75 77 79 81 83 84 86 88 90) '(0 2 5 7 9 11 14 15 17 20 22 23 25 27 28 30 32 33 34 35 36 36 36 36 35 33 32 31 30 30 30 29 30 30 30 30 30 31 32 32 33 34 34 35 35 36 37 38 38 39) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 15 16 18 20 22 24 26 27 29 31 33 35 36 38 40 42 44 46 47 49 51 53 55 57 58 60 62 64 66 67 69 71 73 75 77 78 80 82 84 86 88 89) '(0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 34 35 35 36 36 36 35 32 30 29 29 28 28 27 27 27 27 28 28 28 29 29 30 30 31 31 32 32 33 34 35 35) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 14 16 18 20 22 24 25 27 29 31 33 34 36 38 40 42 43 45 47 49 51 52 54 56 58 60 62 63 65 67 69 71 72 74 76 78 80 81 83 85 87 89) '(0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 34 34 35 35 35 35 34 31 29 28 27 26 26 25 25 25 25 25 25 25 26 26 27 27 27 28 28 29 29 30 31 31) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 13 14 16 18 20 22 23 25 27 29 31 32 34 36 38 40 41 43 45 47 48 50 52 54 56 57 59 61 63 65 66 68 70 72 74 75 77 79 81 83 84 86 88) '(0 2 5 7 9 12 14 16 18 20 22 23 25 27 28 30 32 33 33 34 35 35 35 35 33 29 28 26 25 25 24 23 23 23 22 22 22 23 23 23 23 24 24 24 25 25 25 26 27 27) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 2 4 5 7 9 11 12 14 16 18 20 21 23 25 27 29 30 32 34 36 37 39 41 43 45 46 48 50 52 53 55 57 59 61 62 64 66 68 70 71 73 75 77 78 80 82 84 86 87) '(0 2 5 7 10 12 14 16 18 20 22 23 25 27 29 30 32 33 33 34 35 35 34 34 32 28 26 25 24 23 22 21 21 20 20 20 19 20 20 20 20 21 21 21 21 21 22 22 23 23) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) :from-file t)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-editor-box1 "SDIFFILE" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 161 345) (om-make-point 121 61) (let ((newobj (make-instance 'sdiffile))) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxwithed1 'box-with-win "FILE-BOX" 'file-box '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil) (om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 203 276) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 121 28) '"Declare new types" "" (om-make-point 27 115) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 127 44) '"Writes a Frame in an SDIF file stream" "" (om-make-point 389 556) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 102 55) '"Create an SDIF Frame with each BPF from the list" "" (om-make-point 346 428) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 80 40) '"Return the filename" "" (om-make-point 526 197) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 111 37) '"This box represents the file stream" "" (om-make-point 366 207) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 98 52) '"Before to start the loop:$Write file header" "" (om-make-point 27 427) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 246 178) nil nil nil nil 1) (om-load-boxcall 'lispfun "FLOAT" 'float '((om-load-inputfun 'input-funbox "NUMBER" "NUMBER" nil)) (om-make-point 231 440) nil nil nil nil 1) (om-load-boxcall 'genfun "count" 'counter '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" 't)) (om-make-point 108 510) nil nil nil nil 3) (om-load-editor-box1 "SDIFFRAME" 'sdifframe '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun 'input-funbox "no documentation" "FTIME" 0.0) (om-load-inputfun 'input-funbox "no documentation" "STREAMID" 0) (om-load-inputfun 'input-funbox "no documentation" "LMATRIX" nil)) (om-make-point 189 480) (om-make-point 122 51) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) nil nil nil) (om-load-boxcall 'lispfun "LIST1" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 257 428) nil nil nil nil 1) (om-load-boxcall 'lispfun "POINT-LIST" 'point-list '((om-load-inputfun 'input-funbox "3DS" "3DS" nil)) (om-make-point 209 283) nil nil nil nil 1) (om-load-boxcall 'lispfun "LENGTH" 'length '((om-load-inputfun 'input-funbox "SEQUENCE" "SEQUENCE" nil)) (om-make-point 212 322) nil nil nil nil 1) (om-load-editor-box1 "SDIFMATRIX" 'sdifmatrix '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "How many matrix fields?" "numrows" 1) (om-load-inputfun 'input-funbox "matrix type" "signature" "XMAT") (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':k0)) (om-make-point 219 364) (om-make-point 57 50) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) nil) (setf (lcontrols copy) (list)) (setf (lprecision copy) (list 3)) copy)) nil nil (make-instance 'ed-par-array :panel-list '(("All open") ("All close")) :cur-group-ind 0 :color-list nil) nil nil nil) (om-load-boxcall 'lispfun "LIST" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 77 217) nil nil nil nil 1) (om-load-editor-box1 "SDIFTYPE" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'f (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XFRA") (om-load-inputfun 'input-funbox "description du type" "description" (list (list "XMAT" "datamat")))) (om-make-point 110 148) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'f :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-editor-box1 "SDIFTYPE" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'm (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XMAT") (om-load-inputfun 'input-funbox "description du type" "description" (list "par1"))) (om-make-point 29 149) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcall 'genfun "SDIF-WRITE-HEADER" 'sdif-write-header '((om-load-inputfun 'input-funbox "no documentation" "STREAM" nil) (om-load-inputfun 'input-funbox "no documentation" "TYPES" nil)) (om-make-point 71 277) nil nil nil nil 1) (om-load-boxcall 'genfun "SDIF-WRITE-FRAME" 'sdif-write-frame '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "STREAM" nil)) (om-make-point 303 548) nil nil nil nil 1) (om-load-seqbox "init" 'initdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 99 371) nil nil nil 0) (let ((box (om-load-boxcall 'genfun "StreamFile" 'streamfile '((om-load-inputfun 'input-funbox "pathname or string" "PATHNAME" nil)) (om-make-point 331 146) nil nil nil nil 1))) (setf (filetype box) 'sdif (direction box) :output (if-ex box) :supersede) box) (om-load-boxin "input1" 1 (om-make-point 357 55) "no documentation" "FILE-PATH" nil nil) (om-load-boxin "input0" 0 (om-make-point 243 85) "no documentation" "BPF-LIST" nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 549 146) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil) (om-load-inputfun 'input-funbox "patch" "OPPATCH" nil)) (om-make-point 326 626) nil nil nil 0)) '((22 0 6 0 nil 0) (8 1 7 0 nil 0) (7 0 9 2 nil 0) (10 0 9 4 nil 0) (13 0 10 0 nil 0) (6 0 11 0 nil 0) (11 0 12 0 nil 0) (12 0 13 1 nil 0) (6 0 13 3 nil 0) (16 0 14 0 nil 0) (15 0 14 1 nil 0) (20 0 17 0 nil 0) (14 0 17 1 nil 0) (20 0 18 0 nil 0) (9 0 18 1 nil 0) (17 0 19 0 nil 0) (21 0 20 0 nil 0) (21 0 23 0 nil 0) (18 0 24 0 nil 0) (8 0 24 1 nil 0)) 1 nil nil)) '((7 0 8 0 nil 0) (11 0 10 0 nil 0) (9 1 11 0 nil 0) (8 0 11 1 nil 0)) 5.11 nil) 'nil (om-make-point 16 587) nil nil nil "using-File-box") (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 500 47) (om-make-point 172 65) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) t nil nil) (om-load-editor-box1 "SDIFMATRIX1" 'sdifmatrix '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "How many matrix fields?" "numrows" 30) (om-load-inputfun 'input-funbox "matrix type" "signature" "") (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par1) (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par2) (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par3)) (om-make-point 445 156) (om-make-point 180 111) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy)) nil nil (make-instance 'ed-par-array :panel-list '(("All open") ("All close")) :cur-group-ind 0 :color-list nil) t nil nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 643 124) (om-make-point 52 24) (list 5 7 8 2) "(5 7 8 2)" nil) (om-load-editor-box1 "SDIFFRAME" 'sdifframe '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun 'input-funbox "no documentation" "FTIME" 0.0) (om-load-inputfun 'input-funbox "no documentation" "STREAMID" 0) (om-load-inputfun 'input-funbox "no documentation" "LMATRIX" nil)) (om-make-point 306 272) (om-make-point 138 63) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.020552376323477 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-editor-box1 "SDIFMATRIX" 'sdifmatrix '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "How many matrix fields?" "numrows" 1) (om-load-inputfun 'input-funbox "matrix type" "signature" "") (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':k0)) (om-make-point 360 156) (om-make-point 72 60) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) nil nil (make-instance 'ed-par-array :panel-list '(("All open") ("All close")) :cur-group-ind 0 :color-list nil) nil nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 424 124) (om-make-point 21 20) 4 "4" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 378 124) (om-make-point 41 22) "XNFO" "\"XNFO\"" nil) (om-load-boxcall 'lispfun "LIST1" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 411 230) nil nil nil nil 1) (om-load-editor-box1 "SDIFTYPE2" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'f (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XFRA") (om-load-inputfun 'input-funbox "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")))) (om-make-point 9 225) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'f :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-editor-box1 "SDIFTYPE1" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'm (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XNFO") (om-load-inputfun 'input-funbox "description du type" "description" (list "Info"))) (om-make-point 88 225) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XNFO" :description (list "Info") :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 479 130) (om-make-point 43 22) "XMAT" "\"XMAT\"" nil) (om-load-editor-box1 "SDIFTYPE" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'm (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XMAT") (om-load-inputfun 'input-funbox "description du type" "description" (list "par1" "par2" "par3"))) (om-make-point 166 225) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcall 'lispfun "LIST2" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 84 286) nil nil nil nil 1) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 60)) (om-make-point 312 337) nil nil nil nil 1) (om-load-editor-box1 "SDIF-BUFFER" 'sdif-buffer '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TYPES" nil) (om-load-inputfun 'input-funbox "no documentation" "LFRAMES" nil)) (om-make-point 198 407) (om-make-point 132 58) (if (find-class 'sdif-buffer nil) (make-instance 'sdif-buffer :types (list (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'f :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XNFO" :description (list "Info") :from-file t)) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t))) :lframes (list (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.09321311506109892 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.22978730542545636 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.45919105496106866 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.7016183262721045 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9276206249885645 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9539733286089698 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9604699182519129 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.0322132912133135 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.0477207061792178 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.5989417426268415 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9164193829827372 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9166930614350233 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9398137404393663 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.0452956707129175 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.121925916749846 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.495906711548393 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.5661583665128025 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.637771838601254 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.835524515873798 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.902104096304819 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.325077599520008 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.41420354957544 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.5077955452870495 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.5844198867388437 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.745516936752045 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.062650248525013 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.178011779073648 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.196602933475008 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.386463303838788 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.658937928562868 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.69584933425458 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.701523044521964 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.042470255945753 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.229809554721805 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.42684254316025 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.467888648561926 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.500343731605156 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.524037211246858 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.609023544209122 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.623317166461269 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.633235118600046 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.645403406853608 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.686726543468845 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.710139508750549 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 6.176189735859986 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.020552376323477 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.13932884324217 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.289212676303858 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.40255515538632 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.60334655196098 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.608511313066839 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.8414754529324835 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.992137182489293 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.158495609012423 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.266083296884005 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.767954052925024 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.398119206350518 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.698642920141374 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.742889943985064 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.859561640507657 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t))) :from-file t)) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0.0) (om-load-inputfun 'input-funbox "max" "HIGH" 10.0)) (om-make-point 300 203) nil nil nil nil 1) (om-load-editor-box1 "SDIFFILE" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 203 575) (om-make-point 130 66) (let ((newobj (om-load-if (make-pathname :directory '(:relative "out-files") :device :unspecific :name "test" :type "sdif") 'load-sdif-file))) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcall 'genfun "SAVE-SDIF-FILE" 'save-sdif-file '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "PATHNAME" nil)) (om-make-point 206 505) nil nil nil nil 1) (om-load-boxcall 'genfun "OUTFILE" 'outfile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 297 490) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 308 466) (om-make-point 48 23) "test.sdif" "\"test.sdif\"" nil) (om-load-boxcomment "comment8" (om-make-point 200 32) '"Write an SDIF File" "" (om-make-point 277 5) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment7" (om-make-point 131 27) '"Declare 3 new types" "" (om-make-point 10 196) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment6" (om-make-point 138 23) '"Create 2 SDIF Matrices" "" (om-make-point 540 269) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment4" (om-make-point 138 23) '"Create 1 SDIF frame" "" (om-make-point 452 311) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 110 22) '"Repeat n times" "" (om-make-point 373 356) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment2" (om-make-point 156 49) '"Store the SDIF frames + types declarations in a SDIF buffer" "" (om-make-point 348 414) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 127 24) '"Save in an SDIF file$" "" (om-make-point 346 556) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 140 35) '"(double click to open with SDIF-Edit)" "" (om-make-point 343 605) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor)))) '((11 0 2 2 nil 0) (1 0 2 3 nil 0) (1 2 2 4 nil 0) (3 0 2 5 nil 0) (16 0 4 2 nil 0) (8 0 4 4 nil 0) (7 0 5 2 nil 0) (6 0 5 3 nil 0) (5 0 8 0 nil 0) (2 0 8 1 nil 0) (9 0 13 0 nil 0) (10 0 13 1 nil 0) (12 0 13 2 nil 0) (4 0 14 0 nil 0) (13 0 15 1 nil 0) (14 0 15 2 nil 0) (18 0 17 0 nil 0) (15 0 18 0 nil 0) (19 0 18 1 nil 0) (20 0 19 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))









