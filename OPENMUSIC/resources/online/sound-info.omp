;fileheader
; (5.11 :patc (om-make-point 193 510) (om-make-point 0 44) (om-make-point 719 411) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sound-info" '((om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 132 96) (om-make-point 75 25) "pulse1b.aiff" "\"pulse1b.aiff\"" nil) (om-load-boxcall 'genfun "INFILE" 'infile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 152 124) nil nil nil nil 1) (om-load-boxcall 'lispfun "OM-SOUND-FILE-NAME" 'om-sound-file-name '((om-load-inputfun 'input-funbox "SELF" "SELF" nil)) (om-make-point 130 293) nil nil nil nil 1) (om-load-boxcall 'lispfun "OM-SOUND-FORMAT" 'om-sound-format '((om-load-inputfun 'input-funbox "SELF" "SELF" nil)) (om-make-point 599 293) nil nil nil nil 1) (om-load-boxcall 'lispfun "OM-SOUND-N-CHANNELS" 'om-sound-n-channels '((om-load-inputfun 'input-funbox "SELF" "SELF" nil)) (om-make-point 482 293) nil nil nil nil 1) (om-load-boxcall 'lispfun "OM-SOUND-SAMPLE-RATE" 'om-sound-sample-rate '((om-load-inputfun 'input-funbox "SELF" "SELF" nil)) (om-make-point 358 293) nil nil nil nil 1) (om-load-boxcall 'lispfun "OM-SOUND-N-SAMPLES" 'om-sound-n-samples '((om-load-inputfun 'input-funbox "SELF" "SELF" nil)) (om-make-point 237 293) nil nil nil nil 1) (om-load-boxcall 'genfun "SOUND-DUR-MS" 'sound-dur-ms '((om-load-inputfun 'input-funbox "sound file or pathname" "S" nil)) (om-make-point 48 293) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 57 27) '"SOUND" "" (om-make-point 76 217) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 141 42) '"Get informations about a sound file" "" (om-make-point 268 192) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "SOUND" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 144 199) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "WorkSpaces" "OMWorkspace" "in-files") :device :unspecific :name "pulse1b" :type "aiff") 1))) (when thesound (setf (markers thesound) 'nil)) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 160 37) '"SOUND INFO" "" (om-make-point 286 5) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor)))) '((0 0 1 0 nil 0) (10 0 2 0 nil 0) (10 0 3 0 nil 0) (10 0 4 0 nil 0) (10 0 5 0 nil 0) (10 0 6 0 nil 0) (10 0 7 0 nil 0) (1 0 10 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))
























































































































































