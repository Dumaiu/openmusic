; OM File Header - Saved 2021/07/13 18:34:04
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 730 410) "" 183 0 nil "2021/07/13 18:34:04")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\"") (list (quote :sound) "#P\"../../../../../../../../../X/Applications/OM-5.1.1/WorkSpaces/OMWorkspace/in-files/pulse1b.aiff\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sound-info" (quote ((let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 134 96) (om-make-point 75 25) "pulse1b.aiff" "\"pulse1b.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 154 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-FILE-NAME" (quote om-sound-file-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 130 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-FORMAT" (quote om-sound-format) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 599 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-N-CHANNELS" (quote om-sound-n-channels) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 482 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-SAMPLE-RATE" (quote om-sound-sample-rate) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 358 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-N-SAMPLES" (quote om-sound-n-samples) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 237 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR-MS" (quote sound-dur-ms) (quote ((om-load-inputfun (quote input-funbox) "sound file or pathname" "S" nil))) (om-make-point 48 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 57 27) (quote "SOUND") "" (om-make-point 76 217) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 141 42) (quote "Get informations about a sound file") "" (om-make-point 301 201) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 144 199) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "X" "Applications" "OM-5.1.1" "WorkSpaces" "OMWorkspace" "in-files")) :device nil :host nil :name "pulse1b" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "pulse1b.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode)) (list nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 37) (quote "SOUND INFO") "" (om-make-point 286 5) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (10 0 2 0 nil 0) (10 0 3 0 nil 0) (10 0 4 0 nil 0) (10 0 5 0 nil 0) (10 0 6 0 nil 0) (10 0 7 0 nil 0) (1 0 10 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
