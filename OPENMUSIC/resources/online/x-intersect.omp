;fileheader
; (5.11 :patc (om-make-point 107 28) (om-make-point 3 44) (om-make-point 513 547) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "x-intersect" '((om-load-boxcomment "comment" (om-make-point 242 127) '"INPUTS:$l1?    list$l2?    list$OPTIONAL INPUTS:$test     symbol, function or Lambda-function$key     symbol, function or Lambda-function$list       other lists$OUTPUT:$returns an intersection of lists ( l1?, l2?  and list  )$" "" (om-make-point 184 32) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 76 47) '"will return $? OM->(2 4)$" "" (om-make-point 318 449) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "X-INTERSECT" 'x-intersect '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 327 386) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 368 332) (om-make-point 61 24) (list 1 2 4 5 4) "(1 2 4 5 4)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 297 332) (om-make-point 61 24) (list 2 4) "(2 4)" nil) (om-load-boxcomment "comment" (om-make-point 97 52) '" will return $? OM-> (2 4 4)$" "" (om-make-point 82 440) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 142 328) (om-make-point 61 24) (list 2 4) "(2 4)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 56 329) (om-make-point 61 24) (list 1 2 4 5 4) "(1 2 4 5 4)" nil) (om-load-boxcall 'genfun "X-INTERSECT" 'x-intersect '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 100 380) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 409 136) '"This function returns a list of elements which are common to both < l1?> and < l2. If the optional <test> argument is added (remember that this module might be extended) , the lists can be compared according to any  predicate ( the default value of <test> being Ôequal). Only elements in< l1?> that return true when compared with all the elements in < l2?> (according to the predicate), are returned in the result list. If the key argument  is included (the default function is identity), its function is first evaluated using each of < l1?> elements as input, and then the lists are compared according to the test on the results of the function. <test> and <key> may also be connected function or subpatch icons in 'lambda' mode. Additional lists can be compared using <list> .$Beware that this operation is not commutative. $" "" (om-make-point 52 174) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 144 24) '"x-intersect" "" (om-make-point 197 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 0 2 0 nil 0) (3 0 2 1 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































