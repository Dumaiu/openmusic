;fileheader
; (5.11 :patc (om-make-point 260 136) (om-make-point 7 44) (om-make-point 500 400) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "mat-trans" '((om-load-boxcomment "comment" (om-make-point 132 82) '"INPUT:$matrix     list $OUTPUT:$returns  matrix   with rows and columns interchanged$" "" (om-make-point 185 37) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 178 38) '"will return$? OM->((1 2) (3 4) (5 6) (7 8) (9 10))" "" (om-make-point 255 317) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 275 209) (om-make-point 133 24) (list (list 1 3 5 7 9) (list 2 4 6 8 10)) "((1 3 5 7 9) (2 4 6 8 10))" nil) (om-load-boxcall 'genfun "MAT-TRANS" 'mat-trans '((om-load-inputfun 'input-funbox "the list" "MATRIX" nil)) (om-make-point 313 251) nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 56 206) (om-make-point 160 24) (list (list 1 2) (list 3 4) (list 5 6) (list 7 8) (list 9 10)) "((1 2) (3 4) (5 6) (7 8) (9 10)) " nil) (om-load-boxcall 'genfun "MAT-TRANS" 'mat-trans '((om-load-inputfun 'input-funbox "the list" "MATRIX" nil)) (om-make-point 108 249) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 178 38) '"will return$? OM->((1 3 5 7 9) (2 4 6 8 10))" "" (om-make-point 49 315) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 236 38) '"Transposes a matrix. That is, it interchanges rows and columns. <matrix> must be a list of lists." "" (om-make-point 117 134) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"mat-trans" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 3 0 nil 0) (4 0 5 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






















































