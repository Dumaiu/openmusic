;fileheader
; (5.11 :patc (om-make-point 170 220) (om-make-point 5 44) (om-make-point 500 400) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "subs-posn" '((om-load-boxcomment "comment" (om-make-point 127 97) '"INPUTS:$lis1         list$posn     list$val           list$OUTPUT:$returns a  list$" "" (om-make-point 184 36) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 273 210) (om-make-point 26 24) (list 'a 'b) "(a b) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 229 209) (om-make-point 26 24) (list 1 3) "(1 3) " nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 175 209) (om-make-point 46 25) (list 1 2 3 4) "(1 2 3 4) " nil) (om-load-boxcall 'genfun "SUBS-POSN" 'subs-posn '((om-load-inputfun 'input-funbox "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun 'input-funbox " a list of indexes" "POSN" (list 1 3)) (om-load-inputfun 'input-funbox "a list" "VAL" (list 'a 'b))) (om-make-point 152 246) (om-make-point 177 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 119 43) '"will return$? OM->(1 a 3 b)$" "" (om-make-point 202 310) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 385 56) '"Substitution of all the elements of <lis1> which are located at <posn> by successive elements from list <val>. If the requested <posn> is not available, the substitution will be skipped." "" (om-make-point 48 140) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"subs-posn" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































