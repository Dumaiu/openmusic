;fileheader
; (5.11 :patc (om-make-point 57 16) (om-make-point 2 44) (om-make-point 551 824) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sort" '((om-load-boxcomment "comment" (om-make-point 203 109) '"INPUT:$lst       list$OPTIONAL INPUTS:$test    symbol, function or Lambda-function$key     symbol, function or Lambda-function$OUTPUT:$returns a sorted list according to a test$" "" (om-make-point 206 47) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 456 97) '"This patch sorts a list of characters according to their ASCII number:$First the symbols are transformed into characters and  encoded following the ASCII code (ignoring uppercase characters). $This is done through the third optional input <key> where we connected 'mypatch' in lambda mode.$The function will sort the list following the character code in an ascending order.$(Note: character and char-code are commonLisp standard functions that can be called directly in OpenMusic inside a patch) $" "" (om-make-point 48 673) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 157 42) '"returns$? OM-> (212 98 96 65 7 5 4 3 1)$" "" (om-make-point 308 359) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 245 56) '"The default value of the optional argument being '<' , this patch will return$? OM-> (1 3 4 5 7 65 96 98 212)$" "" (om-make-point 20 357) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 408 267) (om-make-point 12 22) '> ">" nil) (om-load-boxcall 'genfun "SORT.1" 'sort. '((om-load-inputfun 'input-funbox "the list" "LST" nil) (om-load-inputfun 'input-funbox "test" "TEST" '<)) (om-make-point 376 297) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 289 249) (om-make-point 134 22) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 58 252) (om-make-point 134 22) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil) (om-load-boxcall 'genfun "SORT.1" 'sort. '((om-load-inputfun 'input-funbox "the list" "LST" nil)) (om-make-point 109 299) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 118 460) (om-make-point 122 46) (list 'q 'w 'e 'r 't 'y 'u 'i 'o 'p 'a 's 'd 'f 'g 'h 'j 'k 'l 'z 'x 'c 'v 'b 'n 'm) "(q w e r t y u i o p   a s d f g h j k l z x c v b n m)" nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 219 595) nil nil nil (list (om-load-boxin "input0" 0 (om-make-point 192 42) "no documentation" nil nil nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 185 238) nil nil nil nil 3) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 188 104) nil nil nil nil 1) (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs1 "mypatch" '((om-load-boxcall 'lispfun "CHAR-CODE" 'char-code '((om-load-inputfun 'input-funbox "CHARACTER" "CHARACTER" nil)) (om-make-point 115 121) nil nil nil nil 1) (om-load-boxcall 'lispfun "CHARACTER" 'character '((om-load-inputfun 'input-funbox "THING" "THING" nil)) (om-make-point 117 76) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 123 167) '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxin "input" 0 (om-make-point 131 17) "no documentation" nil nil nil)) '((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0)) 5.11 nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) (om-make-point 182 168) nil nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 192 295) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 125 296) nil nil nil 0)) '((3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0)) 1 nil nil) (om-load-boxcall 'abstraction "mypatch" (om-load-patch-abs1 "mypatch" '((om-load-boxcall 'lispfun "CHAR-CODE" 'char-code '((om-load-inputfun 'input-funbox "CHARACTER" "CHARACTER" nil)) (om-make-point 62 100) nil nil nil nil 1) (om-load-boxcall 'lispfun "CHARACTER" 'character '((om-load-inputfun 'input-funbox "THING" "THING" nil)) (om-make-point 64 56) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 70 147) '((om-load-inputfun 'input-funbox "out" "out" nil)) nil nil) (om-load-boxin "input" 0 (om-make-point 78 -3) "no documentation" nil nil nil)) '((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0)) 5.11 nil) '((om-load-inputfun 'input-funbox "no documentation" "input" nil)) (om-make-point 284 450) nil nil "l" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 237 507) (om-make-point 11 20) '< "<" nil) (om-load-boxcall 'genfun "SORT." 'sort. '((om-load-inputfun 'input-funbox "the list" "LST" nil) (om-load-inputfun 'input-funbox "test" "TEST" '>) (om-load-inputfun 'input-funbox "key" "KEY" nil)) (om-make-point 113 532) (om-make-point 257 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 428 89) '"This module sorts a list. By default, the order of the sort is ascending, but since the module is extensible, you can open a second entry <test> to set the choice of order. If test is '>' the order is descending, '<' indicates ascending, and '=' keeps the same order. One can also open a third input <key> for a function. The function <key> evaluates each element of the list <lst> and the result is then sorted according to the parameter <test>.$a function icon or subpatch icon in 'lambda' mode can be connected to <test> and <key>.$" "" (om-make-point 34 152) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 54 27) '"sort." "" (om-make-point 218 10) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 8 0 nil 0) (13 0 10 0 nil 0) (9 0 13 0 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































