; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 646 873) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sort" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 64 689) (om-make-point 427 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 399 20) "(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 342 384) (om-make-point 171 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 143 21) "(212 98 96 65 7 5 4 3 1)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 75 384) (om-make-point 171 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 143 20) "(1 3 4 5 7 65 96 98 212)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 109) (quote "INPUT:$lst       list$OPTIONAL INPUTS:$test    symbol, function or Lambda-function$key     symbol, function or Lambda-function$OUTPUT:$returns a sorted list according to a test$") "" (om-make-point 246 47) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 533 98) (quote "This patch sorts a list of characters according to their ASCII number:$First the symbols are transformed into characters and  encoded following the ASCII code (ignoring uppercase characters). $This is done through the third optional input <key> where we connected 'mypatch' in lambda mode.$The function will sort the list following the character code in an ascending order.$(Note: character and char-code are commonLisp standard functions that can be called directly in OpenMusic inside a patch) $") "" (om-make-point 54 742) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 245 56) (quote "The default value of the optional argument being '<' , this patch will return$") "" (om-make-point 60 417) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 448 274) (om-make-point 26 30) (quote >) ">" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT.1" (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)))) (om-make-point 416 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 299 273) (om-make-point 136 30) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 98 272) (om-make-point 136 30) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT.1" (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 149 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 69 479) (om-make-point 250 30) (list (quote q) (quote w) (quote e) (quote r) (quote t) (quote y) (quote u) (quote i) (quote o) (quote p) (quote a) (quote s) (quote d) (quote f) (quote g) (quote h) (quote j) (quote k) (quote l) (quote z) (quote x) (quote c) (quote v) (quote b) (quote n) (quote m)) "(q w e r t y u i o p   a s d f g h j k l z x c v b n m)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 259 625) nil nil nil (list (let ((box (om-load-boxin "input0" 0 (om-make-point 192 42) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 185 238) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 188 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "CHAR-CODE" (quote char-code) (quote ((om-load-inputfun (quote input-funbox) "CHARACTER" "CHARACTER" nil))) (om-make-point 115 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHARACTER" (quote character) (quote ((om-load-inputfun (quote input-funbox) "THING" "THING" nil))) (om-make-point 117 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 123 167) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 17) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 182 168) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 192 295) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 125 296) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "CHAR-CODE" (quote char-code) (quote ((om-load-inputfun (quote input-funbox) "CHARACTER" "CHARACTER" nil))) (om-make-point 124 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHARACTER" (quote character) (quote ((om-load-inputfun (quote input-funbox) "THING" "THING" nil))) (om-make-point 126 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 132 169) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 140 19) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 294 310)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 324 480) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 270 520) (om-make-point 26 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote >)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 153 562) (om-make-point 257 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 428 89) (quote "This module sorts a list. By default, the order of the sort is ascending, but since the module is extensible, you can open a second entry <test> to set the choice of order. If test is '>' the order is descending, '<' indicates ascending, and '=' keeps the same order. One can also open a third input <key> for a function. The function <key> evaluates each element of the list <lst> and the result is then sorted according to the parameter <test>.$a function icon or subpatch icon in 'lambda' mode can be connected to <test> and <key>.$") "" (om-make-point 74 172) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 54 27) (quote "sort.") "" (om-make-point 289 11) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (7 0 1 0 nil 0) (10 0 2 0 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (9 0 10 0 nil 0) (15 0 12 0 nil 0) (11 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 94 44)) (setf (pict-size newpict) (om-make-point 140 123)) newpict)) 6.2))
