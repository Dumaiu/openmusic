;fileheader
; (5.11 :patc (om-make-point 35 33) (om-make-point 14 44) (om-make-point 489 642) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "arithm-ser" '((om-load-boxcomment "comment" (om-make-point 145 113) '"INPUTS:$begin   number$end       number$step      number$Optional input$nummax    number$OUTPUTS:$returns an arithmetic series$" "" (om-make-point 264 30) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 250)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100)) (om-make-point 87 467) (om-make-point 275 113) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200)) :lonset '(0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250) :ldur '((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 100)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode) (list 't 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2 0))) t nil nil) (om-load-editor-box1 "NOTE" 'note '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "MIDIC" 6000) (om-load-inputfun 'input-funbox "no documentation" "VEL" 80) (om-load-inputfun 'input-funbox "no documentation" "DUR" 1000) (om-load-inputfun 'input-funbox "no documentation" "CHAN" 1)) (om-make-point 147 318) (om-make-point 68 70) (if (find-class 'note nil) (let ((newobj (make-instance 'note :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj '0) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.1 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 -27) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2 0))) t nil nil) (om-load-boxcall 'genfun "OM+" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 190 400) (om-make-point 60 35) nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 269 221) (om-make-point 33 24) 100 "100" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 213 221) (om-make-point 42 25) 1200 "1200" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 177 222) (om-make-point 12 22) 0 "0" nil) (om-load-boxcall 'genfun "ARITHM-SER" 'arithm-ser '((om-load-inputfun 'input-funbox "begin" "BEGIN" 0) (om-load-inputfun 'input-funbox "end " "END" 10) (om-load-inputfun 'input-funbox "step" "STEP" 1)) (om-make-point 130 265) (om-make-point 203 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 349 36) '"Returns a list of numbers starting from begin to end with increment step. " "" (om-make-point 75 150) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 104 26) '"arithm-ser" "" (om-make-point 190 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 1 1 nil 0) (2 1 3 0 nil 0) (7 0 3 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (4 0 7 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))











































































































































































































































































































