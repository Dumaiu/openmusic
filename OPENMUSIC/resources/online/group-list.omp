;fileheader
; (5.11 :patc (om-make-point 361 135) (om-make-point 2 44) (om-make-point 628 807) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "group-list" '((om-load-boxcomment "comment" (om-make-point 138 123) '"INPUTS:$list                         list$segmentation      list $mode                    menu$MODE:$linear$circular$OUTPUT:$returns a list$" "" (om-make-point 213 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 355 563) (om-make-point 53 24) 'circular "circular" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 292 564) (om-make-point 53 24) (list 1 2 2 3 4) "(1 2 2 3 4) " nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 180 565) (om-make-point 106 23) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'genfun "GROUP-LIST" 'group-list '((om-load-inputfun 'input-funbox " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 'input-funmenu "Menu" "MODE" 'linear (list (list "linear" ''linear) (list "circular" ''circular)))) (om-make-point 218 617) (om-make-point 196 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 205 52) '"will return$? OM->((1) (2 3) (4 5) (6 7 8) (9 10 1 2))$" "" (om-make-point 223 687) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 178 38) '"will return$? OM->((1) (2 3) (4 5) (6 7 8) (9 10))$" "" (om-make-point 368 484) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "GROUP-LIST" 'group-list '((om-load-inputfun 'input-funbox " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 'input-funmenu "Menu" "MODE" 'linear (list (list "linear" ''linear) (list "circular" ''circular)))) (om-make-point 361 412) (om-make-point 196 55) nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 323 360) (om-make-point 106 23) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 435 359) (om-make-point 53 24) (list 1 2 2 3 4) "(1 2 2 3 4) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 498 358) (om-make-point 53 24) 'linear "linear" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 187 357) (om-make-point 53 24) 'linear "linear" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 124 358) (om-make-point 53 24) (list 1 2 3 4) "(1 2 3 4) " nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 12 359) (om-make-point 106 23) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'genfun "GROUP-LIST" 'group-list '((om-load-inputfun 'input-funbox " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 'input-funmenu "Menu" "MODE" 'linear (list (list "linear" ''linear) (list "circular" ''circular)))) (om-make-point 50 411) (om-make-point 196 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 178 38) '"will return$? OM->((1) (2 3) (4 5 6) (7 8 9 10))$" "" (om-make-point 57 483) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 371 114) '"This module groups elements of <list> as sub-lists with lengths equal to elements of <segmentation>.$$In <circular> mode, group- list will group sub-lists using <list> circularly until all given lengths are used.$$In <linear> mode, the sublists will be limited according to the number of elements in <list>.$" "" (om-make-point 110 227) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 86 30) '"group-list" "" (om-make-point 235 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (10 0 7 2 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (11 0 14 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































