; OM File Header - Saved 2021/07/13 15:06:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 671 750) "" 183 0 nil "2021/07/13 15:06:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "group-list" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 213 691) (om-make-point 202 42) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 174 22) "((1) (2 3) (4 5) (6 7 8) (9 10 1 2))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 359 486) (om-make-point 195 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 167 20) "((1) (2 3) (4 5) (6 7 8) (9 10))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 87 486) (om-make-point 181 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 153 20) "((1) (2 3) (4 5 6) (7 8 9 10))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 123) (quote "INPUTS:$list                         list$segmentation      list $mode                    menu$MODE:$linear$circular$OUTPUT:$returns a list$") "" (om-make-point 213 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 366 563) (om-make-point 56 30) (quote circular) "circular" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 282 564) (om-make-point 73 30) (list 1 2 2 3 4) "(1 2 2 3 4) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 155 565) (om-make-point 115 29) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 218 617) (om-make-point 196 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 361 412) (om-make-point 196 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 305 359) (om-make-point 115 31) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 425 359) (om-make-point 73 30) (list 1 2 2 3 4) "(1 2 2 3 4) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 504 358) (om-make-point 46 30) (quote linear) "linear" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 221 357) (om-make-point 46 30) (quote linear) "linear" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 149 358) (om-make-point 64 30) (list 1 2 3 4) "(1 2 3 4) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 31 359) (om-make-point 113 30) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 81 411) (om-make-point 196 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 474 100) (quote "This module groups elements of <list> as sub-lists with lengths equal to elements of <segmentation>.$$In <circular> mode, group- list will group sub-lists using <list> circularly until all given lengths are used.$$In <linear> mode, the sublists will be limited according to the number of elements in <list>.$") "" (om-make-point 83 177) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 30) (quote "group-list") "" (om-make-point 248 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 17.333333333333332D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (8 0 1 0 nil 0) (15 0 2 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (4 0 7 2 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (11 0 8 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (12 0 15 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 74 63)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
