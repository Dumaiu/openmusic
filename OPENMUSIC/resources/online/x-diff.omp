;fileheader
; (5.11 :patc (om-make-point 271 33) (om-make-point 8 44) (om-make-point 516 580) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "x-diff" '((om-load-boxcomment "comment" (om-make-point 254 138) '"INPUTS:$l1?   list$l2?   list$OPTIONAL INPUTS:$test     symbol, function or Lambda-function$key     symbol, function or Lambda-function$list       other lists$OUTPUT:$returns a list with all elements present in l1?  and list  but not in l2?$" "" (om-make-point 176 37) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "X-DIFF" 'x-diff '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 311 408) nil nil nil nil 1) (om-load-boxcall 'genfun "X-DIFF" 'x-diff '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 93 412) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 94 38) '"will return $? OM-> (7)$" "" (om-make-point 279 472) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 334 351) (om-make-point 79 26) (list 1 2 4 5 4 2 1) "(1 2 4 5 4 2 1) " nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 248 352) (om-make-point 79 26) (list 2 4 7) "( 2 4 7)" nil) (om-load-boxcomment "comment" (om-make-point 94 38) '"will return $? OM-> (1 5 1)$" "" (om-make-point 61 473) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 117 352) (om-make-point 79 26) (list 2 4 7) "( 2 4 7)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 31 353) (om-make-point 79 26) (list 1 2 4 5 4 2 1) "(1 2 4 5 4 2 1) " nil) (om-load-boxcomment "comment" (om-make-point 405 142) '"This function compares< l1?> to <l2?> and then returns all elements present in <l1?> but not in <l2?>, as a list. If the optional <test> argument is added (remember that this module might be extended) , the lists can be compared according to any  predicate ( the default value of <test> being Ôequal). Only elements in< l1?> that return true when compared with all the elements in < l2?> (according to the predicate), are returned in the result list. If the key argument  is included (the default function is identity), its function is first evaluated using each of < l1?> elements as input, and then the lists are compared according to the test on the results of the function. <test> and <key> may also be connected function or subpatch icons in 'lambda' mode. Additional lists can be compared using <list>.$Beware that this operation is not commutative. $" "" (om-make-point 35 196) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"x-diff" "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 1 0 nil 0) (4 0 1 1 nil 0) (8 0 2 0 nil 0) (7 0 2 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































