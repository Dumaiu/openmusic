;fileheader
; (5.11 :patc (om-make-point 87 171) (om-make-point 3 44) (om-make-point 495 807) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "interpolation" '((om-load-boxcomment "comment" (om-make-point 177 102) '"INPUTS:$begin      number or list$end          number or list$samples  integer$curve        float$OUTPUT:$returns the interpolation between two numbers or two lists$" "" (om-make-point 170 36) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 335 330) (om-make-point 58 76) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10 20 30 40) '(0 9 30 60 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 204 329) (om-make-point 58 76) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10 20 30 40) '(0 71 84 93 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 63 327) (om-make-point 58 76) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10 20 30 40) '(0 25 50 75 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 49 30) '"concave" "" (om-make-point 342 406) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 49 30) '"convexe" "" (om-make-point 210 406) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 49 30) '"linear" "" (om-make-point 60 406) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 400 214) (om-make-point 31 21) 1.75 "1.75" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 348 214) (om-make-point 26 22) 100 "100" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 378 214) (om-make-point 12 22) 5 "5" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 317 214) (om-make-point 24 21) 0 "0" nil) (om-load-boxcall 'genfun "INTERPOLATION" 'interpolation '((om-load-inputfun 'input-funbox "a number" "BEGIN" 0) (om-load-inputfun 'input-funbox "a number" "END" 100) (om-load-inputfun 'input-funbox "an integer" "SAMPLES" 5) (om-load-inputfun 'input-funbox "a number in [0.0 2.0]" "CURVE" 1.0)) (om-make-point 333 264) nil nil nil nil 1) (om-load-boxcall 'genfun "INTERPOLATION" 'interpolation '((om-load-inputfun 'input-funbox "a number" "BEGIN" 0) (om-load-inputfun 'input-funbox "a number" "END" 100) (om-load-inputfun 'input-funbox "an integer" "SAMPLES" 5) (om-load-inputfun 'input-funbox "a number in [0.0 2.0]" "CURVE" 1.0)) (om-make-point 52 261) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 36 211) (om-make-point 24 21) 0 "0" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 97 211) (om-make-point 12 22) 5 "5" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 67 211) (om-make-point 26 22) 100 "100" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 119 211) (om-make-point 22 22) 1.0 "1.0" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 267 213) (om-make-point 22 22) 0.25 "0.25" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 215 213) (om-make-point 26 22) 100 "100" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 245 213) (om-make-point 12 22) 5 "5" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 184 213) (om-make-point 24 21) 0 "0" nil) (om-load-boxcall 'genfun "INTERPOLATION" 'interpolation '((om-load-inputfun 'input-funbox "a number" "BEGIN" 0) (om-load-inputfun 'input-funbox "a number" "END" 100) (om-load-inputfun 'input-funbox "an integer" "SAMPLES" 5) (om-load-inputfun 'input-funbox "a number in [0.0 2.0]" "CURVE" 1.0)) (om-make-point 200 263) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "LDUR" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "LVEL" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "LCHAN" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "LEGATO" "LEGATO" 0)) (om-make-point 136 649) (om-make-point 262 107) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 6500 7100) (5850.0 6500.0 7225.0) (5700.0 6500.0 7350.0) (5550.0 6500.0 7475.0) (5400.0 6500.0 7600.0)) :lonset '(0 1000 2000 3000 4000 5000) :ldur '((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000)) :lvel '((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100)) :loffset '((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)) :lchan '((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(deltapict cmnpref staff fontsize approx outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 -30) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'gf 24 8 0 0 1 0 0 nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "LVEL" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "LDUR" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "LCHAN" "LCHAN" (list 1))) (om-make-point 243 434) (om-make-point 64 116) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 5400 6500 7600) :lvel (list 100 100 100) :loffset (list 0 0 0) :ldur (list 1000 1000 1000) :lchan (list 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(deltapict cmnpref staff fontsize approx outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'gf 24 2 0 0 1 0 0 nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "LVEL" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "LDUR" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "LCHAN" "LCHAN" (list 1))) (om-make-point 156 434) (om-make-point 64 116) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 6500 7100) :lvel (list 100 100 100) :loffset (list 0 0 0) :ldur (list 1000 1000 1000) :lchan (list 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(deltapict cmnpref staff fontsize approx outport inport zoom palette-mode obj-mode notechancolor? grillestep mode winsize winpos show-stems) (list (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2 0 0 1 0 0 nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) 't))) t nil nil) (om-load-boxcall 'genfun "INTERPOLATION" 'interpolation '((om-load-inputfun 'input-funbox "a number" "BEGIN" (list 0 10 20)) (om-load-inputfun 'input-funbox "a number" "END" (list 100 90 100)) (om-load-inputfun 'input-funbox "an integer" "SAMPLES" 5) (om-load-inputfun 'input-funbox "a number in [0.0 2.0]" "CURVE" 1.0)) (om-make-point 200 581) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 411 41) '"interpolates 2 numbers or 2 trees from <begin> to <end> through <samples> steps.$<curve> is 1 for linear interpolation, [0.0 1.0] for convexe and [1.0 2.0] for concave.$" "" (om-make-point 38 160) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"interpolation" "" (om-make-point 168 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((11 0 1 2 nil 0) (21 0 2 2 nil 0) (12 0 3 2 nil 0) (10 0 11 0 nil 0) (8 0 11 1 nil 0) (9 0 11 2 nil 0) (7 0 11 3 nil 0) (13 0 12 0 nil 0) (15 0 12 1 nil 0) (14 0 12 2 nil 0) (16 0 12 3 nil 0) (20 0 21 0 nil 0) (18 0 21 1 nil 0) (19 0 21 2 nil 0) (17 0 21 3 nil 0) (25 0 22 1 nil 0) (24 1 25 0 nil 0) (23 1 25 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































