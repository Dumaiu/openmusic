;fileheader
; (5.11 :patc (om-make-point 23 13) (om-make-point 6 47) (om-make-point 503 585) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "arithmetic" '((om-load-boxcomment "comment" (om-make-point 216 85) '"INPUTS:$self     number or list$num   number or list$OUTPUT:$returns the arithmetical operation of<self> and <num>.$" "" (om-make-point 207 44) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 99 39) '"will return$? OM->(100 40 2)$" "" (om-make-point 221 418) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 89 39) '"will return$? OM->(2 4 6 8)$" "" (om-make-point 96 417) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 99 40) '"will return$? OM->(100 110)$" "" (om-make-point 216 280) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 68 38) '"will return$? OM->8$" "" (om-make-point 98 277) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM+1" 'om+ '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 124 239) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 258 337) (om-make-point 58 27) (list 2 5 100) "(2 5 100)" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 213 337) (om-make-point 42 27) 200 "200" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 262 205) (om-make-point 45 27) (list 10 10) "(10 10)" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 187 205) (om-make-point 73 27) (list 110 120 130) "(110 120 130 )" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 153 341) (om-make-point 21 23) 2 "2" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 102 341) (om-make-point 48 25) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 112 206) (om-make-point 22 24) 3 "3" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 136 206) (om-make-point 23 24) 5 "5" nil) (om-load-boxcall 'genfun "OM/" 'om/ '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 1)) (om-make-point 247 370) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 130 374) nil nil nil nil 1) (om-load-boxcall 'genfun "OM-" 'om- '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 240 243) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 412 59) '"All modules that start with the letter om act on trees, that is, on lists of lists on many levels. The inputs of arithmetic modules can be either simple arguments or lists, on many levels.  When the inputs are lists, the principle of the shortest list obtains. That is, for two lists of different sizes and levels, the module takes the shortest list:$" "" (om-make-point 25 129) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"Arithmetic Modules" "" (om-make-point 156 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((12 0 5 0 nil 0) (13 0 5 1 nil 0) (7 0 14 0 nil 0) (6 0 14 1 nil 0) (11 0 15 0 nil 0) (10 0 15 1 nil 0) (9 0 16 0 nil 0) (8 0 16 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))











































































































































































































































































































