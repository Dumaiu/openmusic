; OM File Header - Saved 2021/04/25 16:44:44
; (6.19 :patc (om-make-point 31 196) (om-make-point 548 56) (om-make-point 579 570) "" 183 0 "2021/04/25 16:41:01" "2021/04/25 16:44:44")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../resources/pict/kernel-om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "arithmetic" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "Arithmetic Modules") "" (om-make-point 189 28) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 460 74) (quote "All modules that start with the letter om act on trees, that is, on lists of lists on many levels. The inputs of arithmetic modules can be either simple arguments or lists, on many levels.  When the inputs are lists, the principle of the shortest list obtains. That is, for two lists of different sizes and levels, the module takes the shortest list:$") "" (om-make-point 58 162) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 283 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 163 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 280 414) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 170 250) (om-make-point 29 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 135 250) (om-make-point 27 29) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 125 385) (om-make-point 54 27) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 186 385) (om-make-point 37 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 220 249) (om-make-point 80 29) (list 110 120 130) "(110 120 130 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 305 249) (om-make-point 63 28) (list 10 10) "(10 10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 246 381) (om-make-point 46 29) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 301 381) (om-make-point 67 30) (list 2 5 100) "(2 5 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+1" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 157 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 68 38) (quote "will return$? OM->8$") "" (om-make-point 131 321) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 99 40) (quote "will return$? OM->(100 110)$") "" (om-make-point 249 324) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 47) (quote "will return$? OM->(2 4 6 8)$") "" (om-make-point 129 461) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 121 43) (quote "will return$? OM->(100 40 2)$") "" (om-make-point 254 462) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 212 98) (quote "INPUTS:$self     number or list$num   number or list$OUTPUT:$returns the arithmetical operation of<self> and <num>.$") "" (om-make-point 240 68) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 2 0 nil 0) (10 0 2 1 nil 0) (7 0 3 0 nil 0) (8 0 3 1 nil 0) (11 0 4 0 nil 0) (12 0 4 1 nil 0) (6 0 13 0 nil 0) (5 0 13 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "kernel-om3" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "kernel-om3" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 53 47)) (setf (pict-size newpict) (om-make-point 134 104)) newpict)) 6.19))