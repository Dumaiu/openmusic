; OM File Header - Saved 2021/07/13 16:04:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 537 507) "" 183 0 nil "2021/07/13 16:04:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "list-modulo" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 155 338) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "((1 3 5 7 9) (2 4 6 8))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 201 107) (quote "INPUTS:$l i s t    list$ncol    integer$OUTPUT:$returns A list of lists containing elements modulo ncol according to their position in the list.$") "" (om-make-point 181 31) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 431 81) (quote "In other words, every second element starting with the first, and then every second element starting with the second. If the number of <ncol>exceeds the number of elements in the list, the remaining lists are returned as nil. In effect, list-modulo divides <l i s t>  into <ncol> sublists containing elements modulo <ncol> according to their position in the list.") "" (om-make-point 37 375) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 252 229) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MODULO" (quote list-modulo) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "modulo" "NCOL" 2))) (om-make-point 192 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 138 230) (om-make-point 106 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 389 47) (quote "The list-modulo module groups elements of a list that occur at regular intervals, and returns these groups as lists. <ncol>defines the interval between group members and must be a non-negative integer.") "" (om-make-point 48 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "list-modulo") "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 63 51)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
