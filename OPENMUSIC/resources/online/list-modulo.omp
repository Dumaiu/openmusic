;fileheader
; (5.11 :patc (om-make-point 362 222) (om-make-point 4 44) (om-make-point 499 510) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "list-modulo" '((om-load-boxcomment "comment" (om-make-point 201 107) '"INPUTS:$l i s t    list$ncol    integer$OUTPUT:$returns A list of lists containing elements modulo ncol according to their position in the list.$" "" (om-make-point 181 31) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 431 81) '"In other words, every second element starting with the first, and then every second element starting with the second. If the number of <ncol>exceeds the number of elements in the list, the remaining lists are returned as nil. In effect, list-modulo divides <l i s t>  into <ncol> sublists containing elements modulo <ncol> according to their position in the list." "" (om-make-point 37 375) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 238 229) (om-make-point 12 22) 2 "2" nil) (om-load-boxcall 'genfun "LIST-MODULO" 'list-modulo '((om-load-inputfun 'input-funbox "a list" "LIST" nil) (om-load-inputfun 'input-funbox "modulo" "NCOL" 2)) (om-make-point 192 266) nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 138 230) (om-make-point 92 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcomment "comment" (om-make-point 161 45) '"will return$? OM->((1 3 5 7 9) (2 4 6 8))" "" (om-make-point 132 330) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 389 47) '"The list-modulo module groups elements of a list that occur at regular intervals, and returns these groups as lists. <ncol>defines the interval between group members and must be a non-negative integer." "" (om-make-point 48 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"list-modulo" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 0 3 0 nil 0) (2 0 3 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































