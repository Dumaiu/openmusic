;fileheader
; (5.11 :patc (om-make-point 181 584) (om-make-point 6 44) (om-make-point 578 594) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sound-cut" '((om-load-boxcall 'abstraction "sound-processing1" (om-load-patch-abs1 "sound-processing" '((om-load-boxcomment "comment" (om-make-point 223 28) '"Sound Processing patches" "" (om-make-point 200 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-editor-box1 "SOUND1" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 181 555) (om-make-point 179 85) (let ((newobj nil)) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 312 402) (om-make-point 57 21) "mixall.aiff" "\"mixall.aiff\"" nil) (om-load-boxcall 'genfun "OUTFILE" 'outfile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 314 423) nil nil nil nil 1) (om-load-boxcall 'genfun "SAVE-SOUND" 'save-sound '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "FILENAME" nil)) (om-make-point 257 490) nil nil nil nil 1) (om-load-boxcall 'genfun "SOUND-MIX" 'sound-mix '((om-load-inputfun 'input-funbox "no documentation" "S1" nil) (om-load-inputfun 'input-funbox "no documentation" "S2" nil)) (om-make-point 158 406) (om-make-point 52 55) nil nil nil 1) (om-load-boxcall 'genfun "SOUND-SEQ" 'sound-seq '((om-load-inputfun 'input-funbox "no documentation" "S1" nil) (om-load-inputfun 'input-funbox "no documentation" "S2" nil)) (om-make-point 240 346) nil nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 223 229) (om-make-point 33 24) 1000 "1000" nil) (om-load-boxcall 'genfun "SOUND-SILENCE" 'sound-silence '((om-load-inputfun 'input-funbox "no documentation" "DUR" 1)) (om-make-point 203 257) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 339 217) (om-make-point 18 22) 5 "5" nil) (om-load-boxcall 'genfun "SOUND-LOOP" 'sound-loop '((om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "N" nil)) (om-make-point 305 247) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 309 159) (om-make-point 33 22) 1000 "1000" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 284 159) (om-make-point 22 22) 0 "0" nil) (om-load-boxcall 'genfun "SOUND-CUT" 'sound-cut '((om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "BEG" 0.0) (om-load-inputfun 'input-funbox "no documentation" "END" 1.0)) (om-make-point 262 189) nil nil nil nil 1) (om-load-editor-box1 "SOUND" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 145 74) (om-make-point 128 67) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "WorkSpaces" "OMWorkspace" "in-files") :device :unspecific :name "SOUND2" :type "WAV") 1))) (when thesound (setf (markers thesound) 'nil)) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil)) '((4 0 1 0 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (14 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 6 0 nil 0) (10 0 6 1 nil 0) (7 0 8 0 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (14 0 13 0 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0)) 5.11 nil) 'nil (om-make-point 23 503) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 69 23) '"See also" "" (om-make-point 41 487) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-editor-box1 "SOUND1" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 189 492) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 264 320) (om-make-point 48 23) "cut.aiff" "\"cut.aiff\"" nil) (om-load-boxcall 'genfun "OUTFILE" 'outfile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 257 349) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 216 70) '"OUTFILE :$create a pathname with the input name and  the output-files directory specified in the Preferences" "" (om-make-point 318 326) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 145 55) '"SAVE-SOUND$save selection in a new sound file" "" (om-make-point 276 428) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "SAVE-SOUND" 'save-sound '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "FILENAME" nil)) (om-make-point 202 419) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 172 43) '"begin and end time of the selection are stated in ms" "" (om-make-point 244 256) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'lispfun "SECOND" 'second '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 187 282) nil nil nil nil 1) (om-load-boxcall 'lispfun "FIRST" 'first '((om-load-inputfun 'input-funbox "LIST" "LIST" nil)) (om-make-point 159 282) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 185 212) (om-make-point 35 22) 1000 "1000" nil) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 171 237) nil nil nil nil 1) (om-load-boxcall 'genfun "SOUND-CUT" 'sound-cut '((om-load-inputfun 'input-funbox "no documentation" "S" nil) (om-load-inputfun 'input-funbox "no documentation" "BEG" nil) (om-load-inputfun 'input-funbox "no documentation" "END" nil)) (om-make-point 123 336) (om-make-point 93 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 171 46) '"- Algorithmically$use the SOUND-CUT box" "" (om-make-point 241 174) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 128 110) (om-make-point 108 33) (list 0.5 1.0 1.5 2.5 4.0) "(0.5 1.0 1.5 2.5 4.0)" nil) (om-load-boxcomment "comment" (om-make-point 239 72) '"- From the sound editor:$select an interval (double-click) between two markers and drag the selection into the patch" "" (om-make-point 254 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 57 27) '"SOUND" "" (om-make-point 39 157) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 199 30) '"Extract a part of the sound file" "" (om-make-point 139 44) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "SOUND" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 114 147) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "WorkSpaces" "OMWorkspace" "in-files") :device :unspecific :name "pulse1b" :type "aiff") 1))) (when thesound (setf (markers thesound) '(0.5 1.0 1.5 2.5 4.0))) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 160 37) '"SOUND-CUT" "" (om-make-point 178 8) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor)))) '((7 0 2 0 nil 0) (3 0 4 0 nil 0) (13 0 7 0 nil 0) (4 0 7 1 nil 0) (12 0 9 0 nil 0) (12 0 10 0 nil 0) (19 1 12 0 nil 0) (11 0 12 1 nil 0) (19 0 13 0 nil 0) (10 0 13 1 nil 0) (9 0 13 2 nil 0) (15 0 19 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))


























































































