;fileheader
; (5.11 :patc (om-make-point 81 16) (om-make-point 4 44) (om-make-point 470 726) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-eucl" '((om-load-boxcomment "comment" (om-make-point 336 148) '"INPUTS:$self         number or list$divisor   number or list$OUTPUTS:$1) returns the euclidean division of <self> and <divisor>$2) returns the rest of the euclidean division $$Yields an integer result and the rest of the division. When the divisor is 1, the operation is known as 'floor'." "" (om-make-point 102 47) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 181 49) '"will return$? OM->(2 3 5)  and (1 1 0)$" "" (om-make-point 115 307) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 181 49) '"will return$? OM->(4 4 5 5)  and (0 700 0 400)$" "" (om-make-point 103 657) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 253 58) '"It is very useful for separating pitches$and their register. $0 is for C, 700 for the fifth (G), etc...$$" "" (om-make-point 89 369) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 100 443) (om-make-point 82 121) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4800 5500 6000 6400) :lvel (list 80 80 80 80) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'gf (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 205 543) (om-make-point 55 25) 1200 "1200" nil) (om-load-boxcall 'genfun "OM//" 'om// '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "DIVISOR" 1)) (om-make-point 174 595) (om-make-point 25 55) nil nil nil 2) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 223 204) (om-make-point 20 25) 2 "2" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 153 204) (om-make-point 57 28) (list 5 7 10) "(5 7 10)" nil) (om-load-boxcall 'genfun "OM//" 'om// '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "DIVISOR" 1)) (om-make-point 193 240) (om-make-point 25 55) nil nil nil 2) (om-load-boxcomment "comment" (om-make-point 61 26) '"om//" "" (om-make-point 190 8) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 1 6 0 nil 0) (5 0 6 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































