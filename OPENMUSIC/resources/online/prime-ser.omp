; OM File Header - Saved 2021/07/13 17:02:35
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 617 658) "" 183 0 nil "2021/07/13 17:02:35")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "prime-ser" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 109 524) (om-make-point 325 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 297 20) "(1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 67 346) (om-make-point 413 43) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 385 23) "(1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 98) (quote "INPUT:$max   number$OPTIONAL INPUT:$numelem  number$OUTPUT:$returns a  list of prime numbers$") "" (om-make-point 190 58) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 280 413) (om-make-point 32 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 191 46) (quote "giving a list of 21 elements. $") "" (om-make-point 192 578) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-SER" (quote prime-ser) (quote ((om-load-inputfun (quote input-funbox) "max prime" "MAX" 100) (om-load-inputfun (quote input-funbox) "max elements" "NUMELEM" 10))) (om-make-point 246 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 236 414) (om-make-point 38 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 258 245) (om-make-point 38 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-SER" (quote prime-ser) (quote ((om-load-inputfun (quote input-funbox) "max prime" "MAX" 100))) (om-make-point 248 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 361 45) (quote "Returns the set of prime-numbers ranging from 0 up to <max>. The optional parameter <nummax> limits the maximum number of elements.") "" (om-make-point 74 169) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 26) (quote "prime-ser") "" (om-make-point 190 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (8 0 1 0 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 8 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 78 65)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
