;fileheader
; (5.11 :patc (om-make-point 64 210) (om-make-point -1 44) (om-make-point 673 756) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "remove-dup" '((om-load-boxcomment "comment" (om-make-point 172 100) '"INPUTS:$list             list$test          symbol$depth     integer$OUTPUT:$returns  list  without repetitions$" "" (om-make-point 266 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 386 509) (om-make-point 116 24) (list (list 2 1 2 3) (list 5 4 6 5 6)) "((2 1 2 3) (5 4 6 5 6))" nil) (om-load-boxcomment "comment" (om-make-point 171 36) '"will return$? OM->((1 2 3) (4 5 6))" "" (om-make-point 412 629) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "REMOVE-DUP" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'eq) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 1)) (om-make-point 390 563) (om-make-point 209 55) nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 482 533) (om-make-point 29 27) 'eq "eq" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 542 536) (om-make-point 12 22) 2 "2" nil) (om-load-boxcomment "comment" (om-make-point 187 32) '"removing duplicates from sublists:" "" (om-make-point 385 472) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 372 286) (om-make-point 171 24) (list (list 1 2 3) (list 4 5) (list 9 10) (list 6 7 8) (list 9 10)) "((1 2 3) (4 5) (9 10) (6 7 8) (9 10))" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 556 316) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 490 313) (om-make-point 39 27) 'equal "equal" nil) (om-load-boxcall 'genfun "REMOVE-DUP" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'eq) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 1)) (om-make-point 404 343) (om-make-point 209 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 171 36) '"will return$? OM->((1 2 3) (4 5) (6 7 8) (9 10))$" "" (om-make-point 420 408) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 129 29) '"removing duplicate lists:" "" (om-make-point 393 249) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 127 36) '"will return$? OM->(2 3 1 4)$" "" (om-make-point 113 631) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "REMOVE-DUP" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'eq) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 1)) (om-make-point 72 562) (om-make-point 209 55) nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 96 531) (om-make-point 61 27) (list 1 2 3 1 4) "(1 2 3 1 4) " nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 167 532) (om-make-point 22 27) 'eq "eq" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 224 535) (om-make-point 12 22) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 285 34) '"Note that the last occurrence of a repeated element in a list is preserved; thus, the list: " "" (om-make-point 54 471) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 230 314) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 173 314) (om-make-point 22 27) 'eq "eq" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 68 297) (om-make-point 129 24) (list 'this 'this 'is 'my 'list 'list) "(this this is my list list) " nil) (om-load-boxcall 'genfun "REMOVE-DUP" 'remove-dup '((om-load-inputfun 'input-funbox " a list" "LIST" (list 1 2 3 4)) (om-load-inputfun 'input-funbox "a function" "TEST" 'eq) (om-load-inputfun 'input-funbox "an integer" "DEPTH" 1)) (om-make-point 78 344) (om-make-point 209 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 127 36) '"will return$? OM->(this is my list)$" "" (om-make-point 119 413) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 395 59) '"Removes repetitions of elements in <list>, according to <test>. $<test> must be commutative and should be 'equal if elements are more than atoms.$If <depth> is more than 1, <list> is a tree, and duplicates are removed from sublists.$" "" (om-make-point 142 169) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"remove-dup" "" (om-make-point 267 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((1 0 3 0 nil 0) (4 0 3 1 nil 0) (5 0 3 2 nil 0) (7 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (15 0 14 0 nil 0) (16 0 14 1 nil 0) (17 0 14 2 nil 0) (21 0 22 0 nil 0) (20 0 22 1 nil 0) (19 0 22 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

































































