;fileheader
; (5.11 :patc (om-make-point 293 15) (om-make-point 7 44) (om-make-point 501 744) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-min-max" '((om-load-boxcomment "comment" (om-make-point 155 90) '"INPUTS:$self     number or list$num   number or list$OUTPUT:$returns the minimum or maximum value from<self> and <tree>$" "" (om-make-point 156 33) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 40) '"will return$? OM->(5 -3 7 15)$" "" (om-make-point 120 633) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 40) '"will return$? OM->(10 34 34 16)$" "" (om-make-point 216 634) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 40) '"will return$? OM->(10 34 10 16)$" "" (om-make-point 215 368) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 40) '"will return$? OM->(5 10 7 10)$" "" (om-make-point 115 369) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM-MIN" 'om-min '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 10)) (om-make-point 147 569) nil nil nil nil 1) (om-load-boxcall 'genfun "OM-MAX" 'om-max '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 1)) (om-make-point 223 569) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 327 45) '"When using two trees the result is between the nth member of each tree: " "" (om-make-point 79 414) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 115 477) (om-make-point 94 33) (list 5 34 7 16) "(5 34 7 16)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 232 482) (om-make-point 76 26) (list 10 -3 34 15) "(10 -3 34 15)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 228 229) (om-make-point 39 21) 10 "10" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 110 218) (om-make-point 94 33) (list 5 34 7 16) "(5 34 7 16)" nil) (om-load-boxcomment "comment" (om-make-point 327 45) '"While using a tree with an atom the test is between the atom and each member of the list:" "" (om-make-point 78 162) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM-MAX" 'om-max '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 1)) (om-make-point 218 310) nil nil nil nil 1) (om-load-boxcall 'genfun "OM-MIN" 'om-min '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 10)) (om-make-point 142 310) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 322 23) '"Gives the minimum or maximum value of two numbers or trees." "" (om-make-point 83 133) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"om-min and om-max" "" (om-make-point 156 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((8 0 5 0 nil 1) (9 0 5 1 nil 2) (8 0 6 0 nil 1) (9 0 6 1 nil 2) (11 0 13 0 nil 1) (10 0 13 1 nil 2) (11 0 14 0 nil 1) (10 0 14 1 nil 2)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































