; OM File Header - Saved 2021/07/13 16:04:05
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 543 780) "" 183 0 nil "2021/07/13 16:04:03")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "list-filter" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 202 647) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "(3 4 5 6)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 330 419) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "(a b c)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 98 417) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(1 2 3)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 266 130) (quote "INPUTS:$test       symbol, function or an Om-lambda-function$list          list $mode   menu$MENU:$Reject$Pass$OUTPUT:$returns  a list$") "" (om-make-point 161 34) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 289 541) (om-make-point 44 30) (quote pass) "pass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 188 477) (om-make-point 166 30) (list -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6) "(-6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 206 505) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 177 537) (om-make-point 61 35) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-FILTER" (quote list-filter) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 189 580) (om-make-point 159 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 311 47) (quote "the result is all elements of <list> greater than 2$$") "" (om-make-point 137 697) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 456 309) (om-make-point 47 30) (quote reject) "reject" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 359 309) (om-make-point 79 30) (list 1 (quote a) 2 (quote b) 3 (quote c)) "(1 a 2 b 3 c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 290 309) (om-make-point 63 30) (quote numberp) "numberp" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-FILTER" (quote list-filter) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 329 348) (om-make-point 137 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 211 310) (om-make-point 44 30) (quote pass) "pass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 127 310) (om-make-point 79 30) (list 1 (quote a) 2 (quote b) 3 (quote c)) "(1 a 2 b 3 c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 57 310) (om-make-point 63 30) (quote numberp) "numberp" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-FILTER" (quote list-filter) (quote ((om-load-inputfun (quote input-funbox) "test" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 97 349) (om-make-point 137 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 363 113) (quote "Filters out  <list> (a list or a tree) using the predicate <test>.$<test> may be a function name (a symbol) or it may be a visual function or patch coming through a connection with the flag button 'lambda'. <test> is applied to every element in <list>.$<mode> is a menu input. $$'Reject' means reject elements that verify the test. $'Pass' means retain only elements that verify the test.$") "" (om-make-point 51 175) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 91 31) (quote "list-filter") "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (13 0 1 0 nil 0) (17 0 2 0 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (5 0 8 1 nil 0) (4 0 8 2 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (10 0 13 2 nil 0) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (14 0 17 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 45 55)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
