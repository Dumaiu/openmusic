;fileheader
; (5.11 :patc (om-make-point 137 301) (om-make-point 3 44) (om-make-point 471 726) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "list-filter" '((om-load-boxcomment "comment" (om-make-point 266 130) '"INPUTS:$test       symbol, function or an Om-lambda-function$list          list $mode   menu$MENU:$Reject$Pass$OUTPUT:$returns  a list$" "" (om-make-point 161 34) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 244 501) (om-make-point 34 25) 'pass "pass" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 120 439) (om-make-point 202 24) (list -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6) "(-6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 156 465) (om-make-point 26 22) 2 "2" nil) (om-load-boxcall 'genfun "OM>" 'om> '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 127 494) (om-make-point 61 35) nil "l" nil 1) (om-load-boxcall 'genfun "LIST-FILTER" 'list-filter '((om-load-inputfun 'input-funbox "test" "TEST" 'numberp) (om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'pass (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 139 540) (om-make-point 159 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 231 47) '"the result is all elements of <list> greater than 2$? OM->(3 4 5 6)$" "" (om-make-point 107 602) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 361 289) (om-make-point 38 24) 'reject "reject" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 284 289) (om-make-point 71 24) (list 1 'a 2 'b 3 'c) "(1 a 2 b 3 c)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 223 289) (om-make-point 56 24) 'numberp "numberp" nil) (om-load-boxcall 'genfun "LIST-FILTER" 'list-filter '((om-load-inputfun 'input-funbox "test" "TEST" 'numberp) (om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'pass (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 250 328) (om-make-point 137 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(a b c)" "" (om-make-point 271 393) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 158 290) (om-make-point 38 24) 'pass "pass" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 81 290) (om-make-point 71 24) (list 1 'a 2 'b 3 'c) "(1 a 2 b 3 c)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 20 290) (om-make-point 56 24) 'numberp "numberp" nil) (om-load-boxcall 'genfun "LIST-FILTER" 'list-filter '((om-load-inputfun 'input-funbox "test" "TEST" 'numberp) (om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'pass (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 47 329) (om-make-point 137 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(1 2 3)" "" (om-make-point 68 394) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 363 113) '"Filters out  <list> (a list or a tree) using the predicate <test>.$<test> may be a function name (a symbol) or it may be a visual function or patch coming through a connection with the flag button 'lambda'. <test> is applied to every element in <list>.$<mode> is a menu input. $$'Reject' means reject elements that verify the test. $'Pass' means retain only elements that verify the test.$" "" (om-make-point 51 175) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"list-filter" "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 1 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 5 2 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (7 0 10 2 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (12 0 15 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































