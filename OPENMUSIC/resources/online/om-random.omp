;fileheader
; (5.11 :patc (om-make-point 246 173) (om-make-point 3 44) (om-make-point 486 332) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-random" '((om-load-boxcomment "comment" (om-make-point 203 93) '"INPUTS:$low    number$high  number$OUTPUT:$returns a random value between <low> and <high> inclusive$" "" (om-make-point 188 28) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 241 171) (om-make-point 51 24) 10 "10" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 174 171) (om-make-point 31 24) 0 "0" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 204 205) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 317 43) '"Calculates a random value between <low> and <high> inclusive. " "" (om-make-point 91 130) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 108 25) '"om-random" "" (om-make-point 194 8) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 3 0 nil 0) (1 0 3 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































