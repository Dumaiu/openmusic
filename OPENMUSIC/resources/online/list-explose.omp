;fileheader
; (5.11 :patc (om-make-point 65 298) (om-make-point 3 45) (om-make-point 517 619) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "list-explose" '((om-load-boxcomment "comment" (om-make-point 307 93) '"INPUTS:$l i s t       list$nlists     integer$OUTPUT:$returns <list> subdivided into <nlists> sublists of consecutive elements. <nlists> must be a non-negative integer$" "" (om-make-point 165 33) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 249 388) (om-make-point 17 24) 5 "5" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 149 389) (om-make-point 92 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcomment "comment" (om-make-point 161 45) '"will return$? OM->((1 2) (3 4) (5 6) (7) (8 9))" "" (om-make-point 143 489) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "LIST-EXPLODE" 'list-explode '((om-load-inputfun 'input-funbox "List" "LIST" (list 1 2 3 4 5 6)) (om-load-inputfun 'input-funbox "segment size" "NLISTS" 2)) (om-make-point 194 429) nil nil nil nil 1) (om-load-boxcall 'genfun "LIST-EXPLODE" 'list-explode '((om-load-inputfun 'input-funbox "List" "LIST" (list 1 2 3 4 5 6)) (om-load-inputfun 'input-funbox "segment size" "NLISTS" 2)) (om-make-point 204 256) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 321 54) '"If the number of divisions exceeds the number of elements in the list, the remaining divisions are returned as the last element of the list." "" (om-make-point 73 547) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 259 215) (om-make-point 17 24) 2 "2" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 159 216) (om-make-point 92 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcomment "comment" (om-make-point 161 45) '"will return$? OM->((1 2 3 4) (5 6 7 8 9))" "" (om-make-point 153 316) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 292 43) '"Divides a list into <nlists> sublists of consecutive elements.$<nlists> must be a non-negative integer." "" (om-make-point 91 163) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"list-explose" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 4 0 nil 0) (1 0 4 1 nil 0) (8 0 5 0 nil 0) (7 0 5 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































