; OM File Header - Saved 2021/07/13 16:04:05
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 540 653) "" 183 0 nil "2021/07/13 16:04:03")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "list-explose" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 142 514) (om-make-point 182 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 154 25) "((1 2) (3 4) (5 6) (7) (8 9))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 163 347) (om-make-point 139 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 111 20) "((1 2 3 4) (5 6 7 8 9))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 307 93) (quote "INPUTS:$l i s t       list$nlists     integer$OUTPUT:$returns <list> subdivided into <nlists> sublists of consecutive elements. <nlists> must be a non-negative integer$") "" (om-make-point 165 33) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 269 408) (om-make-point 26 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 159 409) (om-make-point 106 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-EXPLODE" (quote list-explode) (quote ((om-load-inputfun (quote input-funbox) "List" "LIST" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "segment size" "NLISTS" 2))) (om-make-point 204 449) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-EXPLODE" (quote list-explode) (quote ((om-load-inputfun (quote input-funbox) "List" "LIST" (list 1 2 3 4 5 6)) (om-load-inputfun (quote input-funbox) "segment size" "NLISTS" 2))) (om-make-point 204 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 321 54) (quote "If the number of divisions exceeds the number of elements in the list, the remaining divisions are returned as the last element of the list.") "" (om-make-point 97 567) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 269 235) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 159 236) (om-make-point 106 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 292 43) (quote "Divides a list into <nlists> sublists of consecutive elements.$<nlists> must be a non-negative integer.") "" (om-make-point 111 163) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "list-explose") "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (9 0 6 0 nil 0) (8 0 6 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 57 43)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
