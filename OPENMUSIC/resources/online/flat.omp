;fileheader
; (5.11 :patc (om-make-point 337 66) (om-make-point 11 44) (om-make-point 500 567) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "flat" '((om-load-boxcomment "comment" (om-make-point 243 123) '"INPUT:$lst        list $OPTIONAL INPUT:$level   number (not yet implemented)$OUTPUT:$returns a copy of list  with all elements $(including those which were in embedded lists) on$the same level$" "" (om-make-point 187 43) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 131 36) '"will return$? OM->(1 2 a 3 b 4)$" "" (om-make-point 23 484) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 131 36) '"will return$? OM->(1 (2 a) (3 b) 4)$" "" (om-make-point 323 484) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 365 374) (om-make-point 18 22) 2 "2" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 233 374) (om-make-point 18 22) 1 "1" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 167 318) (om-make-point 114 27) (list (list (list 1 (list 2 'a)) (list (list 3 'b) 4))) "(((1 (2 a)) ((3 b) 4))))" nil) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" nil)) (om-make-point 346 399) nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil) (om-load-inputfun 'input-funbox "level of parenthesis" "LEVEL" nil)) (om-make-point 213 399) nil nil nil nil 1) (om-load-boxcall 'genfun "FLAT" 'flat '((om-load-inputfun 'input-funbox "one list" "LST" nil)) (om-make-point 83 399) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 131 36) '"will return$? OM->((1 (2 a)) ((3 b) 4))$" "" (om-make-point 165 485) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 368 133) '"returns a copy of list  with all elements (including those which were in embedded lists) on$the same level$$Transforms lists or trees  into flat lists.$If <level> is 1 (resp n) remove 1 (rep. n) level(s) of list imbrication.$If <level> is 0  remove the last level of  imbrication.$If <level> is NIL (default) remove all levels of imbrication, down to a purely flat list.$There should be no dotted pair.$" "" (om-make-point 77 185) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 76 29) '"flat" "" (om-make-point 220 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 6 0 nil 0) (3 0 6 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (5 0 8 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































