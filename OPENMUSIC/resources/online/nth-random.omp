;fileheader
; (5.11 :patc (om-make-point 219 16) (om-make-point 2 44) (om-make-point 492 351) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "nth-random" '((om-load-boxcomment "comment" (om-make-point 127 81) '"INPUT:$list       list$OUTPUT:$returns a randomly chosen element from list.$" "" (om-make-point 191 30) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 144 200) (om-make-point 167 33) (list 0 (list 1 2 3) "hello" 3.1415 'a) "(0 (1 2 3) \"hello\" 3.1415 a)" nil) (om-load-boxcall 'genfun "NTH-RANDOM" 'nth-random '((om-load-inputfun 'input-funbox "the list" "LIST" nil)) (om-make-point 196 245) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 356 34) '"The nth-random module returns a random element from its input <list>." "" (om-make-point 58 139) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 134 30) '"nth-random" "" (om-make-point 192 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((1 0 2 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































