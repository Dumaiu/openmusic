;fileheader
; (5.11 :patc (om-make-point 328 452) (om-make-point 6 44) (om-make-point 523 705) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "predicates-1" '((om-load-boxcomment "comment1" (om-make-point 279 44) '"(These modules are used in most cases with omif contrl function)" "" (om-make-point 125 146) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->t$" "" (om-make-point 164 614) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->nil$" "" (om-make-point 269 613) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 235 501) (om-make-point 40 26) 0 "0" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 201 501) (om-make-point 24 25) 0.0 "0.0" nil) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->nil$" "" (om-make-point 163 442) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->t$" "" (om-make-point 265 442) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 207 351) (om-make-point 24 25) 1.23 "1.23" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 241 351) (om-make-point 40 26) 1.22 "1.22" nil) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->nil$" "" (om-make-point 257 299) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->t$" "" (om-make-point 152 300) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 234 213) (om-make-point 40 26) 69 "69" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 199 212) (om-make-point 24 25) 13 "13" nil) (om-load-boxcomment "comment1" (om-make-point 84 50) '"Tests if  <self>$ is not equal$ than <num>" "" (om-make-point 329 555) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 84 50) '"Tests if  <self>$ is equal$ than <num>" "" (om-make-point 69 555) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 95 56) '"Tests if  <self>$ is greater or equal$than <num>" "" (om-make-point 332 389) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 100 52) '"Tests if  <self>$ is smaller or equal $than <num>" "" (om-make-point 59 387) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 80 52) '"Tests if  <self>$ is greater $than <num>" "" (om-make-point 319 243) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM>=" 'om>= '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 268 396) (om-make-point 51 35) nil nil nil 1) (om-load-boxcall 'genfun "OM=" 'om= '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 0)) (om-make-point 170 563) (om-make-point 35 35) nil nil nil 1) (om-load-boxcall 'genfun "OM/=" 'om/= '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 0)) (om-make-point 274 563) (om-make-point 37 35) nil nil nil 1) (om-load-boxcall 'genfun "OM<=" 'om<= '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 164 396) (om-make-point 41 35) nil nil nil 1) (om-load-boxcall 'genfun "OM>" 'om> '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 264 254) (om-make-point 43 35) nil nil nil 1) (om-load-boxcall 'genfun "OM<" 'om< '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 158 254) (om-make-point 46 35) nil nil nil 1) (om-load-boxcomment "comment2" (om-make-point 100 27) '"Predicates-1" "" (om-make-point 194 24) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 84 50) '"Tests if  <self>$ is smaller$ than <num>" "" (om-make-point 72 244) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 132 82) '"INPUTS$self     number $num   number $OUTPUT$returns  t or nil according to the test$" "" (om-make-point 196 56) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor)))) '((7 0 18 0 nil 0) (8 0 18 1 nil 0) (4 0 19 0 nil 0) (3 0 19 1 nil 0) (4 0 20 0 nil 0) (3 0 20 1 nil 0) (7 0 21 0 nil 0) (8 0 21 1 nil 0) (12 0 22 0 nil 0) (11 0 22 1 nil 0) (12 0 23 0 nil 0) (11 0 23 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

































































