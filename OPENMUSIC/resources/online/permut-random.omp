;fileheader
; (5.11 :patc (om-make-point 311 17) (om-make-point 4 44) (om-make-point 481 330) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "permut-random" '((om-load-boxcomment "comment" (om-make-point 124 82) '"INPUT:$list      list$OUTPUT:$returns a random permutation of list.$" "" (om-make-point 200 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 183 197) (om-make-point 110 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall 'genfun "PERMUT-RANDOM" 'permut-random '((om-load-inputfun 'input-funbox "the list" "LIST" nil)) (om-make-point 197 233) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 363 56) '"The permut-random module  returns a copy of <list> ordered randomly." "" (om-make-point 79 140) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"permut-random" "" (om-make-point 196 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((1 0 2 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































