;fileheader
; (5.11 :patc (om-make-point 230 94) (om-make-point 7 44) (om-make-point 501 448) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-scale-sum" '((om-load-boxcomment "comment" (om-make-point 166 83) '"INPUTS:$self    list$sum   number$OUTPUT:$returns the list <self> rescaled$" "" (om-make-point 179 32) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 320 76) '"will return$? OM->((3.3333333333333335 6.666666666666667) (3.75 2.5 3.75) (0.625 1.875 3.125 4.375))$$Notice that we used a float for <sum> in order to output floats." "" (om-make-point 75 320) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 266 183) (om-make-point 47 23) 10.0 "10.0" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 113 182) (om-make-point 135 27) (list (list 1 2) (list 3 2 3) (list 1 3 5 7)) "( (1 2) (3 2 3) (1 3 5 7))" nil) (om-load-boxcall 'genfun "OM-SCALE/SUM" 'om-scale/sum '((om-load-inputfun 'input-funbox "Number or tree" "SELF" (list 1 2 3)) (om-load-inputfun 'input-funbox "a number" "SUM" 10)) (om-make-point 196 234) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 321 49) '"Scales <self> in order that the sum of its elements is <sum>." "" (om-make-point 103 131) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"om-scale-sum" "" (om-make-point 180 5) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 0 nil 0) (2 0 4 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































