; OM File Header - Saved 2021/07/13 16:49:39
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 532 487) "" 183 0 nil "2021/07/13 16:49:39")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om-scale-sum" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 76 330) (om-make-point 352 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 324 20) "((3.3333333 6.6666665) (3.75 2.5 3.75) (0.625 1.875 3.125 4.375))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 83) (quote "INPUTS:$self    list$sum   number$OUTPUT:$returns the list <self> rescaled$") "" (om-make-point 199 52) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 320 76) (quote "Notice that we used a float for <sum> in order to output floats.") "" (om-make-point 95 370) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 286 203) (om-make-point 41 30) 10.0 "10.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 133 202) (om-make-point 133 30) (list (list 1 2) (list 3 2 3) (list 1 3 5 7)) "( (1 2) (3 2 3) (1 3 5 7))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE/SUM" (quote om-scale/sum) (quote ((om-load-inputfun (quote input-funbox) "Number or tree" "SELF" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "a number" "SUM" 10))) (om-make-point 216 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 321 49) (quote "Scales <self> in order that the sum of its elements is <sum>.") "" (om-make-point 123 151) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "om-scale-sum") "" (om-make-point 180 5) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 71 45)) (setf (pict-size newpict) (om-make-point 121 100)) newpict)) 6.2))
