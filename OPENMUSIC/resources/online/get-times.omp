;fileheader
; (5.11 :patc (om-make-point 333 375) (om-make-point 2 44) (om-make-point 547 504) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "get-times" '((om-load-boxcomment "comment6" (om-make-point 206 119) '"Select data by choosing $- a stream ID$- a frame type$- a matrix type$- a column number (description field)$- optional elements range$- optional temporal range" "" (om-make-point 4 198) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-editor-box1 "SDIFFILE" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 219 175) (om-make-point 78 72) (let ((newobj (om-load-if (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "file01" :type "sdif") 'load-sdif-file))) newobj) "x" nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0))) nil nil nil) (om-load-boxcomment "comment7" (om-make-point 240 42) '"Extract SDIF data by type" "" (om-make-point 198 13) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment5" (om-make-point 166 69) '"Use SDIF-Edit to view the diferent streams, frames and matrices types contained in your SDIF file" "" (om-make-point 181 98) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor))) (om-load-boxcall 'genfun "GET-TIMES" 'get-times '((om-load-inputfun 'input-funbox "sdif file" "SELF" nil) (om-load-inputfun 'input-funbox "stream number" "SID" 0) (om-load-inputfun 'input-funbox "frame type" "FRAMETYPE" nil) (om-load-inputfun 'input-funbox "matrix type" "MATTYPE" nil) (om-load-inputfun 'input-funbox "min time" "TMIN" nil) (om-load-inputfun 'input-funbox "max time" "TMAX" nil)) (om-make-point 235 326) (om-make-point 146 51) nil nil nil 1) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 290 290) (om-make-point 41 24) "1TRC" "\"1TRC\"" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 273 290) (om-make-point 12 22) 0 "0" nil) (om-load-boxcomment "comment2" (om-make-point 164 29) '"Returns every frame times" "" (om-make-point 220 388) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment1" (om-make-point 166 85) '"Select data by choosing $- a stream ID$- a frame type$- a matrix type$- optional temporal range" "" (om-make-point 348 215) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 108 25) '"Temporal info" "" (om-make-point 370 181) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((1 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 4 2 nil 0) (5 0 4 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))









