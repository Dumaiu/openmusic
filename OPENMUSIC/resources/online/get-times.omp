; OM File Header - Saved 2021/07/13 15:06:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 580 438) "" 183 0 nil "2021/07/13 15:06:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "get-times" (quote ((let ((box (om-load-boxcomment "comment6" (om-make-point 206 119) (quote "Select data by choosing $- a stream ID$- a frame type$- a matrix type$- a column number (description field)$- optional elements range$- optional temporal range") "" (om-make-point 4 198) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 225 175) (om-make-point 78 72) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment7" (om-make-point 240 42) (quote "Extract SDIF data by type") "" (om-make-point 198 13) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 166 69) (quote "Use SDIF-Edit to view the diferent streams, frames and matrices types contained in your SDIF file") "" (om-make-point 181 98) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-TIMES" (quote get-times) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type" "FRAMETYPE" nil) (om-load-inputfun (quote input-funbox) "matrix type" "MATTYPE" nil) (om-load-inputfun (quote input-funbox) "min time" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time" "TMAX" nil))) (om-make-point 235 326) (om-make-point 189 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 301 288) (om-make-point 57 30) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 272 290) (om-make-point 26 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 164 29) (quote "Returns every frame times") "" (om-make-point 246 383) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 166 85) (quote "Select data by choosing $- a stream ID$- a frame type$- a matrix type$- optional temporal range") "" (om-make-point 348 201) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 25) (quote "Temporal info") "" (om-make-point 370 167) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 4 2 nil 0) (5 0 4 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 25 58)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
