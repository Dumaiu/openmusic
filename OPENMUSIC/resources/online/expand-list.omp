;fileheader
; (5.11 :patc (om-make-point 164 140) (om-make-point 5 44) (om-make-point 509 762) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "expand-list" '((om-load-boxcomment "comment" (om-make-point 147 70) '"INPUT:$l i s t     list of commands$OUTPUT:$returns an expanded list$" "" (om-make-point 172 63) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 254 500) (om-make-point 177 32) (list '2* (list 'a 'z '2* (list 4 12) (list '1_5)) '0_16s2) "(2* (a z 2* (4 12) (1_5 )) 0_16s2)" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 69 506) (om-make-point 76 28) (list '0_8s2) "(0_8s2)" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 311 285) (om-make-point 46 28) (list '0_8) "(0_8)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 71 288) (om-make-point 61 24) (list '3* (list 2 4)) "(3* (2 4))" nil) (om-load-boxcomment "comment" (om-make-point 116 42) '"will return$? OM->(0 2 4 6 8)$" "" (om-make-point 47 630) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 262 71) '"will return$? OM->(a z 4 12 4 12 (1 2 3 4 5) a z 4 12 4 12 (1 2 3 4 5) 0 2 4 6 8 10 12 14 16)" "" (om-make-point 211 624) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 158 37) '"will return$? OM->(0 1 2 3 4 5 6 7 8)" "" (om-make-point 268 395) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "EXPAND-LST" 'expand-lst '((om-load-inputfun 'input-funbox "the list to expand" "LIST" (list '3* (list 2 4) '0_8))) (om-make-point 312 535) nil nil nil nil 1) (om-load-boxcall 'genfun "EXPAND-LST" 'expand-lst '((om-load-inputfun 'input-funbox "the list to expand" "LIST" (list '3* (list 2 4) '0_8))) (om-make-point 77 542) nil nil nil nil 1) (om-load-boxcall 'genfun "EXPAND-LST" 'expand-lst '((om-load-inputfun 'input-funbox "the list to expand" "LIST" (list '3* (list 2 4) '0_8))) (om-make-point 304 322) nil nil nil nil 1) (om-load-boxcall 'genfun "EXPAND-LST" 'expand-lst '((om-load-inputfun 'input-funbox "the list to expand" "LIST" (list '3* (list 2 4) '0_8))) (om-make-point 71 324) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 120 39) '"will return$? OM->(2 4 2 4 2 4)" "" (om-make-point 52 394) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 340 91) '"Expands a list following repeated patterns by one (or both) of the following:$1. <number>* (x1 ...x2)$repeats the pattern x1...x2 <number> times.$2. <n>_<m>s<k>$appends an arithmetic series counting from <n> to <m> by step <k>.$When s<k> is omitted k equals 1. $" "" (om-make-point 86 152) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"expand-list" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((1 0 8 0 nil 0) (2 0 9 0 nil 0) (3 0 10 0 nil 0) (4 0 11 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































