;fileheader
; (5.11 :patc (om-make-point 167 97) (om-make-point 6 44) (om-make-point 496 782) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-scale" '((om-load-boxcomment "comment" (om-make-point 177 135) '"INPUTS:$self          number or list$minout   number$maxout  number$OPTIONAL INPUTS:$minin      number$maxin     number$OUTPUT:$returns the list <self> rescaled$" "" (om-make-point 172 32) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 412 59) '"The output is$? OM->(4.166666666666667 8.333333333333334 12.5 16.666666666666668 20.833333333333332 25.0 29.166666666666668 33.333333333333336 37.5 41.666666666666664 45.833333333333336)$" "" (om-make-point 32 607) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 412 59) '"In the example above, the same list was rescaled with the same values of <minout> and <maxout>.  The output will be different because it is considered that the list <self> has 0 and 12 as boundaries. It is equivalent to " "" (om-make-point 32 659) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 412 59) '"The output is$? OM->(0.0 5.0 10.0 15.0 20.0 25.0 30.0 35.0 40.0 45.0 50.0)$The list  '(1 2 3 4 5 6 7 8 9 10 11) was rescaled according to its minimum value 1 and maximum value 11 as boundaries for scaling. These will become respectively 0 and 50. $" "" (om-make-point 33 380) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM-SCALE2" 'om-scale '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "a number" "MINOUT" 0) (om-load-inputfun 'input-funbox "a number" "MAXOUT" 0) (om-load-inputfun 'input-funbox "a number" "MININ" 0) (om-load-inputfun 'input-funbox "a number" "MAXIN" 0)) (om-make-point 130 542) (om-make-point 218 53) nil nil nil 1) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 192 502) (om-make-point 23 20) 0.0 "0.0" nil) (om-load-boxcall 'bastype "aux12" 't 'nil (om-make-point 229 502) (om-make-point 22 20) 50 "50" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 262 467) (om-make-point 28 20) 0 "0" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 299 466) (om-make-point 26 20) 12 "12" nil) (om-load-boxcall 'genfun "OM-SCALE1" 'om-scale '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "a number" "MINOUT" 0) (om-load-inputfun 'input-funbox "a number" "MAXOUT" 0)) (om-make-point 137 316) (om-make-point 186 53) nil nil nil 1) (om-load-boxcall 'bastype "aux7" 't 'nil (om-make-point 217 277) (om-make-point 28 24) 0.0 "0.0" nil) (om-load-boxcall 'bastype "aux11" 't 'nil (om-make-point 261 277) (om-make-point 31 24) 50 "50" nil) (om-load-boxcall 'bastype "aux412" 't 'nil (om-make-point 117 255) (om-make-point 136 22) (list 1 2 3 4 5 6 7 8 9 10 11) "(1 2 3 4 5 6 7 8 9 10 11)" nil) (om-load-boxcall 'bastype "aux411" 't 'nil (om-make-point 88 467) (om-make-point 160 20) (list 1 2 3 4 5 6 7 8 9 10 11) "(1 2 3 4 5 6 7 8 9 10 11)" nil) (om-load-boxcomment "comment" (om-make-point 412 59) '"Scales <self> considered to be in the interval [<minin> <maxin>] towards the interval [<minout> <maxout>].$<self> is a number or a tree. If [<minin> <maxin>] is not specified or equal to [0 0], it is bound to the min and the max of the tree.$" "" (om-make-point 35 179) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 90 29) '"om-scale" "" (om-make-point 176 4) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((13 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (7 0 4 3 nil 0) (8 0 4 4 nil 0) (12 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































