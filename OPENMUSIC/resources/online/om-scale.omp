; OM File Header - Saved 2021/07/13 16:49:39
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 710 846) "" 183 0 nil "2021/07/13 16:49:39")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om-scale" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 40 680) (om-make-point 554 42) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 526 22) "(4.1666665 8.333333 12.5 16.666666 20.833334 25.0 29.166666 33.333332 37.5 41.666668 45.833332)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 164 407) (om-make-point 288 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 260 20) "(0.0 5.0 10.0 15.0 20.0 25.0 30.0 35.0 40.0 45.0 50.0)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 135) (quote "INPUTS:$self          number or list$minout   number$maxout  number$OPTIONAL INPUTS:$minin      number$maxin     number$OUTPUT:$returns the list <self> rescaled$") "" (om-make-point 252 52) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 412 59) (quote "In the example above, the same list was rescaled with the same values of <minout> and <maxout>.  The output will be different because it is considered that the list <self> has 0 and 12 as boundaries. It is equivalent to ") "" (om-make-point 112 729) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 412 59) (quote "$The list  '(1 2 3 4 5 6 7 8 9 10 11) was rescaled according to its minimum value 1 and maximum value 11 as boundaries for scaling. These will become respectively 0 and 50. $") "" (om-make-point 113 444) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 210 612) (om-make-point 218 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 266 572) (om-make-point 35 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux12" (quote t) (quote nil) (om-make-point 304 572) (om-make-point 32 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 343 537) (om-make-point 26 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 376 536) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE1" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 217 336) (om-make-point 186 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 293 300) (om-make-point 35 30) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 341 300) (om-make-point 32 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux412" (quote t) (quote nil) (om-make-point 197 275) (om-make-point 135 30) (list 1 2 3 4 5 6 7 8 9 10 11) "(1 2 3 4 5 6 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux411" (quote t) (quote nil) (om-make-point 180 537) (om-make-point 135 30) (list 1 2 3 4 5 6 7 8 9 10 11) "(1 2 3 4 5 6 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 412 59) (quote "Scales <self> considered to be in the interval [<minin> <maxin>] towards the interval [<minout> <maxout>].$<self> is a number or a tree. If [<minin> <maxin>] is not specified or equal to [0 0], it is bound to the min and the max of the tree.$") "" (om-make-point 115 199) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 29) (quote "om-scale") "" (om-make-point 256 5) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (10 0 1 0 nil 0) (14 0 5 0 nil 0) (6 0 5 1 nil 0) (7 0 5 2 nil 0) (8 0 5 3 nil 0) (9 0 5 4 nil 0) (13 0 10 0 nil 0) (11 0 10 1 nil 0) (12 0 10 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 108 56)) (setf (pict-size newpict) (om-make-point 133 122)) newpict)) 6.2))
