; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 586 665) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "recude-tree" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 201 608) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "(5 (10 (10 hello)))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 299 415) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "(5 (10 (10 0)))" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 115 416) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "20" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 110) (quote "INPUTS:$self              number$function   function or Om-lambda-patch$OPTIONAL INPUT\"$Accum	$OUTPUT:$returns I1?  with decimal <decimal> places.$") "" (om-make-point 191 61) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 299 491) (om-make-point 50 30) "hello" "\"hello\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 168 491) (om-make-point 67 30) (list 10 10 5) "(10 10 5 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REDUCE-TREE" (quote reduce-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree" "SELF" (list 10 10)) (om-load-inputfun (quote input-funbox) "a function or a patch" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "a neutral value for <function>" "ACCUM" nil))) (om-make-point 236 533) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 254 491) (om-make-point 33 30) (quote list) "list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 370 304) (om-make-point 33 30) (quote list) "list" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REDUCE-TREE" (quote reduce-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree" "SELF" (list 10 10)) (om-load-inputfun (quote input-funbox) "a function or a patch" "FUNCTION" (quote +)))) (om-make-point 334 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 294 305) (om-make-point 67 30) (list 10 10 5) "(10 10 5 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 195 311) (om-make-point 26 30) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 122 312) (om-make-point 55 30) (list 10 10) "(10 10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REDUCE-TREE" (quote reduce-tree) (quote ((om-load-inputfun (quote input-funbox) "a tree" "SELF" (list 10 10)) (om-load-inputfun (quote input-funbox) "a function or a patch" "FUNCTION" (quote +)))) (om-make-point 150 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 381 68) (quote "Applies the commutative binary <function> throughout the tree. $So, function '+ gets the sum of all elements in the tree.$Optional <accum> should be the neutral element for the <function> considered.$If <accum> is nil, figures out what the neutral can be (works for +,*,min,max).$") "" (om-make-point 77 183) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 121 30) (quote "reduce-tree") "" (om-make-point 198 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (9 0 1 0 nil 0) (13 0 2 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (4 0 6 2 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 74 67)) (setf (pict-size newpict) (om-make-point 114 106)) newpict)) 6.2))
