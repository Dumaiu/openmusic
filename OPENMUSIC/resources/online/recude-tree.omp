;fileheader
; (5.11 :patc (om-make-point 14 170) (om-make-point 4 44) (om-make-point 473 618) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "recude-tree" '((om-load-boxcomment "comment" (om-make-point 202 110) '"INPUTS:$self              number$function   function or Om-lambda-patch$OPTIONAL INPUT\"$Accum	$OUTPUT:$returns I1?  with decimal <decimal> places.$" "" (om-make-point 171 41) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 135 39) '"will return$? OM->(5 (10 (10 \"hello\")))$" "" (om-make-point 138 497) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 121 41) '"will return$? OM->(5 (10 (10 0)))$" "" (om-make-point 240 333) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 71 35) '"will return$? OM->20$" "" (om-make-point 77 330) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 249 391) (om-make-point 65 29) "hello" "\"hello\"" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 108 391) (om-make-point 55 25) (list 10 10 5) "(10 10 5 )" nil) (om-load-boxcall 'genfun "REDUCE-TREE" 'reduce-tree '((om-load-inputfun 'input-funbox "a tree" "SELF" (list 10 10)) (om-load-inputfun 'input-funbox "a function or a patch" "FUNCTION" '+) (om-load-inputfun 'input-funbox "a neutral value for <function>" "ACCUM" nil)) (om-make-point 166 433) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 172 391) (om-make-point 57 26) 'list "list" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 300 224) (om-make-point 57 26) 'list "list" nil) (om-load-boxcall 'genfun "REDUCE-TREE" 'reduce-tree '((om-load-inputfun 'input-funbox "a tree" "SELF" (list 10 10)) (om-load-inputfun 'input-funbox "a function or a patch" "FUNCTION" '+)) (om-make-point 264 266) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 224 225) (om-make-point 55 25) (list 10 10 5) "(10 10 5 )" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 125 231) (om-make-point 12 22) '+ "+" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 42 229) (om-make-point 55 25) (list 10 10) "(10 10)" nil) (om-load-boxcall 'genfun "REDUCE-TREE" 'reduce-tree '((om-load-inputfun 'input-funbox "a tree" "SELF" (list 10 10)) (om-load-inputfun 'input-funbox "a function or a patch" "FUNCTION" '+)) (om-make-point 80 268) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 381 68) '"Applies the commutative binary <function> throughout the tree. $So, function '+ gets the sum of all elements in the tree.$Optional <accum> should be the neutral element for the <function> considered.$If <accum> is nil, figures out what the neutral can be (works for +,*,min,max).$" "" (om-make-point 57 150) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 121 30) '"reduce-tree" "" (om-make-point 178 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 6 0 nil 0) (7 0 6 1 nil 0) (4 0 6 2 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































