; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 580 749) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "range-filter" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 209 682) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(5 6 7 8)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 209 502) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(1 2 3 4 9 10)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 133) (quote "INPUTS:$list        list$posn     list$mode   menu$MENU:$Reject$Pass$OUTPUT:$returns a list$") "" (om-make-point 220 53) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-FILTER" (quote range-filter) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "position bounds" "POSN" (list (list 0 1) (list 3 4))) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote reject) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 181 608) (om-make-point 190 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-FILTER" (quote range-filter) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "position bounds" "POSN" (list (list 0 1) (list 3 4))) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote reject) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 181 426) (om-make-point 190 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 104 561) (om-make-point 124 30) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 239 561) (om-make-point 80 30) (list (list 0 3) (list 8 9)) "((0 3) (8 9)) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 331 560) (om-make-point 47 30) (quote reject) "reject" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 329 380) (om-make-point 44 30) (quote pass) "pass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 239 380) (om-make-point 80 30) (list (list 0 3) (list 8 9)) "((0 3) (8 9)) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 109 380) (om-make-point 124 30) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 367 133) (quote "Selects from a list <list>  all elements falling inside a range of given positions <posn> (counting from 0). The range of positions <posn> is given either as a list of two numbers or as a list of lists of two numbers. Each pair of numbers defines an interval (min-pos max-pos). $$If 'Pass' is selected any element in <list> falling inside one of these intervals is returned. $$ If 'Reject' is selected any elements in <list> not falling inside one of those intervals is returned. $") "" (om-make-point 79 210) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 36) (quote "range-filter") "" (om-make-point 228 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 3 0 nil 0) (6 0 3 1 nil 0) (7 0 3 2 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (8 0 4 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 89 63)) (setf (pict-size newpict) (om-make-point 122 114)) newpict)) 6.2))
