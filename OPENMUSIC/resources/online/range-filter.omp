;fileheader
; (5.11 :patc (om-make-point 274 302) (om-make-point 6 44) (om-make-point 507 711) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "range-filter" '((om-load-boxcomment "comment" (om-make-point 96 133) '"INPUTS:$list        list$posn     list$mode   menu$MENU:$Reject$Pass$OUTPUT:$returns a list$" "" (om-make-point 210 33) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "RANGE-FILTER" 'range-filter '((om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun 'input-funbox "position bounds" "POSN" (list (list 0 1) (list 3 4))) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'reject (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 127 558) (om-make-point 190 55) nil nil nil 1) (om-load-boxcall 'genfun "RANGE-FILTER" 'range-filter '((om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun 'input-funbox "position bounds" "POSN" (list (list 0 1) (list 3 4))) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'reject (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 126 376) (om-make-point 190 55) nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 70 511) (om-make-point 113 24) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 187 511) (om-make-point 76 24) (list (list 0 3) (list 8 9)) "((0 3) (8 9)) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 267 510) (om-make-point 45 26) 'reject "reject" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 266 329) (om-make-point 45 26) 'pass "pass" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 186 330) (om-make-point 76 24) (list (list 0 3) (list 8 9)) "((0 3) (8 9)) " nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 69 330) (om-make-point 113 24) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(5 6 7 8)" "" (om-make-point 169 625) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(1 2 3 4 9 10)" "" (om-make-point 176 449) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 367 133) '"Selects from a list <list>  all elements falling inside a range of given positions <posn> (counting from 0). The range of positions <posn> is given either as a list of two numbers or as a list of lists of two numbers. Each pair of numbers defines an interval (min-pos max-pos). $$If 'Pass' is selected any element in <list> falling inside one of these intervals is returned. $$ If 'Reject' is selected any elements in <list> not falling inside one of those intervals is returned. $" "" (om-make-point 69 190) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 99 29) '"range-filter" "" (om-make-point 208 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 1 0 nil 0) (4 0 1 1 nil 0) (5 0 1 2 nil 0) (8 0 2 0 nil 0) (7 0 2 1 nil 0) (6 0 2 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































