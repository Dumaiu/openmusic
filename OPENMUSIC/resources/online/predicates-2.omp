;fileheader
; (5.11 :patc (om-make-point 327 527) (om-make-point 4 44) (om-make-point 548 578) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "predicates-2" '((om-load-boxcomment "comment1" (om-make-point 201 108) '"Logical and.$omand is equivalent to the logical \"and\". It yields the value t (true) if all the subpatches connected to it evaluate to t. Accepts as many optional inputs as needed.$" "" (om-make-point 308 425) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->nil$" "" (om-make-point 322 385) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OMAND" 'omand '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "add patch" "REST" nil)) (om-make-point 340 344) nil nil nil nil 1) (om-load-boxcomment "comment3" (om-make-point 59 34) '"will return$? OM->t$" "" (om-make-point 120 383) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OMOR" 'omor '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "add patch" "REST" nil)) (om-make-point 139 343) nil nil nil nil 1) (om-load-boxcomment "comment1" (om-make-point 201 108) '"Logical or.$omor  is equivalent to the logical \"or\". It yields the value t (true) if one at least among the subpatches connected to it evaluates to t. Accepts as many optional inputs as needed.$" "" (om-make-point 78 426) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 279 44) '"(These modules are used in most cases with omif contrl function)" "" (om-make-point 126 142) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 248 206) (om-make-point 40 26) 69 "69" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 213 205) (om-make-point 24 25) 13 "13" nil) (om-load-boxcall 'genfun "OM>" 'om> '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 278 247) (om-make-point 43 35) nil nil nil 1) (om-load-boxcall 'genfun "OM<" 'om< '((om-load-inputfun 'input-funbox "a number" "SELF" 0) (om-load-inputfun 'input-funbox "a number" "NUM" 1)) (om-make-point 172 247) (om-make-point 46 35) nil nil nil 1) (om-load-boxcomment "comment2" (om-make-point 100 27) '"Predicates-2" "" (om-make-point 194 24) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 203 91) '"INPUT$self     any type ofdata$Optional input$rest    any type ofdata$OUTPUT$returns  t or nil according to the test$" "" (om-make-point 183 53) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor)))) '((10 0 2 0 nil 0) (9 0 2 1 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (8 0 10 0 nil 0) (7 0 10 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






















































