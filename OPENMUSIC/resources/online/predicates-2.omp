; OM File Header - Saved 2021/07/13 17:02:35
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 574 644) "" 183 0 nil "2021/07/13 17:02:35")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "predicates-2" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 121 388) (om-make-point 51 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 23 21) "t" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 322 389) (om-make-point 51 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 23 21) "nil" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 201 108) (quote "Logical and.$omand is equivalent to the logical \"and\". It yields the value t (true) if all the subpatches connected to it evaluate to t. Accepts as many optional inputs as needed.$") "" (om-make-point 308 445) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "REST" nil))) (om-make-point 340 344) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "REST" nil))) (om-make-point 139 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 201 108) (quote "Logical or.$omor  is equivalent to the logical \"or\". It yields the value t (true) if one at least among the subpatches connected to it evaluates to t. Accepts as many optional inputs as needed.$") "" (om-make-point 78 446) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 279 44) (quote "(These modules are used in most cases with omif contrl function)") "" (om-make-point 126 142) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 248 206) (om-make-point 32 30) 69 "69" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 213 205) (om-make-point 32 30) 13 "13" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 278 247) (om-make-point 43 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "SELF" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM" 1))) (om-make-point 172 247) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 161 32) (quote "Predicates-2") "" (om-make-point 192 10) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 91) (quote "INPUT$self     any type ofdata$Optional input$rest    any type ofdata$OUTPUT$returns  t or nil according to the test$") "" (om-make-point 183 53) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (3 0 1 0 nil 0) (10 0 3 0 nil 0) (9 0 3 1 nil 0) (10 0 4 0 nil 0) (9 0 4 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (8 0 10 0 nil 0) (7 0 10 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 77 50)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
