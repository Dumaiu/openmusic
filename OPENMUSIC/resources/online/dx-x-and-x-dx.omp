;fileheader
; (5.11 :patc (om-make-point 132 104) (om-make-point 5 44) (om-make-point 597 580) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "dx-x-and-x-dx" '((om-load-boxcomment "comment" (om-make-point 94 82) '"dx->x $INPUTS:$start   number$list     list$OUTPUT:$returns a  list$" "" (om-make-point 293 65) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 94 82) '"x->dx $INPUT:$self         list$OUTPUT:$returns a list$" "" (om-make-point 168 67) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 290 302) (om-make-point 61 25) 6000 "6000" nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "object or object list" "object" nil) (om-load-inputfun 'input-funbox "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "LONSET" "LONSET" (list 0 500)) (om-load-inputfun 'input-funbox "LDUR" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "LVEL" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "LCHAN" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "LEGATO" "LEGATO" 100)) (om-make-point 294 417) (om-make-point 247 96) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6200) (6400) (6500) (6700) (6900) (7100) (7200)) :lonset '(0 500 1000 1500 2000 2500 3000 3500 4000) :ldur '((500) (500) (500) (500) (500) (500) (500) (500)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1)) :legato 100)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 37/50 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 359 302) (om-make-point 172 25) (list 200 200 100 200 200 200 100) "(200 200 100 200 200 200 100)" nil) (om-load-boxcomment "comment" (om-make-point 206 49) '"will return$? OM->(200 200 100 200 200 200 100)$" "" (om-make-point 31 412) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 21 302) (om-make-point 220 39) (list 6000 6200 6400 6500 6700 6900 7100 7200) "(6000 6200 6400 6500 6700 6900 7100 7200))" nil) (om-load-boxcall 'genfun "DX->X1" 'dx->x '((om-load-inputfun 'input-funbox "a number" "START" 0) (om-load-inputfun 'input-funbox "a list of numbers" "LIST" (list 1 1))) (om-make-point 334 336) nil nil nil nil 1) (om-load-boxcall 'genfun "X->DX" 'x->dx '((om-load-inputfun 'input-funbox "a list of numbers" "SELF" 0)) (om-make-point 113 339) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 396 52) '"x->dx returns the list of the intervals between the contiguous values of a list xs.$dx->x constructs a list of numbers from <start> with the consecutive intervals of <list>." "" (om-make-point 104 158) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"x->dx and dx->x" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((7 0 3 1 nil 0) (2 0 7 0 nil 0) (4 0 7 1 nil 0) (6 0 8 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































