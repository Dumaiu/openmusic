;fileheader
; (5.11 :patc (om-make-point 343 32) (om-make-point 2 44) (om-make-point 525 677) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "included" '((om-load-boxcomment "comment" (om-make-point 202 120) '"INPUTS:$lst1    list$lst2    list$OPTIONAL INPUT:$test    symbol $OUTPUT:$returns true if all of the elements of lst1   $are also elements of lst2.  $Otherwise, it returns nil$" "" (om-make-point 194 29) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 82 43) '" will return $? OM-> t$" "" (om-make-point 208 595) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 283 471) (om-make-point 36 22) '> ">" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 214 470) (om-make-point 60 24) (list 2 4 1 5 3) "(2 4 1 5 3)" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 143 470) (om-make-point 66 24) (list 10 11 12) "(10 11 12)" nil) (om-load-boxcall 'genfun "INCLUDED?" 'included? '((om-load-inputfun 'input-funbox "first list" "LST1" nil) (om-load-inputfun 'input-funbox "second list" "LST2" nil) (om-load-inputfun 'input-funbox "test" "TEST" 'equal)) (om-make-point 170 523) (om-make-point 144 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 82 43) '" will return $? OM-> nil$" "" (om-make-point 274 402) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 82 43) '" will return $? OM-> t$" "" (om-make-point 128 400) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "INCLUDED?" 'included? '((om-load-inputfun 'input-funbox "first list" "LST1" nil) (om-load-inputfun 'input-funbox "second list" "LST2" nil)) (om-make-point 284 328) nil nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 246 275) (om-make-point 66 24) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 317 275) (om-make-point 60 24) (list 2 4 1 5 3) "(2 4 1 5 3)" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 172 275) (om-make-point 60 24) (list 2 4 1 5 3) "(2 4 1 5 3)" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 101 275) (om-make-point 60 24) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxcall 'genfun "INCLUDED?" 'included? '((om-load-inputfun 'input-funbox "first list" "LST1" nil) (om-load-inputfun 'input-funbox "second list" "LST2" nil)) (om-make-point 139 328) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 415 84) '"This function compares two lists, returning true if all the elements in the first are also elements of the second. If the optional <test> argument is added (the default value is Ôequal), the lists are compared globally according to any predicate. For example, if the predicate is Ô>, the module returns true if all elements in the first l i s t <lst1> are greater than at least one element in the second . " "" (om-make-point 79 181) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"included?" "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































