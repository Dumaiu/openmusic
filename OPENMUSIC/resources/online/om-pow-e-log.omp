; OM File Header - Saved 2021/07/13 17:02:35
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 654 701) "" 183 0 nil "2021/07/13 17:02:35")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om-pow-e-log" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 225 639) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "3.1354943" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 405 350) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 21) "2.7182818" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 121 349) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "1024" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 268 542) (om-make-point 53 28) 23 "23" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 288 127) (quote "INPUT:$self        number or list$Optional input$base   number $OUTPUT:$returns the log of <self>$$Calculates the natural logarithm of a number or a tree.$There is an optional <base> argument.$") "" (om-make-point 188 405) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-LOG" (quote om-log) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 280 585) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 257 91) (quote "INPUT:$self     number or list$OUPUT:$returns Exponential of <self>$$Calculates the exponential of a number or a tree.") "" (om-make-point 372 156) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 461 265) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-E" (quote om-e) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 2))) (om-make-point 460 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 195 263) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 148 263) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM^" (quote om^) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 178 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 99) (quote "INPUTS:$self     number or list$num   number or list$OUTPUT:$returns <self>  to the power of <num>$$Calculates <self>   taken to the power of <num>.") "" (om-make-point 100 150) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 253 33) (quote "om^ , om-e and om-log") "" (om-make-point 244 15) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (8 0 1 0 nil 0) (11 0 2 0 nil 0) (3 0 5 0 nil 0) (7 0 8 0 nil 0) (10 0 11 0 nil 0) (9 0 11 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 99 27)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
