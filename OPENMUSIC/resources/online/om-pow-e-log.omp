;fileheader
; (5.11 :patc (om-make-point 132 13) (om-make-point 5 44) (om-make-point 498 831) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-pow-e-log" '((om-load-boxcomment "comment" (om-make-point 165 41) '"will return$? OM->3.1354942159291497$" "" (om-make-point 138 766) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 151 47) '"will return$? OM->2.718281828459045$" "" (om-make-point 138 491) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 68 38) '"will return$? OM->1024$" "" (om-make-point 161 293) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 174 671) (om-make-point 53 28) 23 "23" nil) (om-load-boxcomment "comment" (om-make-point 288 127) '"INPUT:$self        number or list$Optional input$base   number $OUTPUT:$returns the log of <self>$$Calculates the natural logarithm of a number or a tree.$There is an optional <base> argument.$" "" (om-make-point 94 534) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM-LOG" 'om-log '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1)) (om-make-point 186 714) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 257 91) '"INPUT:$self     number or list$OUPUT:$returns Exponential of <self>$$Calculates the exponential of a number or a tree." "" (om-make-point 96 320) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 193 413) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'genfun "OM-E" 'om-e '((om-load-inputfun 'input-funbox "number or tree" "SELF" 2)) (om-make-point 185 434) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 205 210) (om-make-point 39 26) 10 "10" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 158 210) (om-make-point 21 23) 2 "2" nil) (om-load-boxcall 'genfun "OM^" 'om^ '((om-load-inputfun 'input-funbox "number or tree" "SELF" 1) (om-load-inputfun 'input-funbox "number or tree" "NUM" 1)) (om-make-point 188 249) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 241 99) '"INPUTS:$self     number or list$num   number or list$OUTPUT:$returns <self>  to the power of <num>$$Calculates <self>   taken to the power of <num>." "" (om-make-point 110 97) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 206 31) '"om^ , om-e and om-log" "" (om-make-point 117 21) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 5 0 nil 0) (7 0 8 0 nil 0) (10 0 11 0 nil 0) (9 0 11 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































