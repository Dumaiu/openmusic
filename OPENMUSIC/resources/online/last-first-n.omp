;fileheader
; (5.11 :patc (om-make-point 149 67) (om-make-point 9 44) (om-make-point 454 448) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "last-first-n" '((om-load-boxcomment "comment" (om-make-point 148 79) '"INPUTS:$list   list $n      integer$OUTPUT:$returns  a list$" "" (om-make-point 199 31) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 303 266) (om-make-point 22 22) 3 "3" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 146 265) (om-make-point 22 22) 3 "3" nil) (om-load-boxcall 'genfun "FIRST-N" 'first-n '((om-load-inputfun 'input-funbox "one list" "LIST" nil) (om-load-inputfun 'input-funbox "number of elements" "N" 0)) (om-make-point 280 290) nil nil nil nil 1) (om-load-boxcall 'genfun "LAST-N" 'last-n '((om-load-inputfun 'input-funbox "one list" "LIST" nil) (om-load-inputfun 'input-funbox "number of elements" "N" 0)) (om-make-point 124 290) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 80 37) '"will return$? OM->(1 2 3)$" "" (om-make-point 263 347) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 68 38) '"will return$? OM->(7 8 9)$" "" (om-make-point 103 343) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 147 200) (om-make-point 135 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcomment "comment" (om-make-point 266 39) '"Returns the <n> last or first elements of <list>.$<n> must be a non-negative integer.$" "" (om-make-point 131 138) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"last-n and first-n" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((7 0 3 0 nil 0) (1 0 3 1 nil 0) (7 0 4 0 nil 0) (2 0 4 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































