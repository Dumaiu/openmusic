; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 121 184) (om-make-point 0 0) (om-make-point 715 849) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sort-list" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 108 699) (om-make-point 427 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 399 20) "(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 78 383) (om-make-point 171 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 143 20) "(1 3 4 5 7 65 96 98 212)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 301 387) (om-make-point 171 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 143 20) "(212 98 96 65 7 5 4 3 1)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 315 500) (om-make-point 26 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 224 561) (om-make-point 204 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 439 294) (om-make-point 26 30) (quote >) ">" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil))) (om-make-point 367 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 144 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 260 115) (quote "INPUT:$lst       list$KEYS:$test    symbol, function or Lambda-function$key     symbol, function or Lambda-function$OUTPUT:$returns a sorted list according to a test$") "" (om-make-point 223 59) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 544 109) (quote "This patch sorts a list of characters according to their ASCII number:$First the symbols are transformed into characters and  encoded following the ASCII code (ignoring uppercase characters). $This is done through the third optional input <key> where we connected 'mypatch' in lambda mode.$The function will sort the list following the character code in an ascending order.$(Note: character and char-code are commonLisp standard functions that can be called directly in OpenMusic inside a patch) $") "" (om-make-point 88 744) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 245 56) (quote "The default value of the optional argument being '<' , this patch will return$") "" (om-make-point 50 425) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 314 266) (om-make-point 138 30) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 98 273) (om-make-point 141 36) (list 4 65 3 1 98 5 7 212 96) "(4 65 3 1 98 5 7 212 96)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 151 482) (om-make-point 143 55) (list (quote q) (quote w) (quote e) (quote r) (quote t) (quote y) (quote u) (quote i) (quote o) (quote p) (quote a) (quote s) (quote d) (quote f) (quote g) (quote h) (quote j) (quote k) (quote l) (quote z) (quote x) (quote c) (quote v) (quote b) (quote n) (quote m)) "(q w e r t y u i o p   a s d f g h j k l z x c v b n m)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 303 631) nil nil nil (list (let ((box (om-load-boxin "input0" 0 (om-make-point 192 42) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 185 238) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 188 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "CHAR-CODE" (quote char-code) (quote ((om-load-inputfun (quote input-funbox) "CHARACTER" "CHARACTER" nil))) (om-make-point 115 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHARACTER" (quote character) (quote ((om-load-inputfun (quote input-funbox) "THING" "THING" nil))) (om-make-point 117 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 123 167) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 17) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 182 168) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 192 295) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 125 296) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "CHAR-CODE" (quote char-code) (quote ((om-load-inputfun (quote input-funbox) "CHARACTER" "CHARACTER" nil))) (om-make-point 62 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHARACTER" (quote character) (quote ((om-load-inputfun (quote input-funbox) "THING" "THING" nil))) (om-make-point 64 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 70 147) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 78 -3) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 2 0 nil 0))) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 354 471) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 616 95) (quote "This module sorts a list. By default, the order of the sort is ascending, but since the module is extensible, you can open a second entry (a key by typing 'K') <test> to set the choice of order. If test is '>' the order is descending, '<' indicates ascending, and '=' keeps the same order. One can also open a third input <key> for a function. The function <key> evaluates each element of the list <lst> and the result is then sorted according to the parameter <test>.$a function icon or subpatch icon in 'lambda' mode can be connected to <test> and <key>.$") "" (om-make-point 87 168) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 118 36) (quote "sort-list") "" (om-make-point 302 9) nil (om-make-color 0 0 0) (om-make-font "Arial" 18.666666666666665D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 0 0 0 nil 0) (7 0 1 0 nil 0) (6 0 2 0 nil 0) (13 0 4 0 nil 0) (3 0 4 1 nil 0) (15 0 4 2 nil 0) (11 0 6 0 nil 0) (5 0 6 1 nil 0) (12 0 7 0 nil 0) (4 0 14 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 83 60)) (setf (pict-size newpict) (om-make-point 134 104)) newpict)) 6.2))
