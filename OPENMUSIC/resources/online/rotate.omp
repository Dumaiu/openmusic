;fileheader
; (5.11 :patc (om-make-point 130 12) (om-make-point 3 45) (om-make-point 546 625) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "rotate" '((om-load-boxcomment "comment" (om-make-point 157 101) '"INPUT:$list     list$OPTIONAL INPUT:$nth    integer$OUTPUT:$returns a copy of list with its elements rotated$" "" (om-make-point 197 43) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 338 64) '"<nth> can be a negative integer . This will rotate the list backwards (from right to left)$returns$? OM-> (9 1 2 3 4 5 6 7 8)$" "" (om-make-point 93 520) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 137 38) '"returns$? OM-> (6 7 8 9 1 2 3 4 5)$" "" (om-make-point 286 341) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 135 39) '"will return$? OM-> (2 3 4 5 6 7 8 9 1)$" "" (om-make-point 62 342) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 154 402) (om-make-point 108 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall 'genfun "ROTATE" 'rotate '((om-load-inputfun 'input-funbox "the list" "LIST" nil) (om-load-inputfun 'input-funbox "nth" "NTH" 1)) (om-make-point 243 449) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 274 404) (om-make-point 21 25) -1 "-1" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 375 240) (om-make-point 21 25) 5 "5" nil) (om-load-boxcall 'genfun "ROTATE" 'rotate '((om-load-inputfun 'input-funbox "the list" "LIST" nil) (om-load-inputfun 'input-funbox "nth" "NTH" 1)) (om-make-point 344 285) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 255 238) (om-make-point 108 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 71 244) (om-make-point 108 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall 'genfun "ROTATE" 'rotate '((om-load-inputfun 'input-funbox "the list" "LIST" nil)) (om-make-point 107 284) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 351 57) '"The rotate module returns a circular permutation of a list starting from its nth element. <nth>  is the argument of the optional input which default value is1, ( nth = 0 means the first element of l i s t , nth = 1 means the second element of list, and so on)." "" (om-make-point 67 166) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"rotate" "" (om-make-point 198 11) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 0 5 0 nil 0) (6 0 5 1 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 11 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































