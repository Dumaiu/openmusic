;fileheader
; (5.11 :patc (om-make-point 68 376) (om-make-point 1 44) (om-make-point 571 534) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sdif-basic" '((om-load-boxcall 'genfun "NUMFRAMES" 'numframes '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 145 275) nil nil nil nil 1) (om-load-boxcall 'genfun "FRAMEINFO" 'frameinfo '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "I" 0)) (om-make-point 229 275) nil nil nil nil 5) (om-load-boxcall 'genfun "NUMMATRIX" 'nummatrix '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "I" 0)) (om-make-point 324 275) nil nil nil nil 1) (om-load-boxcall 'genfun "MATRIXINFO" 'matrixinfo '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "I" 1) (om-load-inputfun 'input-funbox "no documentation" "J" 0)) (om-make-point 458 275) nil nil nil nil 4) (om-load-boxcall 'genfun "SDIFINFO" 'sdifinfo '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil)) (om-make-point 80 275) nil nil nil nil 1) (om-load-editor-box1 "SDIFFILE1" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 209 135) (om-make-point 78 72) (let ((newobj (om-load-if (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "file01" :type "sdif") 'load-sdif-file))) newobj) "x" nil (corrige (pairlis '(obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) nil nil nil) (om-load-boxcomment "comment9" (om-make-point 136 41) '"<-- Load SDIF using a file chooser" "" (om-make-point 309 143) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment8" (om-make-point 216 42) '"- Eval box to load$- double-click to open with SDIF-Edit" "" (om-make-point 308 184) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment6" (om-make-point 78 39) '"Lists all frames info" "" (om-make-point 68 325) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment5" (om-make-point 57 37) '"Counts frames" "" (om-make-point 148 325) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment4" (om-make-point 98 121) '"Returns info for frame number i$- signature$- time$- stream ID$- position in file$- number of matrices" "" (om-make-point 210 325) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment3" (om-make-point 116 62) '"Returns number of matrices in frame i" "" (om-make-point 314 325) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment2" (om-make-point 98 121) '"Returns info for matrix j in frame number i$- signature$- num. rows$- num. columns$- data size$- position in file" "" (om-make-point 435 325) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment1" (om-make-point 156 26) '"<-- SDIF File box -->$" "" (om-make-point 180 102) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 212 54) '"Loading an SDIF file &$Basic SDIF Accessors" "" (om-make-point 173 13) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 0 0 nil 0) (5 0 1 0 nil 0) (5 0 2 0 nil 0) (5 0 3 0 nil 0) (5 0 4 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))









