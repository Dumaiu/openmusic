;fileheader
; (5.11 :patc (om-make-point 72 140) (om-make-point 3 44) (om-make-point 491 369) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "create-list" '((om-load-boxcomment "comment" (om-make-point 228 76) '"INPUTS:$count    integer.$elem     any type of data$OUTPUT:$returns a list of count  instances of elem$$" "" (om-make-point 111 38) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 218 168) (om-make-point 26 23) (list 'a 2) "(a 2)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 178 169) (om-make-point 19 22) 5 "5" nil) (om-load-boxcall 'genfun "CREATE-LIST" 'create-list '((om-load-inputfun 'input-funbox "number of elements" "COUNT" 10) (om-load-inputfun 'input-funbox "initial element" "ELEM" nil)) (om-make-point 184 204) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 178 38) '"will return$? OM->((a 2) (a 2) (a 2) (a 2) (a 2))$" "" (om-make-point 152 279) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 236 38) '"Returns a list of length <count>  filled with <elem> " "" (om-make-point 107 130) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"create-list" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 3 0 nil 0) (1 0 3 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































