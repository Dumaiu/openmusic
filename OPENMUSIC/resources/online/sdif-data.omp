;fileheader
; (5.11 :patc (om-make-point 152 375) (om-make-point 4 44) (om-make-point 786 587) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sdif-data" '((om-load-boxcall 'genfun "GETROW" 'getrow '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "FNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "RNUM" 0)) (om-make-point 113 262) (om-make-point 71 51) nil nil nil 1) (om-load-boxcall 'genfun "GETCOL" 'getcol '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "FNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "MNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "CNUM" 3)) (om-make-point 359 262) (om-make-point 58 51) nil nil nil 1) (om-load-boxcall 'genfun "GETVAL" 'getval '((om-load-inputfun 'input-funbox "no documentation" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "FNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "MNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "RNUM" 0) (om-load-inputfun 'input-funbox "no documentation" "CNUM" 0)) (om-make-point 563 262) (om-make-point 71 51) nil nil nil 1) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "Y-POINTS" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "DECIMALS" "DECIMALS" 6)) (om-make-point 335 337) (om-make-point 87 82) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0) '(1.838241 1.11899 -1.407601 1.501187 -1.806989 1.643844 -0.12954 -3.095587 -0.471561 -2.158832 0.898635 2.669712 1.145227 2.356162 2.76483 0.782424 -0.107131 -2.64834 2.289742 1.399109) 'bpf 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) t nil nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 399 317) (om-make-point 11 20) 6 "6" nil) (om-load-editor-box1 "SDIFFILE" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 334 114) (om-make-point 78 72) (let ((newobj (om-load-if (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "file01" :type "sdif") 'load-sdif-file))) newobj) "x" nil (corrige (pairlis '(obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) nil nil nil) (om-load-boxcomment "comment3" (om-make-point 219 80) '"Access by ELEMENT :$get one row in matrix j from frame i$(i. e. the values of the different description fields for this element in this matrix)" "" (om-make-point 68 434) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment2" (om-make-point 219 80) '"Access by FIELD :$get one column in matrix j from frame i$(i. e. the values one desciption field in this matrix)" "" (om-make-point 304 437) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment1" (om-make-point 219 80) '"Access by VALUE :$get one value in matrix j from frame i$(i. e. the value one element for one desciption field in this matrix)" "" (om-make-point 531 433) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 212 54) '"Extracting SDIF data$    by position" "" (om-make-point 277 12) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 0 0 nil 0) (5 0 1 0 nil 0) (5 0 2 0 nil 0) (1 0 3 2 nil 0) (4 0 3 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))
