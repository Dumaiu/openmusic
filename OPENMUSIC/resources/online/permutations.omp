;fileheader
; (5.11 :patc (om-make-point 146 95) (om-make-point 8 44) (om-make-point 483 488) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "permutations" '((om-load-boxcomment "comment" (om-make-point 151 97) '"INPUT:$bag      list$OUTPUT:$return a list of all the permutations of the input.$" "" (om-make-point 186 39) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "PERMUTATIONS" 'permutations '((om-load-inputfun 'input-funbox "a list" "BAG" nil)) (om-make-point 200 234) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 310 99) '"will return$? OM-> ((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))$$Note: permutations being a recursive function, one must be carefull not to use big lists which will cause an ‘out of memory’ error.$" "" (om-make-point 89 299) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 198 190) (om-make-point 77 31) (list 1 2 3) "(1 2 3)" nil) (om-load-boxcomment "comment" (om-make-point 366 48) '"The permutations module returns all possible permutations from <bag>." "" (om-make-point 84 143) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"permutations" "" (om-make-point 191 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 1 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































