;fileheader
; (5.11 :patc (om-make-point 77 510) (om-make-point 4 44) (om-make-point 588 818) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sound" '((om-load-boxcall 'lispfun "PATHNAME-NAME" 'pathname-name '((om-load-inputfun 'input-funbox "PATHNAME" "PATHNAME" nil)) (om-make-point 41 557) nil nil nil nil 1) (om-load-boxcall 'lispfun "PATHNAME" 'pathname '((om-load-inputfun 'input-funbox "THING" "THING" nil)) (om-make-point 29 462) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 68 385) (om-make-point 75 25) "cl:online:in-files:pulse1b.aiff" "\"cl:online:in-files:pulse1b.aiff\"" nil) (om-load-boxcomment "comment" (om-make-point 216 70) '"INFILE :$create a pathname with the input name and  the input-files directory specified in the Preferences" "" (om-make-point 233 478) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 140 486) (om-make-point 75 25) "pulse1b.aiff" "\"pulse1b.aiff\"" nil) (om-load-boxcall 'genfun "INFILE" 'infile '((om-load-inputfun 'input-funbox "no documentation" "PATH" nil)) (om-make-point 160 512) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 194 625) (om-make-point 108 33) (list 0.5 1.0 1.5 2.5 4.0) "(0.5 1.0 1.5 2.5 4.0)" nil) (om-load-boxcomment "comment" (om-make-point 222 59) '"Markers can also be added (alt+click), edited, and removed from inside the sound editor" "" (om-make-point 289 677) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 57 27) '"SOUND" "" (om-make-point 71 668) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 211 42) '"The 3rd in/ouput of the SOUND box is a list of temporal markers" "" (om-make-point 197 575) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "SOUND" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 138 664) (om-make-point 145 92) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "WorkSpaces" "OMWorkspace" "in-files") :device :unspecific :name "pulse1b" :type "aiff") 1))) (when thesound (setf (markers thesound) '(0.5 1.0 1.5 2.5 4.0))) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode) (list 't 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2 0))) t nil nil) (om-load-editor-box1 "SOUND" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 1) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 99 219) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "pulse1b" :type "aiff") 1))) (when thesound (setf (markers thesound) 'nil)) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-editor-box1 "SOUND1" 'sound '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TRACKNUM" 2) (om-load-inputfun 'input-funbox "no documentation" "MARKERS" nil)) (om-make-point 199 219) (om-make-point 88 65) (let ((newobj (let ((thesound (load-sound (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "pulse3a" :type "aiff") 2))) (when thesound (setf (markers thesound) 'nil)) thesound))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcomment "comment7" (om-make-point 69 29) '"Tracks" "" (om-make-point 196 75) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment6" (om-make-point 209 56) '"Sounds can be assigned an audio track in order to be controlled by a mixing console" "" (om-make-point 144 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment5" (om-make-point 209 56) '"The track number can be set using the 2nd input of the sound box or inside the sound editor" "" (om-make-point 296 221) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "AUDIO-MIX-CONSOLE" 'audio-mix-console '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "NBTRACKS" 2)) (om-make-point 207 348) (om-make-point 91 61) (let ((rep (make-instance 'audio-mix-console :nbtracks '1))) (setf (channels-ctrl rep) (list (if (find-class 'audio-channel-ctrl nil) (make-instance 'audio-channel-ctrl :track 1 :pan-ctrl 0 :vol-ctrl 100 :from-file t)))) rep) nil nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) nil nil nil) (om-load-boxcomment "comment4" (om-make-point 143 27) '"AUDIO-MIX-CONSOLE" "" (om-make-point 37 312) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 57 27) '"SOUND" "" (om-make-point 35 190) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment2" (om-make-point 104 39) '"<-- Number of tracks" "" (om-make-point 285 314) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 263 325) (om-make-point 12 22) 2 "2" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 139 196) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 239 196) (om-make-point 12 22) 2 "2" nil) (om-load-boxcomment "comment1" (om-make-point 139 58) '"Eval and double click to acces the mixin console interface" "" (om-make-point 314 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 212 54) '"SOUND & $AUDIO-MIX-CONSOLE" "" (om-make-point 173 13) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 1 0 nil 0) (4 0 5 0 nil 0) (2 0 10 0 nil 0) (6 0 10 2 nil 0) (21 0 11 1 nil 0) (22 0 12 1 nil 0) (20 0 16 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))
