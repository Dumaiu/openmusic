;fileheader
; (5.11 :patc (om-make-point 68 450) (om-make-point 4 44) (om-make-point 659 727) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "sdif-classes" '((om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 376 83) (om-make-point 78 74) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "SDIFMATRIX1" 'sdifmatrix '((om-load-inputfun 'input-funbox "object or object list" "self" nil) (om-load-inputfun 'input-funbox "How many matrix fields?" "numrows" 30) (om-load-inputfun 'input-funbox "matrix type" "signature" "") (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par1) (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par2) (om-load-inputfun 'control-keyword "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" ':par3)) (om-make-point 286 176) (om-make-point 180 111) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy)) nil nil (make-instance 'ed-par-array :panel-list '(("All open") ("All close")) :cur-group-ind 0 :color-list nil) nil nil nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 457 146) (om-make-point 52 24) (list 5 7 8 2) "(5 7 8 2)" nil) (om-load-editor-box1 "SDIFTYPE1" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'f (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XFRA") (om-load-inputfun 'input-funbox "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")))) (om-make-point 17 214) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'f :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) nil nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 332 163) (om-make-point 43 22) "XMAT" "\"XMAT\"" nil) (om-load-editor-box1 "SDIFTYPE" 'sdiftype '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "Frame/Matrix" "struct" 'm (list (list "Frame" ''f) (list "Matrix" ''m))) (om-load-inputfun 'input-funbox "signature (4 chars)" "signature" "XMAT") (om-load-inputfun 'input-funbox "description du type" "description" (list "par1" "par2" "par3"))) (om-make-point 103 215) (om-make-point 70 50) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) "x" nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) nil nil nil) (om-load-editor-box1 "SDIFSTREAM" 'sdifstream '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "ID" 0) (om-load-inputfun 'input-funbox "no documentation" "LFRAMES" nil)) (om-make-point 284 513) (om-make-point 123 76) (if (find-class 'sdifstream nil) (make-instance 'sdifstream :id 0 :lframes nil :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) nil nil nil) (om-load-editor-box1 "SDIF-BUFFER" 'sdif-buffer '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "TYPES" nil) (om-load-inputfun 'input-funbox "no documentation" "LFRAMES" nil)) (om-make-point 287 607) (om-make-point 114 75) (if (find-class 'sdif-buffer nil) (make-instance 'sdif-buffer :types (list (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'f :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XNFO" :description (list "Info") :from-file t)) (if (find-class 'sdiftype nil) (make-instance 'sdiftype :struct 'm :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t))) :lframes (list (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.09321311506109892 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.22978730542545636 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.45919105496106866 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.7016183262721045 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9276206249885645 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9539733286089698 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 0.9604699182519129 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.0322132912133135 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.0477207061792178 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.5989417426268415 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9164193829827372 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9166930614350233 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 1.9398137404393663 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.0452956707129175 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.121925916749846 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.495906711548393 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.5661583665128025 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.637771838601254 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.835524515873798 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 2.902104096304819 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.325077599520008 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.41420354957544 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.5077955452870495 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.5844198867388437 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 3.745516936752045 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.062650248525013 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.178011779073648 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.196602933475008 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.386463303838788 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.658937928562868 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.69584933425458 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 4.701523044521964 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.042470255945753 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.229809554721805 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.42684254316025 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.467888648561926 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.500343731605156 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.524037211246858 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.609023544209122 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.623317166461269 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.633235118600046 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.645403406853608 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.686726543468845 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 5.710139508750549 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 6.176189735859986 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.020552376323477 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.13932884324217 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.289212676303858 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.40255515538632 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.60334655196098 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.608511313066839 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.8414754529324835 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 7.992137182489293 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.158495609012423 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.266083296884005 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 8.767954052925024 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.398119206350518 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.698642920141374 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.742889943985064 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t)) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature "XFRA" :ftime 9.859561640507657 :streamid 0 :lmatrix (list (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 1))) (setf (slot-value copy 'signature) "XNFO") (setf (lcontrols copy) (list (list ':k0 4))) (setf (lprecision copy) (list 3)) copy)) (if (find-class 'sdifmatrix nil) (let ((copy (make-instance 'sdifmatrix :numrows 0 :numcols 30))) (setf (slot-value copy 'signature) "XMAT") (setf (lcontrols copy) (list (list ':par1 (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 18 32 40 42 67 78 94 100) '(0 60 54 10 44 13 39 43 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) (list ':par2 (list 0 60 54 10 44 13 39 43 100)) (list ':par3 (list 5 7 8 2)))) (setf (lprecision copy) (list 3)) copy))) :from-file t))) :from-file t)) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) nil nil nil) (om-load-boxcomment "comment16" (om-make-point 146 30) '"SDIF Classes" "" (om-make-point 310 7) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment15" (om-make-point 170 30) '"Create your own SDIF data..." "" (om-make-point 281 35) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment14" (om-make-point 129 55) '"- frame or matrix?$- Signature (\"XXXX\")$- Description" "" (om-make-point 18 166) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment13" (om-make-point 213 37) '"When creating an SDIF file, all new (user-defined) types must be declared" "" (om-make-point 11 296) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment12" (om-make-point 119 55) '"- number of rows$- type signature$- n columns (fields)" "" (om-make-point 500 208) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment11" (om-make-point 147 52) '"Add/Remove matrix columns using Alt+Left or alt+Right keys" "" (om-make-point 498 265) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor))) (om-load-boxcomment "comment10" (om-make-point 206 64) '"SDIF matrix data can be set following the various ways allowed by the Class-Array$(lists, bpf, function, etc.)" "" (om-make-point 286 324) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor))) (om-load-boxcomment "comment9" (om-make-point 81 30) '"SDIFTYPE" "" (om-make-point 17 128) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment8" (om-make-point 105 23) '"SDIFMATRIX" "" (om-make-point 263 119) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-editor-box1 "SDIFFRAME" 'sdifframe '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "SIGNATURE" nil) (om-load-inputfun 'input-funbox "no documentation" "FTIME" 0.0) (om-load-inputfun 'input-funbox "no documentation" "STREAMID" 0) (om-load-inputfun 'input-funbox "no documentation" "LMATRIX" nil)) (om-make-point 286 415) (om-make-point 118 84) (if (find-class 'sdifframe nil) (make-instance 'sdifframe :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode) (list 't 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0))) nil nil nil) (om-load-boxcomment "comment7" (om-make-point 105 23) '"SDIFFRAME" "" (om-make-point 167 437) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment6" (om-make-point 135 66) '"- type signature$- time$- streamID$- List of SDIFMatrix" "" (om-make-point 424 434) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment5" (om-make-point 134 41) '"- streamID$- List of SDIFFrames" "" (om-make-point 421 530) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment4" (om-make-point 105 23) '"SDIFSTREAM" "" (om-make-point 165 529) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment3" (om-make-point 148 39) '"(All frames' streamID are converted)" "" (om-make-point 421 567) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor))) (om-load-boxcomment "comment2" (om-make-point 105 23) '"SDIFBUFFER" "" (om-make-point 167 616) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment1" (om-make-point 208 42) '"- List of SDIFType$- List of SDIFFrames or SDIFStream" "" (om-make-point 411 619) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 144 27) '"Equivalent to an SDIFFile" "" (om-make-point 120 638) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor)))) '((4 0 1 2 nil 0) (0 0 1 3 nil 0) (0 2 1 4 nil 0) (2 0 1 5 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))










































































































































































