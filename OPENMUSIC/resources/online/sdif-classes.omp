; OM File Header - Saved 2021/07/13 18:15:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 757 737) "" 183 0 nil "2021/07/13 18:15:01")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "sdif-classes" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 376 83) (om-make-point 78 74) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX1" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 30) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par1) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par2) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par3) nil nil))) (om-make-point 286 176) (om-make-point 180 111) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (quote :par2) (list 0 60 54 10 44 13 39 43 100)) (list (quote :par3) (list 5 7 8 2)))) (setf (data array) nil) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 10 40) (om-make-point 335 275) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 468 138) (om-make-point 61 30) (list 5 7 8 2) "(5 7 8 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE1" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XFRA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat"))))) (om-make-point 17 214) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 308 133) (om-make-point 57 30) "XMAT" "\"XMAT\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1" "par2" "par3")))) (om-make-point 103 215) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFSTREAM" (quote sdifstream) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "ID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LFRAMES" nil))) (om-make-point 284 513) (om-make-point 123 76) (if (find-class (quote sdifstream) nil) (make-instance (quote sdifstream) :id 0 :lframes nil :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIF-BUFFER" (quote sdif-buffer) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TYPES" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LFRAMES" nil))) (om-make-point 287 607) (om-make-point 114 75) (when (find-class (quote sdif-buffer) nil) (make-instance (quote sdif-buffer))) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment16" (om-make-point 146 30) (quote "SDIF Classes") "" (om-make-point 310 7) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment15" (om-make-point 170 30) (quote "Create your own SDIF data...") "" (om-make-point 281 35) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment14" (om-make-point 129 55) (quote "- frame or matrix?$- Signature (\"XXXX\")$- Description") "" (om-make-point 18 166) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment13" (om-make-point 213 37) (quote "When creating an SDIF file, all new (user-defined) types must be declared") "" (om-make-point 11 296) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment12" (om-make-point 119 55) (quote "- number of rows$- type signature$- n columns (fields)") "" (om-make-point 500 208) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 147 52) (quote "Add/Remove matrix columns using Alt+Left or alt+Right keys") "" (om-make-point 498 265) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment10" (om-make-point 206 64) (quote "SDIF matrix data can be set following the various ways allowed by the Class-Array$(lists, bpf, function, etc.)") "" (om-make-point 286 324) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment9" (om-make-point 81 30) (quote "SDIFTYPE") "" (om-make-point 17 128) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment8" (om-make-point 105 23) (quote "SDIFMATRIX") "" (om-make-point 262 99) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 286 415) (om-make-point 118 84) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment7" (om-make-point 105 23) (quote "SDIFFRAME") "" (om-make-point 167 437) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment6" (om-make-point 135 66) (quote "- type signature$- time$- streamID$- List of SDIFMatrix") "" (om-make-point 424 434) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment5" (om-make-point 134 41) (quote "- streamID$- List of SDIFFrames") "" (om-make-point 421 530) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment4" (om-make-point 105 23) (quote "SDIFSTREAM") "" (om-make-point 165 529) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment3" (om-make-point 148 39) (quote "(All frames' streamID are converted)") "" (om-make-point 421 567) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment2" (om-make-point 105 23) (quote "SDIFBUFFER") "" (om-make-point 167 616) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 208 42) (quote "- List of SDIFType$- List of SDIFFrames or SDIFStream") "" (om-make-point 411 619) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 27) (quote "Equivalent to an SDIFFile") "" (om-make-point 120 638) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 2 nil 0) (0 0 1 3 nil 0) (0 2 1 4 nil 0) (2 0 1 5 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 8 34)) (setf (pict-size newpict) (om-make-point 102 93)) newpict)) 6.2))
