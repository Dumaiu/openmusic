; OM File Header - Saved 2021/07/13 15:06:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 790 964) "" 183 0 nil "2021/07/13 15:06:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "geometric-ser" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 159 132) (quote "INPUTS:$seed     number$factor    number$limit        number$OPTIONAL INPUTS:$nummax  number$begin        number$end            number$OUTPUT:$returns a geometric series$") "" (om-make-point 281 41) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 260 680) (om-make-point 31 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 220 680) (om-make-point 26 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 57 680) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 90 680) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 120 680) (om-make-point 50 30) 12000 "12000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 1) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 10) (om-load-inputfun (quote input-funbox) "nummax" "NUMMAX" 10) (om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end" "END" 10))) (om-make-point 33 718) (om-make-point 265 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 180 680) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 212 480) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 1) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 10) (om-load-inputfun (quote input-funbox) "nummax" "NUMMAX" 10))) (om-make-point 26 515) (om-make-point 249 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 153 480) (om-make-point 50 30) 12000 "12000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 115 480) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 65 480) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 289 79) (quote "and if one sets <begin> to 8 and  <end>  to 11$one obtains$? OM->(256 512 1024 2048)$The priority in determining the limit of the list is given first by <limit> followed by <begin> & <end> and then with <numax>$") "" (om-make-point 29 811) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 288 47) (quote "Setting <numax> to 10 we limit the serie to eleven elements$? OM->(1 2 4 8 16 32 64 128 256 512 1024)$") "" (om-make-point 23 596) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 288 47) (quote "will return$? OM->(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192)$$") "" (om-make-point 34 412) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 90 327) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 151 327) (om-make-point 26 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 202 327) (om-make-point 50 30) 12000 "12000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 1) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 10))) (om-make-point 39 359) (om-make-point 249 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 424 337) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 481 337) (om-make-point 35 30) 1.5 "1.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "freq" "FREQ" 440))) (om-make-point 466 603) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)))) (om-make-point 452 657) (om-make-point 99 219) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000 4702 5404 6106 6808 7510 8212 8914 9616)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode)) (list nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 545 337) (om-make-point 32 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "midic" "MIDICS?" 6000))) (om-make-point 422 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 451 556) (om-make-point 66 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GEOMETRIC-SER" (quote geometric-ser) (quote ((om-load-inputfun (quote input-funbox) "seed" "SEED" 1) (om-load-inputfun (quote input-funbox) "factor" "FACTOR" 1) (om-load-inputfun (quote input-funbox) "limit" "LIMIT" 10))) (om-make-point 373 368) (om-make-point 249 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "MIDIC" 6000) (om-load-inputfun (quote input-funbox) "no documentation" "VEL" 80) (om-load-inputfun (quote input-funbox) "no documentation" "DUR" 1000) (om-load-inputfun (quote input-funbox) "no documentation" "CHAN" 1))) (om-make-point 369 423) (om-make-point 68 70) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 4000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote 0)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (cursor-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode)) (list (quote :normal) nil (quote t) 0 0 (om-make-point 0 0) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 23) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 24 2 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 422 136) (quote "The geometric-ser module returns a geometric series of numbers in which the first element is <seed> and the multiplicative coefficient is <factor>. The <limit> parameter is the limit of this list meaning that the last element of the serie will be equal or smaller than <limit>. $$The optional parameter <nummax> limits the maximum number of elements. (the length of the series will be equal to <numax> plus 1).$$It is also possible to specify two parameters <begin> and <end> which will delimit the calculation of the series from the nth element of the series <begin> to the nth element of the series <end>. (Note: the first element of the list is always 0 ).$") "" (om-make-point 139 179) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 27) (quote "geometric-ser") "" (om-make-point 277 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 2 nil 0) (7 0 6 3 nil 0) (2 0 6 4 nil 0) (1 0 6 5 nil 0) (12 0 9 0 nil 0) (11 0 9 1 nil 0) (10 0 9 2 nil 0) (8 0 9 3 nil 0) (16 0 19 0 nil 0) (17 0 19 1 nil 0) (18 0 19 2 nil 0) (26 0 22 0 nil 0) (22 0 23 1 nil 0) (28 1 25 0 nil 0) (25 0 26 0 nil 0) (27 0 26 1 nil 0) (20 0 27 0 nil 0) (21 0 27 1 nil 0) (24 0 27 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 142 57)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
