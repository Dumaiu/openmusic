;fileheader
; (5.11 :patc (om-make-point 124 34) (om-make-point 2 44) (om-make-point 649 899) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "geometric-ser" '((om-load-boxcomment "comment" (om-make-point 159 132) '"INPUTS:$seed     number$factor    number$limit        number$OPTIONAL INPUTS:$nummax  number$begin        number$end            number$OUTPUT:$returns a geometric series$" "" (om-make-point 281 31) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 250 688) (om-make-point 19 22) 11 "11" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 217 688) (om-make-point 14 22) 8 "8" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 74 688) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 102 688) (om-make-point 27 22) 2 "2" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 133 688) (om-make-point 38 23) 12000 "12000" nil) (om-load-boxcall 'genfun "GEOMETRIC-SER" 'geometric-ser '((om-load-inputfun 'input-funbox "seed" "SEED" 1) (om-load-inputfun 'input-funbox "factor" "FACTOR" 1) (om-load-inputfun 'input-funbox "limit" "LIMIT" 10) (om-load-inputfun 'input-funbox "nummax" "NUMMAX" 10) (om-load-inputfun 'input-funbox "begin" "BEGIN" 0) (om-load-inputfun 'input-funbox "end" "END" 10)) (om-make-point 42 718) (om-make-point 249 55) nil nil nil 1) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 178 688) (om-make-point 19 22) 10 "10" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 218 485) (om-make-point 19 22) 10 "10" nil) (om-load-boxcall 'genfun "GEOMETRIC-SER" 'geometric-ser '((om-load-inputfun 'input-funbox "seed" "SEED" 1) (om-load-inputfun 'input-funbox "factor" "FACTOR" 1) (om-load-inputfun 'input-funbox "limit" "LIMIT" 10) (om-load-inputfun 'input-funbox "nummax" "NUMMAX" 10)) (om-make-point 26 515) (om-make-point 249 55) nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 157 485) (om-make-point 42 24) 12000 "12000" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 114 485) (om-make-point 27 22) 2 "2" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 72 485) (om-make-point 12 22) 1 "1" nil) (om-load-boxcomment "comment" (om-make-point 289 79) '"and if one sets <begin> to 8 and  <end>  to 11$one obtains$? OM->(256 512 1024 2048)$The priority in determining the limit of the list is given first by <limit> followed by <begin> & <end> and then with <numax>$" "" (om-make-point 29 811) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 288 47) '"Setting <numax> to 10 we limit the serie to eleven elements$? OM->(1 2 4 8 16 32 64 128 256 512 1024)$" "" (om-make-point 23 596) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 288 47) '"will return$? OM->(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192)$$" "" (om-make-point 34 412) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 97 324) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 151 324) (om-make-point 27 22) 2 "2" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 206 324) (om-make-point 42 24) 12000 "12000" nil) (om-load-boxcall 'genfun "GEOMETRIC-SER" 'geometric-ser '((om-load-inputfun 'input-funbox "seed" "SEED" 1) (om-load-inputfun 'input-funbox "factor" "FACTOR" 1) (om-load-inputfun 'input-funbox "limit" "LIMIT" 10)) (om-make-point 39 354) (om-make-point 249 55) nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 431 330) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 485 330) (om-make-point 27 22) 1.5 "1.5" nil) (om-load-boxcall 'genfun "F->MC" 'f->mc '((om-load-inputfun 'input-funbox "freq" "FREQ" 440)) (om-make-point 466 603) nil nil nil nil 1) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 452 657) (om-make-point 99 219) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 4000 4702 5404 6106 6808 7510 8212 8914 9616) :lvel (list 100 100 100 100 100 100 100 100 100) :loffset (list 0 0 0 0 0 0 0 0 0) :ldur (list 1000 1000 1000 1000 1000 1000 1000 1000 1000) :lchan (list 1 1 1 1 1 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0 0 0 0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.1 nil)))) (set-tonalite newobj nil) newobj)) nil nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 8 24 'ggff (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 551 330) (om-make-point 19 22) 30 "30" nil) (om-load-boxcall 'genfun "MC->F" 'mc->f '((om-load-inputfun 'input-funbox "midic" "MIDICS?" 6000)) (om-make-point 422 509) nil nil nil nil 1) (om-load-boxcall 'genfun "OM*" 'om* '((om-load-inputfun 'input-funbox "first input" "SELF" 0) (om-load-inputfun 'input-funbox "second input" "NUM" 0)) (om-make-point 451 556) (om-make-point 66 35) nil nil nil 1) (om-load-boxcall 'genfun "GEOMETRIC-SER" 'geometric-ser '((om-load-inputfun 'input-funbox "seed" "SEED" 1) (om-load-inputfun 'input-funbox "factor" "FACTOR" 1) (om-load-inputfun 'input-funbox "limit" "LIMIT" 10)) (om-make-point 373 360) (om-make-point 249 55) nil nil nil 1) (om-load-editor-box1 "NOTE" 'note '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "MIDIC" 6000) (om-load-inputfun 'input-funbox "no documentation" "VEL" 80) (om-load-inputfun 'input-funbox "no documentation" "DUR" 1000) (om-load-inputfun 'input-funbox "no documentation" "CHAN" 1)) (om-make-point 369 423) (om-make-point 68 70) (if (find-class 'note nil) (let ((newobj (make-instance 'note :midic 4000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj '0) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.1 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'f (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -23) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 422 136) '"The geometric-ser module returns a geometric series of numbers in which the first element is <seed> and the multiplicative coefficient is <factor>. The <limit> parameter is the limit of this list meaning that the last element of the serie will be equal or smaller than <limit>. $$The optional parameter <nummax> limits the maximum number of elements. (the length of the series will be equal to <numax> plus 1).$$It is also possible to specify two parameters <begin> and <end> which will delimit the calculation of the series from the nth element of the series <begin> to the nth element of the series <end>. (Note: the first element of the list is always 0 ).$" "" (om-make-point 139 169) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 104 26) '"geometric-ser" "" (om-make-point 277 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 6 0 nil 0) (4 0 6 1 nil 0) (5 0 6 2 nil 0) (7 0 6 3 nil 0) (2 0 6 4 nil 0) (1 0 6 5 nil 0) (12 0 9 0 nil 0) (11 0 9 1 nil 0) (10 0 9 2 nil 0) (8 0 9 3 nil 0) (16 0 19 0 nil 0) (17 0 19 1 nil 0) (18 0 19 2 nil 0) (26 0 22 0 nil 0) (22 0 23 1 nil 0) (28 1 25 0 nil 0) (25 0 26 0 nil 0) (27 0 26 1 nil 0) (20 0 27 0 nil 0) (21 0 27 1 nil 0) (24 0 27 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































