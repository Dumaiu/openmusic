; OM File Header - Saved 2021/07/13 15:06:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 525 471) "" 183 0 nil "2021/07/13 15:06:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "interlock" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 146 344) (om-make-point 184 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 156 20) "(a 1 2 b 3 c 4 5 6 d 7 8 9)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 91 83) (quote "INPUTS:$lis1       list$lis2       list$plc1     list$OUTPUT:$returns list$$Interleaving of <lis1> in <lis2> before the elements of <lis1> placed at location <plc1>.$") "" (om-make-point 187 38) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list2" (quote list) (quote nil) (om-make-point 282 206) (om-make-point 61 30) (list 0 2 3 6) "(0 2 3 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 211 206) (om-make-point 61 30) (list (quote a) (quote b) (quote c) (quote d)) "(a b c d)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 99 206) (om-make-point 106 30) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERLOCK" (quote interlock) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) "a list" "LIS2" (list (quote a) (quote b))) (om-load-inputfun (quote input-funbox) " a list of indexes" "PLC1" (list 1 3)))) (om-make-point 115 257) (om-make-point 250 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 389 47) (quote "Interleaving of <lis1> in <lis2> before the elements of <lis1> placed at location <plc1>.") "" (om-make-point 48 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 12.0D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 156 30) (quote "interlock") "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 59 40)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
