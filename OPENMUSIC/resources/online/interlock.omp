;fileheader
; (5.11 :patc (om-make-point 262 221) (om-make-point 7 44) (om-make-point 503 468) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "interlock" '((om-load-boxcomment "comment" (om-make-point 91 83) '"INPUTS:$lis1       list$lis2       list$plc1     list$OUTPUT:$returns list$$Interleaving of <lis1> in <lis2> before the elements of <lis1> placed at location <plc1>.$" "" (om-make-point 187 38) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "list2" 'list 'nil (om-make-point 272 236) (om-make-point 50 24) (list 0 2 3 6) "(0 2 3 6)" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 211 236) (om-make-point 49 24) (list 'a 'b 'c 'd) "(a b c d)" nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 109 236) (om-make-point 92 25) (list 1 2 3 4 5 6 7 8 9) "(1 2 3 4 5 6 7 8 9)" nil) (om-load-boxcall 'genfun "INTERLOCK" 'interlock '((om-load-inputfun 'input-funbox "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun 'input-funbox "a list" "LIS2" (list 'a 'b)) (om-load-inputfun 'input-funbox " a list of indexes" "PLC1" (list 1 3))) (om-make-point 109 267) (om-make-point 250 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 183 46) '"will return$? OM->(a 1 2 b 3 c 4 5 6 d 7 8 9)$" "" (om-make-point 143 336) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 389 47) '"Interleaving of <lis1> in <lis2> before the elements of <lis1> placed at location <plc1>." "" (om-make-point 48 154) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 156 30) '"interlock" "" (om-make-point 184 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 0 nil 0) (2 0 4 1 nil 0) (1 0 4 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































