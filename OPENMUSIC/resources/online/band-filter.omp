; OM File Header - Saved 2021/07/13 18:34:01
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 547 658) "" 183 0 nil "2021/07/13 18:33:55")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "band-filter" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 157 413) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(1 2 3 8 9 10)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 158 611) (om-make-point 130 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 102 20) "(4 5 6 7)" :font (om-make-font "Liberation Sans" 11.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 130 119) (quote "INPUTS:$l i s t          list$bounds    list$mode       menu$MENU:$Reject$Pass$OUTPUT:$returns a list$") "" (om-make-point 209 30) nil (om-make-color 0 0 0) (om-make-font "Arial" 10.665364583333333D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BAND-FILTER" (quote band-filter) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "bounds" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 129 526) (om-make-point 192 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 53 486) (om-make-point 124 30) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 184 486) (om-make-point 86 30) (list (list 0 3) (list 8 10)) "((0 3) (8 10)) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 284 485) (om-make-point 47 30) (quote reject) "reject" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 273 304) (om-make-point 44 30) (quote pass) "pass" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 183 305) (om-make-point 86 30) (list (list 0 3) (list 8 10)) "((0 3) (8 10)) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 52 305) (om-make-point 124 30) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BAND-FILTER" (quote band-filter) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "bounds" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 128 345) (om-make-point 192 55) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 365 138) (quote "Passes or rejects all elements from <l i s t> that fall inside a band of specified values of <bounds>. The  range of values <bounds> is given either as a list of two numbers (min-value max-value), or as a list of lists of two numbers.  Each pair of numbers defines an interval. $$If the mode 'Pass' is selected only the element in <list> falling inside one of these intervals is returned. $$If 'Reject'  is selected, elements in <list> not falling inside one of those intervals are returned. $") "" (om-make-point 71 153) nil (om-make-color 0 0 0) (om-make-font "Arial" 10.665364583333333D0 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 99 29) (quote "band-filter") "" (om-make-point 208 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 3 2 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (7 0 10 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 80 34)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
