;fileheader
; (5.11 :patc (om-make-point 199 303) (om-make-point 2 44) (om-make-point 505 808) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "band-filter" '((om-load-boxcomment "comment" (om-make-point 130 119) '"INPUTS:$l i s t          list$bounds    list$mode       menu$MENU:$Reject$Pass$OUTPUT:$returns a list$" "" (om-make-point 209 30) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "BAND-FILTER" 'band-filter '((om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun 'input-funbox "bounds" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'pass (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 129 526) (om-make-point 192 55) nil nil nil 1) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 72 486) (om-make-point 113 24) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 189 486) (om-make-point 76 24) (list (list 0 3) (list 8 10)) "((0 3) (8 10)) " nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 269 485) (om-make-point 45 26) 'reject "reject" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 268 304) (om-make-point 45 26) 'pass "pass" nil) (om-load-boxcall 'bastype "list1" 'list 'nil (om-make-point 188 305) (om-make-point 76 24) (list (list 0 3) (list 8 10)) "((0 3) (8 10)) " nil) (om-load-boxcall 'bastype "list" 'list 'nil (om-make-point 71 305) (om-make-point 113 24) (list 1 2 3 4 5 6 7 8 9 10) "(1 2 3 4 5 6 7 8 9 10) " nil) (om-load-boxcall 'genfun "BAND-FILTER" 'band-filter '((om-load-inputfun 'input-funbox "list" "LIST" (list 1 2 3 4 5)) (om-load-inputfun 'input-funbox "bounds" "BOUNDS" (list (list 0 2) (list 5 10))) (om-load-inputfunmenu1 'input-funmenu "mode" "MODE" 'pass (list (list "Reject" ''reject) (list "Pass" ''pass)))) (om-make-point 128 345) (om-make-point 192 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(4 5 6 7)" "" (om-make-point 171 600) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 100 41) '"will return$? OM->(1 2 3 8 9 10)" "" (om-make-point 178 424) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 365 138) '"Passes or rejects all elements from <l i s t> that fall inside a band of specified values of <bounds>. The  range of values <bounds> is given either as a list of two numbers (min-value max-value), or as a list of lists of two numbers.  Each pair of numbers defines an interval. $$If the mode 'Pass' is selected only the element in <list> falling inside one of these intervals is returned. $$If 'Reject'  is selected, elements in <list> not falling inside one of those intervals are returned. $" "" (om-make-point 71 153) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 99 29) '"band-filter" "" (om-make-point 208 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 1 2 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (5 0 8 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































