;fileheader
; (5.11 :patc (om-make-point 229 32) (om-make-point 0 44) (om-make-point 485 524) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "fibo-ser" '((om-load-boxcomment "comment" (om-make-point 128 126) '"INPUTS:$seed1   number$seed2   number$limit         number$OPTIONAL INPUTS:$begin    number$end        number$OUTPUT:$returns a Fibonacci series$" "" (om-make-point 192 37) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 247 50) '"returns $? OM->(0 1 1 2 3 5 8 13 21 34 55 89 144 233)$" "" (om-make-point 86 391) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 253 271) (om-make-point 26 22) 250 "250" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 226 271) (om-make-point 12 22) 1 "1" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 192 271) (om-make-point 12 22) 0 "0" nil) (om-load-boxcall 'genfun "FIBO-SER" 'fibo-ser '((om-load-inputfun 'input-funbox "seed" "SEED1" 0) (om-load-inputfun 'input-funbox "seed2" "SEED2" 1) (om-load-inputfun 'input-funbox "limit" "LIMIT" 10)) (om-make-point 162 301) (om-make-point 134 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 363 92) '"Returns a list of numbers in the Fibonacci series where the first element is <seed1> and the additive factor for the two first steps is <seed2>. $The <limit> parameter is the limit of this list.$ It is also possible to specify two parameters <begin> and <end> which delimit the calculation of the series.$" "" (om-make-point 68 171) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 104 26) '"fibo-ser" "" (om-make-point 190 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































