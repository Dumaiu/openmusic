;fileheader
; (5.11 :patc (om-make-point 174 173) (om-make-point 5 44) (om-make-point 500 400) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "factorize" '((om-load-boxcomment "comment" (om-make-point 220 63) '"INPUT:$number   number$OUTPUT:$returns the prime decomposition of  <number>$" "" (om-make-point 157 63) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 125 50) '"will return$? OM->((2 2) (5 2))$" "" (om-make-point 169 327) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 213 235) (om-make-point 26 22) 100 "100" nil) (om-load-boxcall 'genfun "FACTORIZE" 'factorize '((om-load-inputfun 'input-funbox "an integer" "NUMBER" 100)) (om-make-point 200 262) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 412 59) '"Returns the prime decomposition of  <number> in the form (... (prime exponent) ...). $Primes known to the system are the 1230 primes ranging from 1 to 9973.$" "" (om-make-point 45 160) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 97 27) '"factorize" "" (om-make-point 194 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 3 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.1))




























































































































































































































































