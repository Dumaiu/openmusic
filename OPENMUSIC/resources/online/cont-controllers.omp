;fileheader
; (5.11 :patc (om-make-point 60 863) (om-make-point 0 44) (om-make-point 718 817) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "cont-controllers" '((om-load-editor-box1 "SETTINGS-CTRL" 'settings-ctrl '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "MIDIPORT" 0) (om-load-inputfun 'input-funbox "no documentation" "NBTRACKS" 1)) (om-make-point 347 342) (om-make-point 182 128) (let ((rep (make-instance 'settings-ctrl :midiport 0 :nbtracks 1))) (setf (channels-ctrl rep) (list (if (find-class 'channel-ctrl nil) (make-instance 'channel-ctrl :midiport 0 :midichannel 1 :program 2 :pan-ctrl 64 :control1-num 91 :control2-num 2 :control1-val 113 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)))) rep) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil) (om-load-boxcomment "comment" (om-make-point 214 85) '"The Settings-ctrl editor can be used to set initial MIDI settings , or to send commands while MIDI is playing (with \"space\" key on the controller editor)" "" (om-make-point 428 252) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode 'nil)) (om-load-boxcall 'lispfun "LIST" 'list '((om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil) (om-load-inputfun 'input-funbox "add-input" "add-input" nil)) (om-make-point 375 615) (om-make-point 30 37) nil nil "list" 1) (om-load-boxcall 'bastype "aux6" 't 'nil (om-make-point 163 367) (om-make-point 17 20) 50 "50" nil) (om-load-editor-box1 "MIDICONTROL1" 'midicontrol '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "control type or ControlChange number" "ctrltype" "PitchWheel" (list (list "-- Tempo (bpm)" "Tempo") (list "-- KeyPress" "KeyPress") (list "-- ChanPress" "ChanPress") (list "-- PitchBend (-64 to 63)" "PitchBend") (list "-- PitchBend Fine (-8192 to 8191)" "PitchWheel") (list "00 Bank Select" "BankSelect") (list "01 Modulation Wheel" "ModulationWheel") (list "02 Breath Controller" "BreathController") (list "04 Foot Controller" "FootController") (list "05 Portamento Time" "PortamentoTime") (list "06 Data Entry MSB" "DataEntryMSB") (list "07 Channel Volume" "ChannelVolume") (list "08 Balance" "Balance") (list "10 Pan" "Pan") (list "11 Expression Controller" "ExpressionController") (list "12 Effect Control 1" "EffectControl1") (list "13 Effect Control 2" "EffectControl2") (list "16 General Purpose Controller 1" "GeneralPurposeController1") (list "17 General Purpose Controller 2" "GeneralPurposeController2") (list "18 General Purpose Controller 3" "GeneralPurposeController3") (list "19 General Purpose Controller 4" "GeneralPurposeController4") (list "00/32 Bank Select Fine" "BankSelectFine") (list "01/33 Modulation Wheel Fine" "ModulationWheelFine") (list "02/34 Breath Controller Fine" "BreathControllerFine") (list "04/36 Foot Controller Fine" "FootControllerFine") (list "05/37 Portamento Time Fine" "PortamentoTimeFine") (list "06/38 Data Entry MSB-LSB Fine" "DataEntryMSBLSB") (list "07/39 Channel Volume Fine" "ChannelVolumeFine") (list "08/40 Balance Fine" "BalanceFine") (list "10/42 Pan Fine" "PanFine") (list "11/43 Expression Controller Fine" "ExpressionControllerFine") (list "12/44 Effect Control 1 Fine" "EffectControl1Fine") (list "13/45 Effect Control 2 Fine" "EffectControl2Fine") (list "16/48 General Purpose Controller 1 Fine" "GeneralPurposeController1Fine") (list "17/49 General Purpose Controller 2 Fine" "GeneralPurposeController2Fine") (list "18/50 General Purpose Controller 3 Fine" "GeneralPurposeController3Fine") (list "19/51 General Purpose Controller 4 Fine" "GeneralPurposeController4Fine") (list "64 Damper Pedal on/off (Sustain)" "DamperPedal") (list "65 Portamento On/Off" "Portamento") (list "66 Sustenuto On/Off" "Sustenuto") (list "67 Soft Pedal On/Off" "SoftPedal") (list "68 Legato Footswitch" "LegatoFootswitch") (list "69 Hold 2 (on/off)" "Hold2") (list "70 Sound Controller 1" "SoundController1") (list "71 Sound Controller 2" "SoundController2") (list "72 Sound Controller 3" "SoundController3") (list "73 Sound Controller 4" "SoundController4") (list "74 Sound Controller 5" "SoundController5") (list "75 Sound Controller 6" "SoundController6") (list "76 Sound Controller 7" "SoundController7") (list "77 Sound Controller 8" "SoundController8") (list "78 Sound Controller 9" "SoundController9") (list "79 Sound Controller 10" "SoundController10") (list "84 Portamento Control" "PortamentoControl") (list "91 Effects 1 Depth" "Effects1Depth") (list "92 Effects 2 Depth" "Effects2Depth") (list "93 Effects 3 Depth" "Effects3Depth") (list "94 Effects 4 Depth" "Effects4Depth") (list "95 Effects 5 Depth" "Effects5Depth") (list "96 Data Increment" "DataIncrement") (list "-- Private" "Private"))) (om-load-inputfun 'input-funbox "dates" "Ldates" nil) (om-load-inputfun 'input-funbox "track" "ref" nil) (om-load-inputfun 'input-funbox "port" "port" 0) (om-load-inputfun 'input-funbox "channel" "chan" 1) (om-load-inputfun 'input-funbox "values" "Lvalues" nil)) (om-make-point 103 230) (om-make-point 187 112) (let ((newobj (when (find-class 'midicontrol nil) (let ((newctrl (simple-bpf-from-list '(158 777 1043 1398 1735 2258 2498 2881 3295 3455 4220 4558 4932 5493 5960 6279 6484 6930 7441 7919 8652 9225 9896) '(640 4368 5451 7210 7576 7173 6762 6165 5434 3146 3312 4059 5305 4829 3180 1568 1421 1156 1056 957 791 724 625) 'midicontrol 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) '"PitchWheel" (ref newctrl) nil (port newctrl) 0 (chan newctrl) '1 (ev-num newctrl) 7 (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) t nil nil) (om-load-boxcall 'genfun "RESAMPLE" 'resample '((om-load-inputfun 'input-funbox "MidiControl" "SELF" nil) (om-load-inputfun 'input-funbox "new sample rate (ms)" "SAMPLE-RATE" 50)) (om-make-point 131 387) nil nil nil nil 1) (om-load-editor-box1 "MIDICONTROL" 'midicontrol '((om-load-inputfun 'input-funbox "object" "self" nil) (om-load-inputfunmenu1 'input-funmenu "control type or ControlChange number" "ctrltype" "PitchBend" (list (list "-- Tempo" "Tempo") (list "-- KeyPress" "KeyPress") (list "-- ChanPress" "ChanPress") (list "-- PitchBend" "PitchBend") (list "00 Bank Select" "BankSelect") (list "01 Modulation Wheel" "ModulationWheel") (list "02 Breath Controller" "BreathController") (list "04 Foot Controller" "FootController") (list "05 Portamento Time" "PortamentoTime") (list "06 Data Entry MSB" "DataEntryMSB") (list "07 Channel Volume" "ChannelVolume") (list "08 Balance" "Balance") (list "10 Pan" "Pan") (list "11 Expression Controller" "ExpressionController") (list "12 Effect Control 1" "EffectControl1") (list "13 Effect Control 2" "EffectControl2") (list "16 General Purpose Controller 1" "GeneralPurposeController1") (list "17 General Purpose Controller 2" "GeneralPurposeController2") (list "18 General Purpose Controller 3" "GeneralPurposeController3") (list "19 General Purpose Controller 4" "GeneralPurposeController4") (list "64 Damper Pedal on/off (Sustain)" "DamperPedal") (list "65 Portamento On/Off" "Portamento") (list "66 Sustenuto On/Off" "Sustenuto") (list "67 Soft Pedal On/Off" "SoftPedal") (list "68 Legato Footswitch" "LegatoFootswitch") (list "69 Hold 2" "Hold2") (list "70 Sound Controller 1" "SoundController1") (list "71 Sound Controller 2" "SoundController2") (list "72 Sound Controller 3" "SoundController3") (list "73 Sound Controller 4" "SoundController4") (list "74 Sound Controller 5" "SoundController5") (list "75 Sound Controller 6" "SoundController6") (list "76 Sound Controller 7" "SoundController7") (list "77 Sound Controller 8" "SoundController8") (list "78 Sound Controller 9" "SoundController9") (list "79 Sound Controller 10" "SoundController10") (list "84 Portamento Control" "PortamentoControl") (list "91 Effects 1 Depth" "Effects1Depth") (list "92 Effects 2 Depth" "Effects2Depth") (list "93 Effects 3 Depth" "Effects3Depth") (list "94 Effects 4 Depth" "Effects4Depth") (list "95 Effects 5 Depth" "Effects5Depth") (list "96 Data Increment" "DataIncrement") (list "-- Private" "Private"))) (om-load-inputfun 'input-funbox "dates" "Ldates" nil) (om-load-inputfun 'input-funbox "track" "ref" nil) (om-load-inputfun 'input-funbox "port" "port" 1) (om-load-inputfun 'input-funbox "channel" "chan" nil) (om-load-inputfun 'input-funbox "values" "Lvalues" nil)) (om-make-point 118 467) (om-make-point 179 117) (let ((newobj (when (find-class 'midicontrol nil) (let ((newctrl (simple-bpf-from-list '(158 208 258 308 358 408 458 508 558 608 658 708 758 808 858 908 958 1008 1058 1108 1158 1208 1258 1308 1358 1408 1458 1508 1558 1608 1658 1708 1758 1808 1858 1908 1958 2008 2058 2108 2158 2208 2258 2308 2358 2408 2458 2508 2558 2608 2658 2708 2758 2808 2858 2908 2958 3008 3058 3108 3158 3208 3258 3308 3358 3408 3458 3508 3558 3608 3658 3708 3758 3808 3858 3908 3958 4008 4058 4108 4158 4208 4258 4308 4358 4408 4458 4508 4558 4608 4658 4708 4758 4808 4858 4908 4958 5008 5058 5108 5158 5208 5258 5308 5358 5408 5458 5508 5558 5608 5658 5708 5758 5808 5858 5908 5958 6008 6058 6108 6158 6208 6258 6308 6358 6408 6458 6508 6558 6608 6658 6708 6758 6808 6858 6908 6958 7008 7058 7108 7158 7208 7258 7308 7358 7408 7458 7508 7558 7608 7658 7708 7758 7808 7858 7908 7958 8008 8058 8108 8158 8208 8258 8308 8358 8408 8458 8508 8558 8608 8658 8708 8758 8808 8858 8908 8958 9008 9058 9108 9158 9208 9258 9308 9358 9408 9458 9508 9558 9608 9658 9708 9758 9808 9858) '(640 942 1245 1547 1849 2152 2454 2756 3058 3361 3663 3965 4268 4505 4709 4913 5118 5322 5543 5792 6040 6289 6538 6786 7035 7226 7281 7335 7390 7444 7499 7553 7553 7515 7476 7437 7399 7360 7321 7283 7244 7205 7159 7073 6987 6901 6815 6732 6654 6576 6497 6419 6341 6263 6184 6098 6010 5921 5832 5744 5655 5567 5478 5072 4354 3636 3149 3160 3171 3182 3193 3204 3215 3226 3237 3247 3258 3269 3280 3291 3302 3321 3431 3542 3653 3764 3875 3986 4116 4284 4451 4618 4785 4953 5120 5287 5267 5224 5182 5139 5097 5054 5011 4969 4926 4884 4841 4702 4525 4348 4170 3993 3816 3639 3461 3284 3075 2822 2568 2314 2061 1807 1566 1530 1494 1458 1422 1392 1362 1332 1302 1273 1243 1213 1183 1155 1145 1135 1126 1116 1106 1096 1086 1077 1067 1057 1047 1036 1026 1015 1005 995 984 974 963 953 941 930 919 907 896 884 873 862 850 839 828 816 805 793 786 781 775 769 763 757 751 745 739 734 728 721 714 706 699 692 684 677 669 662 655 647 640 632 625) 'midicontrol 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) '"PitchWheel" (ref newctrl) nil (port newctrl) 0 (chan newctrl) '1 (ev-num newctrl) 7 (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) t nil nil) (om-load-boxcomment "comment" (om-make-point 563 41) '"Note :$In a maquette, Midi sequences, like other musical objects, can be streched to fit a visual time range." "" (om-make-point 70 832) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 604 46) '"Warning : $Take care using the Tempo controller. If you put it in a maquette, it will change the Midi player tempo and cause an offset between midi playing and visual position of the cursor..." "" (om-make-point 70 875) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode 'nil)) (om-load-boxcall 'bastype "aux5" 't 'nil (om-make-point 624 467) (om-make-point 23 20) (list 1) "(1)" nil) (om-load-boxcall 'maqabs "mymaquette" (om-load-maq-abs1 "mymaquette" '((om-load-tempobj1 "tempobj3" 'nil (list 'yourobj (let ((copy (make-instance 'ominstance :name "tempobj3" :icon 138))) (setf (instance copy) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2)))) copy)) 0 1000 11000 (om-make-color 26/85 26/51 194/255) nil t 33 99 1 0 (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil nil nil) (om-load-tempobj1 "tempobj2" 'nil (list 'yourobj (let ((copy (make-instance 'ominstance :name "tempobj2" :icon 918))) (setf (instance copy) (let ((rep (make-instance 'settings-ctrl :midiport 0 :nbtracks 1))) (setf (channels-ctrl rep) (list (if (find-class 'channel-ctrl nil) (make-instance 'channel-ctrl :midiport 0 :midichannel 1 :program 2 :pan-ctrl 64 :control1-num 91 :control2-num 2 :control1-val 113 :control2-val 0 :vol-ctrl 100 :pitch-ctrl 64 :from-file t)))) rep)) (setf (edition-params copy) (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2)))) copy)) 0 0 0 (om-make-color 26/85 26/51 194/255) nil t 33 66 1 0 (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil nil nil) (om-load-tempobj1 "tempobj1" 'nil (list 'yourobj (let ((copy (make-instance 'ominstance :name "tempobj1" :icon 903))) (setf (instance copy) (let ((newobj (when (find-class 'midicontrol nil) (let ((newctrl (simple-bpf-from-list '(158 208 258 308 358 408 458 508 558 608 658 708 758 808 858 908 958 1008 1058 1108 1158 1208 1258 1308 1358 1408 1458 1508 1558 1608 1658 1708 1758 1808 1858 1908 1958 2008 2058 2108 2158 2208 2258 2308 2358 2408 2458 2508 2558 2608 2658 2708 2758 2808 2858 2908 2958 3008 3058 3108 3158 3208 3258 3308 3358 3408 3458 3508 3558 3608 3658 3708 3758 3808 3858 3908 3958 4008 4058 4108 4158 4208 4258 4308 4358 4408 4458 4508 4558 4608 4658 4708 4758 4808 4858 4908 4958 5008 5058 5108 5158 5208 5258 5308 5358 5408 5458 5508 5558 5608 5658 5708 5758 5808 5858 5908 5958 6008 6058 6108 6158 6208 6258 6308 6358 6408 6458 6508 6558 6608 6658 6708 6758 6808 6858 6908 6958 7008 7058 7108 7158 7208 7258 7308 7358 7408 7458 7508 7558 7608 7658 7708 7758 7808 7858 7908 7958 8008 8058 8108 8158 8208 8258 8308 8358 8408 8458 8508 8558 8608 8658 8708 8758 8808 8858 8908 8958 9008 9058 9108 9158 9208 9258 9308 9358 9408 9458 9508 9558 9608 9658 9708 9758 9808 9858) '(640 942 1245 1547 1849 2152 2454 2756 3058 3361 3663 3965 4268 4505 4709 4913 5118 5322 5543 5792 6040 6289 6538 6786 7035 7226 7281 7335 7390 7444 7499 7553 7553 7515 7476 7437 7399 7360 7321 7283 7244 7205 7159 7073 6987 6901 6815 6732 6654 6576 6497 6419 6341 6263 6184 6098 6010 5921 5832 5744 5655 5567 5478 5072 4354 3636 3149 3160 3171 3182 3193 3204 3215 3226 3237 3247 3258 3269 3280 3291 3302 3321 3431 3542 3653 3764 3875 3986 4116 4284 4451 4618 4785 4953 5120 5287 5267 5224 5182 5139 5097 5054 5011 4969 4926 4884 4841 4702 4525 4348 4170 3993 3816 3639 3461 3284 3075 2822 2568 2314 2061 1807 1566 1530 1494 1458 1422 1392 1362 1332 1302 1273 1243 1213 1183 1155 1145 1135 1126 1116 1106 1096 1086 1077 1067 1057 1047 1036 1026 1015 1005 995 984 974 963 953 941 930 919 907 896 884 873 862 850 839 828 816 805 793 786 781 775 769 763 757 751 745 739 734 728 721 714 706 699 692 684 677 669 662 655 647 640 632 625) 'midicontrol 0))) (setf (bpfcolor newctrl) (om-make-color 0 0 0)) (setf (ctrltype newctrl) '"PitchWheel" (ref newctrl) nil (port newctrl) 0 (chan newctrl) '1 (ev-num newctrl) 7 (ctr-num newctrl) 14) newctrl)))) (load-port-info newobj 'nil) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (setf (edition-params copy) (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2)))) copy)) 0 1000 9858 (om-make-color 26/85 26/51 194/255) nil t 33 33 1 0 (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 0 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'g 24 2))) nil nil nil nil nil)) 'nil '(0 20009 0 120) 'nil (om-make-color 23/85 116/255 173/255) '((8 60) ((4 4)) 16 t) t 5.11 nil) '((om-load-inputfun 'input-funbox "time rate number of offsets list" "time" (list 1000 0 1000)) (om-load-inputfun 'input-funbox "objects to put in maquette" "Objs" nil)) (om-make-point 346 671) nil nil "x" nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 550 491) (om-make-point 105 88) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000) (6000)) :lonset '(0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000) :ldur '((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000)) :lvel '((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100)) :loffset '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) :lchan '((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)) :legato 0)))) (load-port-info newobj '((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems) (list 2 24 'g (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 't))) nil nil nil) (om-load-boxcomment "comment" (om-make-point 223 27) '"Ex : PitchBend Controller :" "" (om-make-point 68 197) nil (om-make-color 23/51 16/255 16/255) (om-make-font "Geneva" 10 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 214 85) '"A MidiControl object can be extracted from a MidiFile or EventMidi-seq objects (see tutorial midifile analysis), or constructed like a BPF:" "" (om-make-point 82 112) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment" (om-make-point 249 38) '"MIDI Continuous controller" "" (om-make-point 254 10) nil (om-make-color 0 0 0) (om-make-font "Geneva" 14 :family nil :style 'nil :mode 'nil))) '((6 0 2 0 nil 0) (0 0 2 1 nil 0) (11 0 2 2 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (5 0 6 0 nil 0) (2 0 10 1 nil 0) (9 0 11 6 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))









