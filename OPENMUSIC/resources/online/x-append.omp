;fileheader
; (5.11 :patc (om-make-point 258 66) (om-make-point 3 44) (om-make-point 505 765) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "x-append" '((om-load-boxcomment "comment" (om-make-point 122 107) '"INPUTS:$l1?   any data type$l2?   any data type$OPTIONAL INPUTS:$lst?   any data type$OUTPUT:$returns a set of lists merged$" "" (om-make-point 185 31) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 265 334) (om-make-point 68 129) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 7400 3900 5900 8000) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'gf (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "CHORD-SEQ" 'chord-seq '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1)) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 0)) (om-make-point 89 574) (om-make-point 202 108) (let ((newobj (when (find-class 'chord-seq nil) (make-instance 'chord-seq :lmidic '((6000 4200 5900 7300) (6400 5300 5900 6700) (7400 3900 5900 8000)) :lonset '(0 1000 2000 3000) :ldur '((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000)) :lvel '((100 100 100 100) (100 100 100 100) (100 100 100 100)) :loffset '((0 0 0 0) (0 0 0 0) (0 0 0 0)) :lchan '((1 1 1 1) (1 1 1 1) (1 1 1 1)) :legato 0)))) (load-port-info newobj '((0 0 0 0) (0 0 0 0) (0 0 0 0))) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '(((0) (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)) ((1) (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)) ((2) (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)))) (set-tonalite newobj nil) newobj) nil nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'gf (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 -19) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 187 334) (om-make-point 68 129) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6400 5300 5900 6700) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'gf (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "CHORD" 'chord '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun 'input-funbox "no documentation" "LVEL" (list 100)) (om-load-inputfun 'input-funbox "no documentation" "LOFFSET" (list 0)) (om-load-inputfun 'input-funbox "no documentation" "LDUR" (list 1000)) (om-load-inputfun 'input-funbox "no documentation" "LCHAN" (list 1))) (om-make-point 106 334) (om-make-point 68 129) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000 4200 5900 7300) :lvel (list 100 100 100 100) :loffset (list 0 0 0 0) :ldur (list 1000 1000 1000 1000) :lchan (list 1 1 1 1) :from-file t))) (load-port-info newobj '(0 0 0 0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.11 nil)))) (set-tonalite newobj nil) newobj)) "x" nil (corrige (pairlis '(palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems) (list 0 2 24 'gf (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'genfun "X-APPEND" 'x-append '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil) (om-load-inputfun 'input-funbox "add list" "LST?" nil)) (om-make-point 169 493) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 214 190) (om-make-point 30 24) (list 'a 'b) "(a b)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 171 190) (om-make-point 30 24) (list 1 2) "(1 2)" nil) (om-load-boxcall 'genfun "X-APPEND" 'x-append '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 180 223) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 102 37) '"will return$? OM->(1 2 a b)$" "" (om-make-point 160 285) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 335 45) '"Appends lists or atoms together to form a new list. This box can be extended.$This modules removes one level of parentheses to the lists that it is forming.$" "" (om-make-point 69 141) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 97 28) '"x-append" "" (om-make-point 192 6) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((5 0 2 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (1 0 5 2 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































