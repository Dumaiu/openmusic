;fileheader
; (5.11 :patc (om-make-point 246 377) (om-make-point 7 44) (om-make-point 608 608) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "getsdifdata" '((om-load-boxcall 'bastype "aux9" 't 'nil (om-make-point 372 272) (om-make-point 23 20) 50 "50" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 344 272) (om-make-point 23 20) 3 "3" nil) (om-load-boxcall 'bastype "aux14" 't 'nil (om-make-point 316 272) (om-make-point 23 20) 2 "2" nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 236 273) (om-make-point 15 20) 0 "0" nil) (om-load-boxcall 'bastype "aux51" 't 'nil (om-make-point 264 272) (om-make-point 41 24) "1TRC" "\"1TRC\"" nil) (om-load-boxcall 'genfun "GETSDIFDATA1" 'getsdifdata '((om-load-inputfun 'input-funbox "sdif file" "SELF" nil) (om-load-inputfun 'input-funbox "stream number" "SID" nil) (om-load-inputfun 'input-funbox "frame type" "FRAMETYPE" nil) (om-load-inputfun 'input-funbox "matrix type" "MATTYPE" nil) (om-load-inputfun 'input-funbox "field number" "CNUM" nil) (om-load-inputfun 'input-funbox "min row" "RMIN" nil) (om-load-inputfun 'input-funbox "max row" "RMAX" nil) (om-load-inputfun 'input-funbox "min time" "TMIN" nil) (om-load-inputfun 'input-funbox "max time" "TMAX" nil)) (om-make-point 186 313) (om-make-point 278 51) nil nil nil 2) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 400 271) (om-make-point 23 20) 0.1 "0.1" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 428 271) (om-make-point 23 20) 0.2 "0.2" nil) (om-load-editor-box1 "BPF-LIB" 'bpf-lib '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "BPF-LIST" (list (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10) '(0 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)))) (om-make-point 131 490) (om-make-point 217 83) (if (find-class 'bpf-lib nil) (make-instance 'bpf-lib :bpf-list (list (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 1.0E-4 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 0.0 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(2.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(4.0E-4 4.0E-4 2.0E-4 1.0E-4 0.0 1.0E-4 2.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(6.0E-4 6.0E-4 3.0E-4 4.0E-4 4.0E-4 1.0E-4 2.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(8.0E-4 0.0011 4.0E-4 3.0E-4 4.0E-4 1.0E-4 3.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(8.0E-4 0.0015 4.0E-4 4.0E-4 4.0E-4 1.0E-4 3.0E-4 2.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(6.0E-4 0.0015 3.0E-4 9.0E-4 5.0E-4 1.0E-4 3.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(7.0E-4 0.0013 2.0E-4 0.0013 7.0E-4 1.0E-4 3.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.001 0.0015 3.0E-4 0.0016 7.0E-4 1.0E-4 4.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.0012 0.0016 3.0E-4 0.0018 8.0E-4 1.0E-4 5.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.0013 0.0015 3.0E-4 0.0019 7.0E-4 1.0E-4 5.0E-4 1.0E-4 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.0014 0.0015 3.0E-4 0.002 7.0E-4 1.0E-4 5.0E-4 0.0 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.0016 0.0016 3.0E-4 0.0019 7.0E-4 2.0E-4 6.0E-4 0.0 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0) '(0.0018 0.0016 3.0E-4 0.0017 6.0E-4 3.0E-4 6.0E-4 0.0 2.0E-4 0.0 0.0 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0) 'bpf 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj)) :from-file t)) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) t nil nil) (om-load-boxwithed1 'box-with-win "OMLOOP" 'omloop '((om-load-inputfun 'input-funbox "aditional input" "OPLIST" nil)) (om-make-point 242 422) nil nil nil (list (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 237 162) (om-make-point 11 20) 4 "4" nil) (om-load-boxcall 'genfun "collect" 'listing '((om-load-inputfun 'input-funbox "no documentation" "WHAT?" nil)) (om-make-point 185 266) nil nil nil nil 3) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 4)) (om-make-point 168 193) (om-make-point 86 65) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 100) '(0 100) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict) (list 't 2621450 18350450 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0)))) nil nil nil) (om-load-boxcall 'genfun "inlist" 'listloop '((om-load-inputfun 'input-funbox "list to iterate" "LIST" nil)) (om-make-point 147 122) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 40) "no documentation" nil nil nil) (om-load-seqbox "finally" 'finaldo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 204 331) nil nil nil 0) (om-load-seqbox "eachTime" 'loopdo '((om-load-inputfun 'input-funbox "patch" "PATCH" nil)) (om-make-point 129 341) nil nil nil 0)) '((2 0 1 0 nil 0) (3 0 2 2 nil 0) (0 0 2 3 nil 0) (4 0 3 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0)) 1 "separate BPF" nil) (om-load-editor-box1 "SDIFFILE" 'sdiffile '((om-load-inputfun 'input-funbox "objs" "SELF" nil)) (om-make-point 177 125) (om-make-point 78 72) (let ((newobj (om-load-if (make-pathname :directory '(:absolute "X" "Applications" "OM-5.1.1" "online" "in-files") :device :unspecific :name "file01" :type "sdif") 'load-sdif-file))) newobj) "x" nil (corrige (pairlis '(obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 't))) nil nil nil) (om-load-boxcomment "comment7" (om-make-point 240 42) '"Extract SDIF data by type" "" (om-make-point 239 12) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Arial" 18 :family nil :style '(:bold) :mode '(:srcor))) (om-load-boxcomment "comment6" (om-make-point 206 119) '"Select data by choosing $- a stream ID$- a frame type$- a matrix type$- a column number (description field)$- optional elements range$- optional temporal range" "" (om-make-point 1 198) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment5" (om-make-point 166 69) '"Use SDIF-Edit to view the diferent streams, frames and matrices types contained in your SDIF file" "" (om-make-point 265 130) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style '(:italic) :mode '(:srcor))) (om-load-boxcomment "comment4" (om-make-point 229 73) '"Returns:$1) List of data selected in each frames (i.e. list of lists)$2) List of the corresponding time stamps" "" (om-make-point 297 372) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil)) (om-load-boxcomment "comment3" (om-make-point 127 46) '"This loop collects the data in a BPF-Lib" "" (om-make-point 115 437) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family nil :style 'nil :mode 'nil))) '((10 0 5 0 nil 0) (3 0 5 1 nil 0) (4 0 5 2 nil 0) (4 0 5 3 nil 0) (2 0 5 4 nil 0) (1 0 5 5 nil 0) (0 0 5 6 nil 0) (6 0 5 7 nil 0) (7 0 5 8 nil 0) (9 0 8 1 nil 0) (5 0 9 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))









