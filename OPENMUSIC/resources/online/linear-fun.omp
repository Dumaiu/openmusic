; OM File Header - Saved 2021/07/13 16:04:06
; (6.2 :patc (om-make-point 24 24) (om-make-point 0 0) (om-make-point 575 665) "" 183 0 nil "2021/07/13 16:04:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../openmusic/OPENMUSIC/resources/pict/om3\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "linear-fun" (quote ((let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 246 518) (om-make-point 91 92) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7)) (quote (-16329 36789 89906 143024 196142 249259 302377 355495)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "BPF") newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list nil (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 349 290) (om-make-point 30 27) 1.2 "1.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 297 290) (om-make-point 43 26) 0.33 "0.33" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 254 290) (om-make-point 37 27) 10.23 "10.23" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 214 290) (om-make-point 33 27) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 320 396) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLEFUN" (quote samplefun) (quote ((om-load-inputfun (quote input-funbox) "function" "FUN" (quote sqrt)) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 279 428) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FUN" (quote linear-fun) (quote ((om-load-inputfun (quote input-funbox) "x0" "X0" 0) (om-load-inputfun (quote input-funbox) "y0" "Y0" 0) (om-load-inputfun (quote input-funbox) "x1" "X1" 1) (om-load-inputfun (quote input-funbox) "y1" "Y1" 1))) (om-make-point 215 329) (om-make-point 170 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 243 123) (quote "INPUTS$x0   number$y0   number$x1   number$y1   number$OUTPUT$returns a Lisp function object$") "" (om-make-point 187 43) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 368 133) (quote "Calculate the parameters of the equation y = a x + b as a function of the two points ( x0,y0) ( x1,y1). The resulting function can be connected, for example, to samplefun.$$The default values are:$<x0>   0$<y0>   0$<x1>   1$<y1>   1$") "" (om-make-point 89 141) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 33) (quote "linear-fun") "" (om-make-point 220 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 16.0D0 :family "Arial" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 1 0 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 7 0 nil 0) (3 0 7 1 nil 0) (2 0 7 2 nil 0) (1 0 7 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "om3" :source (quote kernel) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "om3" (quote kernel)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 68 46)) (setf (pict-size newpict) (om-make-point 98 82)) newpict)) 6.2))
