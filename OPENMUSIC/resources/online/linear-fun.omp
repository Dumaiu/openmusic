;fileheader
; (5.11 :patc (om-make-point 267 882) (om-make-point 6 44) (om-make-point 546 681) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "linear-fun" '((om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 191 528) (om-make-point 91 92) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 1 2 3 4 5 6 7) '(-16329 36789 89906 143024 196142 249259 302377 355495) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux4" 't 'nil (om-make-point 303 284) (om-make-point 30 27) 1.2 "1.2" nil) (om-load-boxcall 'bastype "aux3" 't 'nil (om-make-point 245 284) (om-make-point 43 26) 0.33 "0.33" nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 203 284) (om-make-point 27 27) 10.23 "10.23" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 160 286) (om-make-point 33 27) 0.5 "0.5" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 265 410) (om-make-point 39 22) 1 "1" nil) (om-load-boxcall 'genfun "SAMPLEFUN" 'samplefun '((om-load-inputfun 'input-funbox "function" "FUN" 'sqrt) (om-load-inputfun 'input-funbox "step" "STEP" 1)) (om-make-point 224 438) nil nil nil nil 2) (om-load-boxcall 'genfun "LINEAR-FUN" 'linear-fun '((om-load-inputfun 'input-funbox "x0" "X0" 0) (om-load-inputfun 'input-funbox "y0" "Y0" 0) (om-load-inputfun 'input-funbox "x1" "X1" 1) (om-load-inputfun 'input-funbox "y1" "Y1" 1)) (om-make-point 171 339) (om-make-point 128 55) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 243 123) '"INPUTS$x0   number$y0   number$x1   number$y1   number$OUTPUT$returns a Lisp function object$" "" (om-make-point 187 43) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 368 133) '"Calculate the parameters of the equation y = a x + b as a function of the two points ( x0,y0) ( x1,y1). The resulting function can be connected, for example, to samplefun.$$The default values are:$<x0>   0$<y0>   0$<x1>   1$<y1>   1$" "" (om-make-point 96 146) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 76 29) '"linear-fun" "" (om-make-point 220 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((6 1 0 0 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 7 0 nil 0) (3 0 7 1 nil 0) (2 0 7 2 nil 0) (1 0 7 3 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))



































