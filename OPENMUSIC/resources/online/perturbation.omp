;fileheader
; (5.11 :patc (om-make-point 337 172) (om-make-point 6 44) (om-make-point 507 646) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "perturbation" '((om-load-boxcomment "comment" (om-make-point 146 91) '"INPUTS:$self             number or list$percent    number or list $OUTPUT:$returns a random deviation $" "" (om-make-point 202 38) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 62 299) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 44 265) (om-make-point 32 26) 10 "10" nil) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 98 264) (om-make-point 47 26) 0.0 "0.0" nil) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 95 388) nil nil nil nil 1) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 121 358) (om-make-point 40 29) 50 "50" nil) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 87 462) (om-make-point 85 102) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490) '(0 1 9 7 6 9 1 7 3 0 8 2 3 7 1 7 3 5 8 4 2 8 10 2 4 2 4 6 1 4 5 9 4 6 5 1 4 1 6 4 9 5 4 7 7 6 4 9 1 1) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-editor-box1 "BPF" 'bpf '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun 'input-funbox "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun 'input-funbox "no documentation" "DECIMALS" 0)) (om-make-point 284 465) (om-make-point 85 102) (let ((newobj (when (find-class 'bpf nil) (let ((newbpf (simple-bpf-from-list '(0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310 320 330 340 350 360 370 380 390 400 410 420 430 440 450 460 470 480 490) '(5 2 1 6 5 5 2 3 1 4 6 6 5 7 1 9 8 2 7 9 9 3 8 10 5 7 7 6 1 5 9 4 6 4 3 8 8 9 7 3 8 7 9 4 5 2 6 9 6 3) 'bpf 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) newbpf)))) newobj) nil nil (corrige (pairlis '(mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems) (list 0 1000 nil (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 't))) t nil nil) (om-load-boxcall 'bastype "aux2" 't 'nil (om-make-point 318 361) (om-make-point 40 29) 50 "50" nil) (om-load-boxcall 'genfun "REPEAT-N" 'repeat-n '((om-load-inputfun 'input-funbox "patch" "SELF" nil) (om-load-inputfun 'input-funbox "times" "NUM" 0)) (om-make-point 292 391) nil nil nil nil 1) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 295 267) (om-make-point 47 26) 1.0 "1.0" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 241 268) (om-make-point 32 26) 10 "10" nil) (om-load-boxcall 'genfun "OM-RANDOM" 'om-random '((om-load-inputfun 'input-funbox "min" "LOW" 0) (om-load-inputfun 'input-funbox "max" "HIGH" 0)) (om-make-point 259 302) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 412 59) '"Applies to <self> a random deviation bounded by the <percent> parameter, a value in [0 1]. Both arguments can be trees. The deviation is applied as follows:$<self>* [a random value from Ð<percent> to<percent>]$" "" (om-make-point 25 169) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 109 28) '"perturbation" "" (om-make-point 202 7) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((2 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (4 0 6 2 nil 0) (9 0 7 2 nil 0) (12 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































