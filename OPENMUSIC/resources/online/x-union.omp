;fileheader
; (5.11 :patc (om-make-point 37 25) (om-make-point 4 44) (om-make-point 518 529) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "x-union" '((om-load-boxcomment "comment" (om-make-point 261 127) '"INPUTS:$l1?    list$l2?    list$OPTIONAL INPUTS:$test     symbol, function or Lambda-function$key     symbol, function or Lambda-function$list       other lists$OUTPUT:$returns a set of lists ( l1?, l2?  and list  ) merged$" "" (om-make-point 192 45) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 120 46) '" will return $? OM->(7 1 2 3 4 5)$" "" (om-make-point 169 454) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 244 333) (om-make-point 66 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 141 332) (om-make-point 66 28) (list 1 3 5 7) "(1 3 5 7)" nil) (om-load-boxcall 'genfun "X-UNION" 'x-union '((om-load-inputfun 'input-funbox "first list" "L1?" nil) (om-load-inputfun 'input-funbox "second list" "L2?" nil)) (om-make-point 202 396) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 401 133) '"This function merges a set of lists,< l1?>  and <l2?>, or elements into a single list, with no repetitions. If the optional <test> argument is added (remember that this module might be extended) , the lists can be compared according to any  predicate ( the default value of <test> being 'equal). Only elements in< l1?> that return true when compared with all the elements in < l2?> (according to the predicate), are returned in the result list. If the key argument  is included (the default function is identity), its function is first evaluated using each of < l1?> elements as input, and then the lists are compared according to the test on the results of the function.  <test> and <key> may also be connected function or subpatch icons in 'lambda' mode. Additional lists can be compared using <list> ." "" (om-make-point 59 188) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 93 28) '"x-union" "" (om-make-point 205 8) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((3 0 4 0 nil 0) (2 0 4 1 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))

















































































































































































































