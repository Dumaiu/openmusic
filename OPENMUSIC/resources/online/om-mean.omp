;fileheader
; (5.11 :patc (om-make-point 14 96) (om-make-point 7 44) (om-make-point 504 653) "non documentation" 183)
;endfileheader
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "om-mean" '((om-load-boxcomment "comment" (om-make-point 142 91) '"INPUT:$self              list$OPTIONAL INPUT:$weights    number or list$OUTPUT:$returns the arithmetic mean of <self>$" "" (om-make-point 178 36) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 138 38) '"will return$? OM->8.333333333333334" "" (om-make-point 149 579) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 67 38) '"will return$? OM->13/2" "" (om-make-point 171 314) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 212 28) '"An example using a list of weights :" "" (om-make-point 80 399) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux1" 't 'nil (om-make-point 221 451) (om-make-point 198 39) (list 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2) "(0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2)" nil) (om-load-boxcall 'genfun "OM-MEAN" 'om-mean '((om-load-inputfun 'input-funbox "list of numbers" "SELF" (list 1)) (om-load-inputfun 'input-funbox "list of numbers" "WEIGHTS" 1)) (om-make-point 188 516) nil nil nil nil 1) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 57 451) (om-make-point 149 23) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil) (om-load-boxcomment "comment" (om-make-point 353 35) '"Note if you want to output a result in floating point you must include in the list <self> at least one element in floating point" "" (om-make-point 76 354) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcall 'bastype "aux" 't 'nil (om-make-point 137 214) (om-make-point 149 23) (list 1 2 3 4 5 6 7 8 9 10 11 12) "(1 2 3 4 5 6 7 8 9 10 11 12)" nil) (om-load-boxcall 'genfun "OM-MEAN" 'om-mean '((om-load-inputfun 'input-funbox "list of numbers" "SELF" (list 1))) (om-make-point 185 253) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 352 53) '"Returns the arithmetic mean of <self>$Optional inputs <weights> is a list of weights used to ponderate input numbers.$" "" (om-make-point 64 160) nil (om-make-color 0 0 0) (om-make-font "Arial" 10 :family nil :style 'nil :mode '(:srcor))) (om-load-boxcomment "comment" (om-make-point 111 29) '"om-mean" "" (om-make-point 180 8) nil (om-make-color 0 0 0) (om-make-font "Arial" 14 :family nil :style '(:bold) :mode '(:srcor)))) '((6 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 9 0 nil 0)) (list (let ((newpict (make-instance 'patch-picture :name 'kernel-om3))) (setf (thepict newpict) (om-get-picture 'kernel-om3)) (setf (name newpict) 'kernel-om3) (setf (pict-pos newpict) (om-make-point 3 33)) (setf (pict-size newpict) (om-make-point 98 83)) newpict)) 5.11))






































































































































































































































