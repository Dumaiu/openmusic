; OM File Header - Saved 2017/02/27 10:26:58
; (6.110101 :patc (om-make-point 207 103) (om-make-point 50 50) (om-make-point 428 759) "non documentation" 183 0 nil "2017/02/27 10:26:58")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../../out-files/chordseqs.sdif\"" "#P\"../../../out-files/markers.sdif\"") (list (quote :sound) "#P\"../../../in-files/africa.aiff\""))
(in-package :om)(load-lib-for (quote ("RepMus" "OM-pm2" "OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "as-om-om-supervp" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 129 36) (quote "SUPERVP transient detection") "" (om-make-point 198 174) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 129 36) (quote "PM2 chord-seq analysis") "" (om-make-point 196 419) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 129 36) (quote "SOUND + Temporal markers") "" (om-make-point 145 301) nil (om-make-color 0 0 0) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND4" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 61 46) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale microplay approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems player)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TRANSIENT-DETECTION" (quote transient-detection) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil) (om-load-inputkeyword (quote input-keyword) "" "threshold" (quote :threshold) 1.4 nil) (om-load-inputkeyword (quote input-keyword) "" "minfreq" (quote :minfreq) 0.0 nil) (om-load-inputkeyword (quote input-keyword) "" "maxfreq" (quote :maxfreq) 22050.0 nil) (om-load-inputkeyword (quote input-keyword) "" "minoffset" (quote :minoffset) 0.02 nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step-oversamp" (quote :step-oversamp) 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputkeyword (quote input-keyword) "" "windowtype" (quote :windowtype) "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "markers.sdif" nil))) (om-make-point 140 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 59 295) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote (0.023065644024180716D0 0.08126984169592663D0 0.15383180199195196D0 0.197369614938557D0 0.26892988543847657D0 0.42943328962904187D0 0.5405591812067562D0 0.6497292960960579D0 0.8034856515123494D0 0.8259713246477367D0 0.9440190281860885D0 1.0332879806358935D0 1.0797278913695052D0 1.1493877553150836D0 1.2306744547383895D0 1.349841823076445D0 1.492686178291094D0 1.5673469392015956D0 1.6253336214033418D0 1.6486167802583942D0 1.7687085228568776D0 1.8922895989524804D0 1.915646258716444D0 2.0225759358045195D0 2.101405896117696D0 2.1576515899754876D0 2.2291156464715463D0 2.2896375537785336D0 2.4295605686452247D0 2.4729251702810698D0 2.496145124929596D0 2.5638960383675338D0 2.695778490323024D0 2.822307023979436D0 2.9258823915146915D0 2.9721541952243804D0 3.088242187236442D0 3.111473923115537D0 3.2425843740622944D0 3.308843536191449D0 3.5178335723527195D0 3.623842382643735D0 3.8199043066400926D0 3.892069500954547D0 4.051712462950726D0 4.172210058950378D0 4.307157040663114D0 4.37378354439495D0 4.435156663731753D0 4.481451245942016D0 4.642571294428675D0 4.704670154584948D0 4.840922327570094D0 4.988782049029804D0 5.120014783378902D0)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHORD-SEQ-ANALYSIS" (quote chord-seq-analysis) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "BEGIN-T" (quote :begin-t) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "END-T" (quote :end-t) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "MARKERS" (quote :markers) nil nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "MAX-PARTIALS" (quote :max-partials) 12 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "AMP-TRESHOLD" (quote :amp-treshold) -40 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "ANALYSIS-TYPE" (quote :analysis-type) "averaged-spectrum" (list (list "Averaged Spectrum" "averaged-spectrum") (list "Inharmonic Partial Averaging" "inharmonic-partial-averaging"))) (om-load-inputkeyword (quote input-keyword) "no documentation" "WINDOWSIZE" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "FFTSIZE" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "STEP" (quote :step) 256 (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "no documentation" "WINDOWTYPE" (quote :windowtype) "hanning" nil) (om-load-inputkeyword (quote input-keyword) "no documentation" "OUTFILE" (quote :out) "chordseqs.sdif" nil))) (om-make-point 84 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "no documentation" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "no documentation" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "no documentation" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "no documentation" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 0))) (om-make-point 50 580) (om-make-point 233 104) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6548 7196 5980 6784 8444 6326) (5980 7190 6542 6790 6332) (6772 5974 7184 6320 7530 7972 6598) (6770 6326 7528 5972 7178 7970) (7188 5976 6778 6326 7534 6526 5164) (6544 5966 7186 6786 8442) (7190 5980 6326 7536 6558 6808) (5970 7188 7530 6320 6566) (6556 5968 7186 6146 7036) (6542 5974 7186) (6782 5962 7184 6330 7536 6578 7976) (6778 7534 6324 7976 6512) (6776 7528 6322 5140) (6570) (6544 6186 7384 6784 6010) (5972 7188 6328 7530 6550) (5978 7188 7530 6318) (5954 7182 6600) (6554 6764 7190 6000 6226 8450) (6542 5978 7188 6822) (6782 5972 7188 6326 7536 6558 7978) (6552 6768 6196 5990 7364 8448 7484 7096) (6546 6182 7384 6014 6790) (7188 5968 6326 7530 6552 6792) (5966 7188 6324 7528) (5978 7188 7530 6318) (5956 7182 6598) (6542 5978 7188 6814) (5994 7190 6796 6558 6328 7538 7988) (6778 7194 6002 6550 6704 6336 7538 7974 7466) (6772 5960 6328 7180 7532 6528 7970 7340) (6162 6782 7382 7530 6530) (6542 6178 7384 6790) (7194 5976 6322 6160 7530 6542 6810) (5966 7188 6324 7528) (5968 7188 6318 7530 6572) (6556 7190 6010 6268) (6542 7188 5978 6780) (6782 5964 7180 6322 7536 7978 6476) (6780 6322 7532 6536) (6540 6180 7380 6790) (5980 7192 6324 7532 6544) (5968 7192 6514 6378) (6544 7190 5972 6794) (6778 5964 6324 7530 7182 7972) (7188 5974 6784 7532 6554 6330) (6546 5974 7190 6778) (6540 5960 7184) (7196 5990 6350 6778 6608 6512 7542) (5980 7188 6324 7530) (5970 7192 6590 6382) (6544 7190 5978) (6770 5964 6326 7530 7186 7970 6528) (6796 6564 6326 7536 5140) (6550 6174 7392 6788 8578))) :lonset (quote (20 80 150 200 270 430 540 650 800 830 940 1030 1080 1150 1230 1350 1490 1570 1630 1650 1770 1890 1920 2020 2100 2160 2230 2290 2430 2470 2500 2560 2700 2820 2930 2970 3090 3110 3240 3310 3520 3620 3820 3890 4050 4170 4310 4370 4440 4480 4640 4700 4840 4990 5120 5230)) :ldur (quote ((60 60 60 60 60 60) (70 70 70 70 70) (50 50 50 50 50 50 50) (70 70 70 70 70 70) (160 160 160 160 160 160 160) (110 110 110 110 110) (110 110 110 110 110 110) (150 150 150 150 150) (30 30 30 30 30) (110 110 110) (90 90 90 90 90 90 90) (50 50 50 50 50) (70 70 70 70) (80) (120 120 120 120 120) (140 140 140 140 140) (80 80 80 80) (60 60 60) (20 20 20 20 20 20) (120 120 120 120) (120 120 120 120 120 120 120) (30 30 30 30 30 30 30 30) (100 100 100 100 100) (80 80 80 80 80 80) (60 60 60 60) (70 70 70 70) (60 60 60) (140 140 140 140) (40 40 40 40 40 40 40) (30 30 30 30 30 30 30 30 30) (60 60 60 60 60 60 60 60) (140 140 140 140 140) (120 120 120 120) (110 110 110 110 110 110 110) (40 40 40 40) (120 120 120 120 120) (20 20 20 20) (130 130 130 130) (70 70 70 70 70 70 70) (210 210 210 210) (100 100 100 100) (200 200 200 200 200) (70 70 70 70) (160 160 160 160) (120 120 120 120 120 120) (140 140 140 140 140 140) (60 60 60 60) (70 70 70) (40 40 40 40 40 40 40) (160 160 160 160) (60 60 60 60) (140 140 140) (150 150 150 150 150 150 150) (130 130 130 130 130) (110 110 110 110 110))) :lvel (quote ((84 67 64 45 40 40) (72 71 67 41 41) (82 69 63 54 49 43 43) (94 53 52 50 46 43) (68 64 47 43 42 42 41) (92 50 48 42 40) (72 68 59 56 46 42) (58 52 48 48 41) (77 45 42 42 41) (85 72 71) (86 59 55 53 51 46 42) (86 54 53 40 40) (53 48 48 43) (43) (90 54 46 42 41) (68 67 55 49 43) (63 57 46 46) (49 43 43) (83 49 47 47 41 40) (84 72 69 40) (72 57 52 48 46 45 41) (82 52 44 43 42 41 41 40) (91 56 47 41 40) (66 66 56 48 45 41) (75 71 53 52) (63 57 46 46) (49 43 43) (83 67 64 42) (67 66 62 59 47 44 40) (74 68 63 57 50 49 45 41 40) (73 55 52 50 49 42 41 41) (51 47 44 43 41) (90 55 46 42) (77 77 50 48 47 45 42) (73 71 51 50) (56 50 43 42 40) (78 46 45 41) (83 77 71 41) (100 56 52 50 49 45 42) (59 45 44 42) (82 53 46 41) (68 66 52 49 43) (49 45 41 41) (78 71 69 44) (93 53 50 47 47 43) (69 68 45 42 42 42) (91 61 60 44) (75 46 43) (61 61 47 44 44 44 43) (69 64 57 54) (48 43 41 41) (81 74 71) (85 50 49 48 46 42 41) (43 42 42 41 40) (92 53 47 45 40))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale microplay show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx player)) (list nil nil (quote t) 1 0 (om-make-point 40 10) (om-make-point 370 280) 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2 (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 5) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8600) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 137 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "chordseqs.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 106 428) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "chordseqs" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "markers.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 110 183) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "markers" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-MRK-ONSETS" (quote get-mrk-onsets) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 104 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 4 0 nil 0) (3 0 5 0 nil 0) (11 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (6 0 9 0 nil 0) (4 0 10 0 nil 0) (10 0 11 0 nil 0))) nil 6.110101))